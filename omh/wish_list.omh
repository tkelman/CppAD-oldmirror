/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-07 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin WishList$$
$spell
	Adolc
	Fadbad
	cygwin
	yy-mm-dd
	yyyymmdd
	cppad
	xml
	hpp
	xmguidlinesl
	CondExp
	Jacobian
	Vec
	Cpp
	Atan
	CppADlib
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Atan2$$
$index atan2$$
The $xref/Atan2//atan2/$$ function could be made faster by adding
a special operator for it.

$head CondExp$$
$index CondExp$$
Extend the conditional expressions $xref/CondExp/$$ so that they are 
valid for complex types by comparing real parts.
In addition, use this change to extend $xref/LuRatio/$$ so 
that it works with complex AD types.

$head Exceptions$$
When the function
$xref/Independent/$$ is called,  
the resulting $syntax%AD<%Base%>%$$ 
$xref/glossary/Tape State/tape state/$$ is $code Recording$$.
If an exception occurs before the call to the corresponding
$xref/ADFun/$$ constructor, the tape will be stuck 
in the $code Recording$$ state.
Thus, there should be a way to abort the current
$syntax%AD<%Base%>%$$ recording.


$head Multiple Tapes With Same Base Type$$
$index multiple, tape$$
$index tape, multiple$$
Some users have expressed an interest in having multiple tapes,
with the same base type,
recording at the same time. 
The idea is something like this:
$codep
	Independent(x);    // perhaps in thread 1
	Independent(y);    // perhaps in thread 2
	z = x * x;         // operation on tape corresponding to x
	w = y * y;         // operation on tape corresponding to y
	a = w * z;         // would generate an error because cannot mix tapes
$$
One application of this is where each of the tapes is on a different
processor in a shared memory multiple processor application.

$head Operation Sequence$$
$index sequence, operation$$
$index operation, sequence$$
It is possible to detect if the 
AD of $italic Base$$ 
$xref/glossary/Operation/Sequence/operation sequence/1/$$ 
does not depend on any of the
$xref/glossary/Independent Variable/independent variable/$$ values.
This could be returned as an extra
$xref/SeqProperty/$$.

$head Optimization$$
$index optimize, operation sequence$$
$index tape, optimize$$
$index sequence, optimize operations$$
$index operation, optimize sequence$$
A single $cref/RevSparseJac/$$ sweep could be used to determine
which parts of the operation sequence in an
$cref/ADFun/FunConstruct/$$ object can be removed.

$head Software Guidelines$$

$subhead Boost$$
The following is a list of some software guidelines taken from
$href%http://www.boost.org/more/lib_guide.htm#Guidelines%boost%$$.
These guidelines are not followed by the current CppAD source code,
but perhaps they should be:

$list number$$
Names (except as noted below) 
should be all lowercase, with words separated by underscores.
For example, acronyms should be treated as ordinary names 
(xml_parser instead of XML_parser).

$lnext
Template parameter names should begin with an uppercase letter.

$lnext
Macro names (gasp!) names should use all uppercase.
(This was done,  as a test case, 
in the filename branch for the cppad/local directory at the end of 2006-08. 
The macro's that are part of the
CppAD user interface were left in their original case. In addition,
the macros $code CppADUsageError$$ and $code CppADUnknownError$$
were not changed.
These will need to be changed throughout the source
code and should done as one separate operation.)

$lnext
Use spaces rather than tabs.  

$lend

$subhead Member Variables$$
Change member variable names so that they all end with an underscore.

$head Vector Element Type$$
Change cross references from 
$xref/SimpleVector/Elements of Specified Type/elements of a specified type/$$
to
$xref/SimpleVector/Value Type/value_type/$$.

$end
