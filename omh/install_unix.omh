/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-07 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin InstallUnix$$
$dollar @$$
$spell
	exp_apx
	tgz
	gpl
	Dev
	sed
	cppad
	gprof
	config
	stdvector
	std
	ublas
	hpp
	adouble
	badiff
	usr
	cygdrive
	htm
	xml
	Dir
	xvzf
	gz
	workspace
	Makefile
	exe
	Cygwin
	Microsoft
	dsw
	CppAD
	Adolc
	Fadbad
	ls
	aclocal
$$

$index CppAD, unix install$$
$index unix, CppAD install$$
$index free, unix install$$
$index install, unix CppAD$$

$section Unix Download, Test, and Installation$$

$head Download Current Version$$
$index download, unix$$
Note that $code 20071016.0$$ is the 
year, month, and date corresponding to the current version of CppAD.
Download either the CPL or GPL licensed version from:

$subhead CPL License$$
$href%cppad-20071016.0.cpl.tgz%$$

$subhead GPL License$$
$href%cppad-20071016.0.gpl.tgz%$$

$head Extraction$$
Use the command
$syntax%
	tar -xvzf cppad-20071016.0.%license%.tgz
%$$
(where $italic license$$ is $code cpl$$ or $code gpl$$)
to decompress and extract the unix format version
into the distribution directory
$syntax%
	cppad-20071016.0
%$$
All of the commands below are to be executed starting from this
directory.

$head User Documentation$$
The $code doc$$ sub-directory of the distribution directory
contains user documentation for CppAD.
The files $syntax%doc/%*%.htm%$$ are in HTML format.
If your browser supports XHTML+MATHML format,
an easier to read copy is available in the files
$syntax%doc/%*%.xml%$$.

$head Developer Documentation$$
The $code dev$$ sub-directory of the distribution directory
contains developer documentation for CppAD. 

$head Configure$$
$index configure$$
Enter the directory created by the extraction and execute the command:
$syntax%
	./configure                            \
	--prefix=%PrefixDir%                     \
	--with-Documentation                   \
	--with-Introduction                    \
	--with-Example                         \
	--with-TestMore                        \
	--with-Speed                           \
	--with-PrintFor                        \
	--with-SpeedExample                    \
	--with-profiling                       \
	--with-stdvector                       \  
	POSTFIX_DIR=%PostfixDir%                 \
	ADOLC_DIR=%AdolcDir%                     \
	FADBAD_DIR=%FadbadDir%                   \
	BOOST_DIR=%BoostDir%                     \
	CPP_ERROR_WARN=%CppErrorsAndWarnings%    \
%$$
where only the $code configure$$ command need appear.
The entries one each of the other lines are optional
and the text in italic is replaced values that you choose.

$head PrefixDir$$
$index configure, prefix directory$$
$index prefix, configure directory$$
$index directory, configure prefix$$
The default value for $italic PrefixDir$$ is $code @HOME$$
i.e., by default the CppAD include files 
will install in $code @HOME$$.
If you want to install elsewhere, you will have to use this option.
$pre

$$
As an example of using just the $code --prefix$$ option,
if you have permission to write into the directory 
$code /usr/local/include$$ 
$codep
	./configure --prefix=/usr/local
$$ 
will set up for installing the CppAD include files in the directory
$syntax%
	/usr/local/include/cppad
%$$
This is the standard location for such files on many systems.
In this case, $italic PrefixDir$$ is $code /usr/local$$.

$head --with-Documentation$$
$index documentation, install$$
$index install, documentation$$
If the command line argument $code --with-Documentation$$ is specified,
the CppAD documentation HTML and XML files are copied to the directory
$syntax%
	%PrefixDir%/share/doc/cppad-%version%/*
%$$
In this case, the top of the CppAD HTML documentation tree 
(with mathematics displayed as LaTex command) will be located at
$syntax%
	%PrefixDir%/share/doc/cppad-%version%/cppad.htm
%$$
and the top of the XML documentation tree
(with mathematics displayed as MathML) will be located at
$syntax%
	%PrefixDir%/share/doc/cppad-%version%/cppad.xml
%$$


$head --with-Introduction$$
$index introduction, unix$$
$index unix, introduction$$

$subhead get_started$$
$index get_started, unix$$
$index unix, get_started$$
If the command line argument $code --with-Introduction$$ is specified,
the $xref/get_started.cpp/$$ example will be built.
Once the $code make$$ command 
has been executed, you can run this example by executing the command 
$codep
	introduction/get_started/get_started
$$

$subhead exp_apx$$
$index exp_apx, unix$$
$index unix, exp_apx$$
If the command line argument $code --with-Introduction$$ is specified,
the $cref/exp_apx_main.cpp/$$ program
(verifies calculations in the $cref/Introduction/$$ $code exp_apx$$ example) 
will be built.
Once the $code make$$ command
has been executed, you can run these examples by executing the command
$codep
	introduction/exp_apx/exp_apx
$$

$head --with-Example$$
$index example, unix$$
$index test, unix$$
If the command line argument $code --with-Example$$ is specified,
the $xref/Example.cpp/$$ program 
(an extensive set of examples and correctness tests) will be built.
Once the $code make$$ command 
has been executed, you can run these examples by executing the command 
$codep
	example/example
$$

$head --with-TestMore$$
$index test more, unix$$
If the command line argument $code --with-TestMore$$ is specified,
another extensive set of correctness tests will be compiled by the
$xref/InstallUnix/make/make/$$ command. Once the $code make$$ command 
has been executed, you can run these tests by executing the command 
$codep
	test_more/test_more
$$

$head --with-Speed$$
$index speed, cppad test$$
$index test, cppad speed$$
$index cppad, speed test$$
If the command line argument $code --with-Speed$$ is specified,
the $code speed/cppad/speed_cppad_run/$$ program
(a set of CppAD speed tests) will built.
After you execute the $xref/InstallUnix/make/make/$$ command,
you can compile and run the $cref/speed_cppad/$$ tests.

$head --with-PrintFor$$
$index print, forward mode$$
$index forward, print$$
If the command line argument $code --with-PrintFor$$ is specified,
the $xref/PrintFor.cpp/$$ example will be built.
Once the $code make$$ command 
has been executed, you can run this example by executing the command 
$codep
	print_for/print_for
$$

$head --with-SpeedExample$$
$index speed, test example$$
$index example, speed test$$
$index test, speed example$$
If the command line argument $code --with-SpeedExample$$ is specified,
the speed test examples will be built.
Once the $code make$$ command 
has been executed, you can run this example by executing the command 
$codep
	speed/example/example
$$

$head --with-profiling$$
$index profile, unix$$
CppAD profile files that aid profiling with the GNU C++ compiler.
If the command line argument $code --with-profiling$$ is specified
(in addition to the argument $code --with-Speed$$)
a program called $code speed/profile/profile$$ is generated.
In this case, the following commands will profile the speed tests:
$syntax%
	speed/profile/profile %option%
	gprof -b speed/profile/profile
%$$ 
Running the $code speed/profile/profile$$ program is documented in
$cref/speed_main/$$.
If you are using a windows operating system with Cygwin or MinGW, 
you may have to replace $code profile$$ by $code profile.exe$$
in the $code gprof$$ command above; i.e.,
$codep
	gprof -b speed/profile/profile.exe
$$
In C++, template parameters and argument types become part of a 
routines's name.
This can make the $code gprof$$ output hard to read 
(the routine names can be very long).
You can remove the template parameters and argument types from the 
routine names by executing the following command
$codep
	gprof -b speed/profile/profile | sed -f speed/profile/gprof.sed
$$
If you are using a windows operating system with Cygwin or MinGW, 
you would need to use
$codep
	gprof -b speed/profile/profile.exe | sed -f speed/profile/gprof.sed
$$

$head --with-stdvector$$
$index std::vector, unix$$
The 
$small $cref/CPPAD_TEST_VECTOR/test_vector/$$ $$
template class is used for extensive examples and testing of CppAD.
If the command line argument $code --with-stdvector$$ is specified,
the default definition this template class is replaced by
$codep
	std::vector
$$
(In this case $italic BoostDir$$ must not also be specified.)


$head PostfixDir$$
$index configure, postfix directory$$
$index postfix, configure directory$$
$index directory, configure postfix$$
This configure command line option is no longer available.
It's documentation is included so that you know what its intention was:
$pre

$$
By default, there is no postfix directory.
As an example of using both the 
$code --prefix$$ and $code POSTFIX_DIR$$ options,
$codep
	./configure --prefix=/usr POSTFIX_DIR=test
$$ 
will set up for installing the CppAD include files in the directory
$syntax%
	/usr/include/test/cppad
%$$

$head AdolcDir$$
$index Adolc, unix$$
If you have 
$href%
	http://www.math.tu-dresden.de/~adol-c/%
	Adolc
%$$
installed on your system, you can 
specify a value for $italic AdolcDir$$ in the 
$xref/InstallUnix/Configure/configure/$$ command line.
The value of $italic AdolcDir$$ must be such that
$syntax%
	%AdolcDir%/include/adolc/adouble.h
%$$
is a valid way to reference $code adouble.h$$.
In this case,
after you execute the $xref/InstallUnix/make/make/$$ command,
you can compile and run the $cref/speed_adolc/$$ tests.
$pre

$$
If you are using Cygwin, 
you will have to add to following lines to the file
$code .profile$$ in your home directory:
$syntax%
	PATH=%AdolcDir%/bin:@{PATH}
	export PATH
%$$
in order for Adolc to run properly.
If $italic AdolcDir$$ begins with a disk specification,
you must use the Cygwin format for the disk specification.
For example, 
if $code d:/adolc_base$$ is the proper directory,
$code /cygdrive/d/adolc_base$$ should be used for $italic AdolcDir$$.

$head FadbadDir$$
$index Fadbad, unix$$
If you have
$href%
	http://www.imm.dtu.dk/fadbad.html/%
	Fadbad
%$$
installed on your system, you can 
specify a value for $italic FadbadDir$$.
It must be such that
$syntax%
	%FadbadDir%/FADBAD++/badiff.h
%$$
is a valid reference to $code badiff.h$$.
In this case,
after you execute the $xref/InstallUnix/make/make/$$ command,
you can compile and run the $cref/speed_fadbad/$$ tests.

$head BoostDir$$
$index boost, unix$$
The
$small $cref/CPPAD_TEST_VECTOR/test_vector/$$ $$
template class is used for extensive examples and testing of CppAD.
The default definition for $code CPPAD_TEST_VECTOR$$ is
$xref/CppAD_vector//CppAD::vector/$$.
If the command line argument
$syntax%
	BOOST_DIR=%BoostDir%
%$$
is present, it must be such that
$syntax%
	%BoostDir%/boost/numeric/ublas/vector.hpp
%$$
is a valid reference to the file $code vector.hpp$$.
In this case, the default definition of $code CPPAD_TEST_VECTOR$$ 
is replaced by
$codep
	boost::numeric::ublas::vector
$$
(see $href%http://www.boost.org%boost%$$).
If $italic BoostDir$$ is present, the argument $code --with-stdvector$$
must not be present.

$head CppErrorsAndWarnings$$
$index compile, unix flags$$
$index flags, unix compile$$
If the command line argument $italic CppErrorsAndWarnings$$ is present,
it specifies compiler error and warning flags. 
For example,
$syntax%
	CPP_ERROR_AND_WARN="-Wall -ansi"
%$$
would specify that error and warning flags $code -Wall$$
and $code -ansi$$ should be included
in all the C++ compile commands.
The error and warning flags chosen must be valid options
for the C++ compiler.
The default value for $italic CppErrorsAndWarnings$$ is the
empty string.


$head make$$
The command
$codep
	make
$$
will compile all of the examples and tests.  
An extensive set of examples and tests can be run as described under
the headings
$xref/InstallUnix/--with-Introduction/--with-Introduction/$$,
$xref/InstallUnix/--with-Example/--with-Example/$$,
$xref/InstallUnix/--with-TestMore/--with-TestMore/$$,
$xref/InstallUnix/--with-Speed/--with-Speed/$$,
$xref/InstallUnix/--with-PrintFor/--with-PrintFor/$$,
$xref/InstallUnix/AdolcDir/AdolcDir/$$, and
$xref/InstallUnix/FadbadDir/FadbadDir/$$ above.

$head Final Installation$$
Once you are satisfied that the tests are giving correct results,
you can install CppAD into easy to use directories by executing the command
$codep
	make install
$$
This will install CppAD in the location specified by 
$cref/PrefixDir/InstallUnix/PrefixDir/$$ and
$cref/PostfixDir/InstallUnix/PostfixDir/$$.

$end
