/* -----------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-06 Bradley M. Bell

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
------------------------------------------------------------------------ */
$begin FunConstruct$$
$spell 
	ADvector
	const
$$

$spell
$$

$section Construct an ADFun Object and Stop Recording$$

$index ADFun, construct$$
$index construct, ADFun$$
$index tape, stop recording$$
$index recording, stop tape$$

$head Syntax$$
$syntax%ADFun<%Base%> %f%(%x%, %y%)%$$


$head Purpose$$
The 
AD of $italic Base$$
$xref/glossary/Operation/Sequence/operation sequence/1/$$ 
corresponding to $italic f$$ is 
the operation sequence that occurred since the previous 
$xref/Independent//Independent(x)/$$
where $italic x$$ was a 
vector with elements of type $syntax%AD<%Base%>%$$.
The operation sequence defines an 
$xref/glossary/AD Function/AD function/$$
$latex \[
	F : B^n \rightarrow B^m
\] $$
where $latex B$$ is the space corresponding to objects of type $italic Base$$,
$italic n$$ is the size of the domain vector $italic x$$,
and $italic m$$ is the size of range vector $italic y$$.

$head Tape State$$
The tape that records $xref/glossary/AD of Base/AD of/$$ $italic Base$$ operations
must be in the 
$xref/glossary/Tape State/Recording/recording state/1/$$
when this constructor is called.
The recording will stop and
the AD operation sequence will be transferred to $italic f$$.
The tape will be in the $xref/glossary/Tape State/Empty/empty state/1/$$
after this constructor is called.

$head x$$
The vector $italic x$$ has prototype
$syntax%
	const %ADvector% &%x%
%$$
(see $xref/FunConstruct//ADvector/$$ below).
The length of $italic x$$ must be greater than zero
and it must be the 
$xref/Independent//independent variable vector/$$ corresponding to
the current $syntax%AD<%Base%>%$$ operation sequence; i.e.,
the current recording must have started with
$syntax%
	Independent(%x%)
%$$
In addition, none of the element of $italic x$$
can be assigned a new value between the call to $xref/Independent/$$
and the $syntax%ADFun<%Base%>%$$ constructor call.

$subhead Domain Space$$
The size of $italic x$$ is referred to as $latex n$$ above and the
domain space is $latex B^n$$.

$head y$$
The vector $italic y$$ has prototype
$syntax%
	const %ADvector% &%y%
%$$
(see $xref/FunConstruct//ADvector/$$ below).
The length of $italic y$$ must be greater than zero
and is the dimension of the range space for $italic f$$.

$subhead Range Space$$
The size of $italic y$$ is referred to as $latex m$$ above and the
domain space is $latex B^m$$.

$head ADvector$$
The type $italic ADvector$$ must be a $xref/SimpleVector/$$ class with
$xref/SimpleVector/Elements of Specified Type/elements of type/$$
$syntax%AD<%Base%>%$$.
The routine $xref/CheckSimpleVector/$$ will generate an error message
if this is not the case.

$head Forward$$
Originally, when $italic f$$ is constructed,
there is an implicit call to $xref/ForwardZero/$$ 
$syntax%
	%f%.Forward(0, %x_p%)
%$$ 
with the elements of $italic x_p$$ equal to 
the corresponding elements of $italic x$$.

$head Example$$
The file
$xref/Independent.cpp/$$ 
contains an example and test of this constructor.
It returns true if it succeeds and false otherwise.

$end
