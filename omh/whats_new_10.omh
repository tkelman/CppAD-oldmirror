$Id$
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-10 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin whats_new_10$$
$spell
	iostream
	obj_value
	std::cout
	endl
	gcc
	retape
	hpp
	ifdef
	nlp
	ipopt_cppad/src
	CppAD
$$

$section Changes and Additions to CppAD During 2010$$

$head Introduction$$
This section contains a list of the changes to CppAD during 2010
(in reverse order by date).
The purpose of this section is to
assist you in learning about changes between various versions of CppAD.

$head 01-24$$
It appears that in $cref/cppad_ipopt_nlp/$$, when $code retape[k]$$ was true,
and $code L[k] > 1$$, it was possible to use the wrong operation sequence
in the calculations (though a test case that demonstrated this could not be 
produced). This is because the argument value to $latex r_k (u)$$ depends
on the value of $latex \ell$$ in the expression
$latex \[
	r_k \circ [ J_{k, \ell} \otimes n ] (x)
\] $$
(even when the value of $latex x$$ does not change).
$pre

$$
There was a bug in the $cref/ipopt_ode_check.cpp/$$ program,
for a long time,  that did not show up until now. Basically,
the check had code of the form:
$codep
	# include <iostream>
	int main()
	{	double obj_value = obj_value;
		std::cout << "obj_value = " << obj_value << std::endl;
	} 
$$
The value of $code obj_value$$ is unspecified,
but gcc 4.4.2 (and previous versions) did not give any indication of this.

$head 01-23$$
Improve the sparsity patterns and reduce the amount of memory
required for large sparse problems using $cref/cppad_ipopt_nlp/$$.
The speed test $code cppad_ipopt/speed$$ showed significant improvement.


$head 01-20$$
We plan to split up the 
$code ipopt_cppad/src/ipopt_cppad_nlp.hpp$$ include file.
In preparation,
the example $code ipopt_cppad$$ has been changed to $code cppad_ipopt$$.
This will facilitate using $code CPPAD_IPOPT_*$$ for the
$code # ifdef$$ commands in the new include files
(note that they must begin with $code CPPAD$$).


$head 01-18$$
The $code ipopt_cppad$$ subdirectory of the distribution
has been split into an $code src$$, $code example$$, and $code speed$$
subdirectories.
The $code example$$ ($code speed$$)
subdirectory is where one builds the $cref/ipopt_cppad_nlp/cppad_ipopt_nlp/$$ examples
($cref%speed tests%ipopt_ode_speed.cpp%$$).

$head 01-04$$
The following items have been fulfilled and
hence were removed for the $cref/WishList/$$:
$list number$$
If an exception occurs before the call to the corresponding
$xref/ADFun/$$ constructor or $cref/Dependent/$$, 
the tape recording can be stopped using $cref/abort_recording/$$.

$lnext
A speed test for $cref/ipopt_cppad_nlp/cppad_ipopt_nlp/$$ was added; see
$cref/ipopt_ode_speed.cpp/$$.

$lnext
The $cref/optimize/$$ command uses hash coding to check
when an expression is already in the tape and can be reused.

$lnext
The $cref/optimize/$$ command removes operations that
are not used by any of the dependent variables.

$lnext
The $cref/ad_in_c.cpp/$$ example demonstrates how to connect
CppAD to an arbitrary scripting language.

$lnext
The vector of sets option has been added to sparsity calculations; 
see $cref/sparsity pattern/glossary/Sparsity Pattern/$$.

$lend


$end
