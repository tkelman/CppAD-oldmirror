/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-07 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin Introduction$$
$spell
	exp_eps
	Griewank
	Andreas
	CppAD
$$


$index introduction, AD$$
$index AD, introduction$$
$index Algorithmic Differentiation, introduction$$
$index Automatic Differentiation, introduction$$

$section An Introduction by Example to Algorithmic Differentiation$$


$head Preface$$

$subhead Algorithmic Differentiation$$
Algorithmic Differentiation 
(often referred to as Automatic Differentiation or just AD)
uses the software representation 
of a function to obtain an efficient method for calculating its derivatives.
These derivatives can be of arbitrary order and are analytic in nature 
(do not have any truncation error).

$subhead Forward Mode$$
A forward mode sweep computes 
the partial derivative of all the dependent variables with respect
to one independent variable (or independent variable direction). 

$subhead Reverse Mode$$
A reverse mode sweep computes 
the derivative of one dependent variable
(or one dependent variable direction) 
with respect to all the independent variables.

$subhead Operation Count$$
The number of floating point operations for either a 
forward or reverse mode sweep
is a small multiple of the number required to evaluate the original function. 
Thus, using reverse mode,
you can evaluate the derivative of a scalar valued function 
with respect to thousands of variables in a small multiple of the
work to evaluate the original function.

$subhead Efficiency$$
AD automatically takes advantage of the
speed of your algorithmic representation of a function.
For example,
if you calculate a determinant using LU factorization,
AD will use the LU representation for
the derivative of the determinant
(which is faster than using the definition of the determinant).

$head Purpose$$
This is an introduction by example
to Algorithmic Differentiation.
Its purpose is to aid in understand what AD calculates,
how the calculations are preformed,
and the amount of computation and memory required 
for a forward or reverse sweep.

$head Outline$$
$list number$$
Present a simple program using CppAD to compute the derivative
of a polynomial.
$lnext
Define an algorithm
that approximates the exponential function, exp_eps.
$lnext
Write out 
the floating point operation sequence 
that corresponds to a specific input to exp_eps. 
$lnext
Use the operation sequence, and a forward mode sweep,
to calculate a derivative of the function corresponding 
to the operation sequence.
$lnext
Calculate the same derivative using a reverse mode sweep.
$lnext
Use CppAD to compute the derivative of the operation sequence
both with a forward mode sweep and with a reverse mode sweep.
$lnext
Run all of the exp_eps routines and check the results.
$lend

$head Reference$$
An in-depth review of AD theory and methods can be found in 
the book
$italic 
Evaluating Derivatives:
Principles and Techniques of Algorithmic Differentiation
$$,
Andreas Griewank,
SIAM Frontiers in Applied Mathematics, 
2000.

$childtable%
	introduction/get_started/get_started.cpp%
	introduction/exp_apx/exp_2.hpp%
	introduction/exp_apx/exp_eps.hpp%
	introduction/exp_apx/main.cpp
%$$

$end
