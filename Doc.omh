/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-06 Bradley M. Bell

This program is free software; you can use it under the terms of the 
	         Common Public License Version 1.0.
You should have received a copy of the this license along with this program.
-------------------------------------------------------------------------- */
$begin CppAD$$

$spell
	cppad
	namespaces
	std
	templated
	const
	CppADvector
	multiplicative
	Microsoft
	bool
	Det
	namespace
	Cpp
	Var
	Diff
	initializes
$$

$index AD$$,
$index algorithmic differentiation$$
$index automatic differentiation$$
$index C++, algorithm derivative$$
$index CppAD$$
$index version, CppAD$$

$section 
A Package for Differentiation of C++ Algorithms: cppad-20060820
$$ 

$head Syntax$$
$syntax%# include "CppAD.h"%$$ $pre
$$
$syntax%using namespace CppAD;%$$ $pre
$$


$head Introduction$$
$index introduction$$
We refer to the
step by step conversion from an algorithm that computes function values
to an algorithm that computes derivative values
as $italic Algorithmic Differentiation$$
(often referred to as $italic Automatic Differentiation$$.) 
Given a C++ algorithm that computes function values,
CppAD generates an algorithm that computes its derivative values.

$list number$$
$href%http://www.coin-or.org/CppAD/%CppAD%$$
uses operator overloading to compute derivatives of algorithms defined in C++.
It is distributed under the $xref/License//GNU General Public License/$$
by the $href%http://www.coin-or.org/foundation.html%COIN-OR Foundation%$$.
Installation procedures are provided for both
$xref/InstallUnix//Unix/$$ and $xref/InstallWindows//MS Windows/$$
operating systems.
Extensive user and developer documentation is included.

$lnext
An AD of $italic Base$$
$xref/glossary/Operation/Sequence/operation sequence/1/$$
is stored as an 
$xref/ADFun//AD function object/$$ 
which can evaluate function values and derivatives.
Arbitrary order 
$xref/Forward//forward/$$ and $xref/Reverse//reverse/$$
mode derivative calculations
can be preformed on the operation sequence.
Logical comparisons can be included in an operation sequence
using AD $xref/CondExp//conditional expressions/$$.
Evaluation of user defined unary 
$xref/Discrete//discrete functions/$$ can also be included
in the sequence of operations; i.e.,
functions that depend on the
$xref/glossary/Independent Variable/independent variables/$$
but which have identically zero derivatives
(e.g., a step function).
Derivatives of functions that are defined in terms of other derivatives
can be computed using multiple tapes
(see $xref/MulTape/$$ for a simple example
and $xref/OdeTaylor.cpp//$$ for a more realistic example).

$lnext
Includes a C++ $xref/library/$$ that is useful
for general operator overloaded numerical method.
Allows for replacement of the
$xref/CppADvector//CppADvector/$$ 
template vector class which is used for extensive testing; 
for example, you can do your testing with the
$href%http://www.boost.org/libs/numeric/ublas/doc/index.htm%uBlas%$$ 
template vector class.

$lnext
See $xref/WhatsNew06/$$ for a list of recent extensions and bug fixes.

$lend

You can find out about other algorithmic differentiation tools
and about algorithmic differentiation in general at the web site
$href%http://www.autodiff.org%$$
or at
$href%
	http://www.math.tu-dresden.de/wir/staff/griewank/%
	Andreas Griewank's home page
%$$.

$head Example$$
The file
$xref/GetStarted.cpp/$$
contains an example and test of using CppAD to compute
the derivative of a polynomial.
There are many other 
$xref/Example//examples/$$.

$head Base Type Requirements$$
$index require, Base$$
$index type, Base require$$
$index Base, require$$

The currently allowable base types are:
$code float$$,
$code double$$,
$code std::complex<float>$$,
$code std::complex<double>$$, 
or any type in the 
$xref/glossary/AD Type Sequence/AD type sequences/$$ above
these types.


$head Include File$$
$index include, CppAD.h$$
$index CppAD.h, include$$
The following include directive
$syntax%
	# include CppAD/CppAD.h
%$$
includes the CppAD package for the rest of the current compilation unit.

$head Preprocessor Symbols$$
All the preprocessor symbols used by CppAD begin with $code CppAD$$.
For example, 
the preprocessor symbol $code CppADIncluded$$ is used to determine
if $code CppAD.h$$ has already been included.
As another example,  
the preprocessor symbol $xref/CppADvector/$$ determines which
$xref/SimpleVector/$$ template class is extensively tested with CppAD.

$head Namespace$$
$index CppAD, namespace$$
$index namespace, CppAD$$
All of the functions and objects defined by CppAD are in the
$code CppAD$$ namespace; for example, you can access the $xref/AD/$$ types as 
$syntax%
	size_t n = 2;
	CppAD::vector< CppAD::AD<%Base%> > %x%(%n%)
%$$ 
You can abbreviate access to one object or function a $code using$$ 
command of the form
$syntax%
	using CppAD::AD
	CppAD::vector< AD<%Base%> > %x%(%n%)
%$$ 
You can abbreviate access to all CppAD objects and functions 
with a command of the form
$syntax%
	using namespace CppAD
	vector< AD<%Base%> > %x%(%n%)
%$$ 
If you include other namespaces in a similar manner,
this can cause naming conflicts.


$childtable%
	omh/license.omh%
	omh/Faq.omh%
	omh/Install.omh%
	GetStarted/GetStarted.cpp%
	omh/Introduction.omh%
	CppAD/local/UserAD.h%
	CppAD/local/ADFun.h%
	omh/library.omh%
	omh/Example.omh%
	omh/Appendix.omh
%$$

$include CppAD.tex$$ 

$end
