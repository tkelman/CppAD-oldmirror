<html><head>
<title>Keyword Index</title>
<meta name="description" id="description" content="Keyword Index">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='__index_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="_reference.htm" target="_top">Prev</a>
</td><td><a href="_search.htm" target="_top">Next</a>
</td><td><a href="cppad.htm" target="_top">Top</a>
</td><td>
<select onchange='choose_down1(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>_index</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>A</option>
<option>B</option>
<option>C</option>
<option>D</option>
<option>E</option>
<option>F</option>
<option>G</option>
<option>H</option>
<option>I</option>
<option>J</option>
<option>K</option>
<option>L</option>
<option>M</option>
<option>N</option>
<option>O</option>
<option>P</option>
<option>Q</option>
<option>R</option>
<option>S</option>
<option>T</option>
<option>U</option>
<option>V</option>
<option>W</option>
<option>Z</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Keyword Index</big></big></b></center>
<b>!=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>*</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="mul.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="mul.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>*=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="muleq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>+</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="add.htm" target="_top">AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="add.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>unary<b>&nbsp;</b>operator&#160;<a href="unaryplus.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator</a><br>
<b>+=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="addeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>-</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="sub.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="sub.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>unary<b>&nbsp;</b>operator&#160;<a href="unaryminus.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
<b>-=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="subeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>/</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="div.htm" target="_top">AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="div.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>/=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="diveq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>&lt;</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>&lt;&lt;</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="output.cpp.htm" target="_top">AD&nbsp;Output&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>output&#160;<a href="output.htm" target="_top">AD&nbsp;Output&nbsp;Stream&nbsp;Operator</a><br>
<b>&lt;=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>=</b><br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="eq.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator</a><br>
<b>==</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>&gt;</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>&gt;=</b><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
<b>[]</b><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>vector&#160;<a href="cppad_vector.htm#Element Access" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Element&nbsp;Access</a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm#Element Access" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Element&nbsp;Access</a><br>

<b><big><a name="A">A</a></big></b>
<br>
AD&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29</a><br>
&#160;&#160;&#160;&#160;&#160;<b>=</b>&#160;<a href="eq.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;arithmetic<b>&nbsp;</b>operator&#160;<a href="arithmetic.htm" target="_top">AD&nbsp;Arithmetic&nbsp;Operators&nbsp;and&nbsp;Computed&nbsp;Assignments</a><br>
&#160;&#160;&#160;&#160;&#160;assignment<b>&nbsp;</b>operator&#160;<a href="eq.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;binary<b>&nbsp;</b>add<b>&nbsp;</b>operator&#160;<a href="add.htm" target="_top">AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;binary<b>&nbsp;</b>compare<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;binary<b>&nbsp;</b>divide<b>&nbsp;</b>operator&#160;<a href="div.htm" target="_top">AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;binary<b>&nbsp;</b>multiply<b>&nbsp;</b>operator&#160;<a href="mul.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;binary<b>&nbsp;</b>subtract<b>&nbsp;</b>operator&#160;<a href="sub.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>assignment&#160;<a href="arithmetic.htm" target="_top">AD&nbsp;Arithmetic&nbsp;Operators&nbsp;and&nbsp;Computed&nbsp;Assignments</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>assignment<b>&nbsp;</b>add&#160;<a href="addeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>assignment<b>&nbsp;</b>divide&#160;<a href="diveq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>assignment<b>&nbsp;</b>multiply&#160;<a href="muleq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>assignment<b>&nbsp;</b>subtract&#160;<a href="subeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>from<b>&nbsp;</b>Base&#160;<a href="copybase.htm" target="_top">AD&nbsp;From&nbsp;Base&nbsp;Type&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;constructor&#160;<a href="constructor.htm" target="_top">AD&nbsp;Constructors</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>from&#160;<a href="convert.htm" target="_top">Conversion&nbsp;and&nbsp;Printing&nbsp;of&nbsp;AD&nbsp;Objects</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>to<b>&nbsp;</b>Base&#160;<a href="value.htm" target="_top">Convert&nbsp;From&nbsp;an&nbsp;AD&nbsp;Type&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>to<b>&nbsp;</b>integer&#160;<a href="integer.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;Integer</a><br>
&#160;&#160;&#160;&#160;&#160;copy<b>&nbsp;</b>construct&#160;<a href="copyad.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;default<b>&nbsp;</b>construct&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;default<b>&nbsp;</b>construct&#160;<a href="default.htm" target="_top">AD&nbsp;Default&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="introduction.htm" target="_top">An&nbsp;Introduction&nbsp;by&nbsp;Example&nbsp;to&nbsp;Algorithmic&nbsp;Differentiation</a><br>
&#160;&#160;&#160;&#160;&#160;object&#160;<a href="ad.htm" target="_top">AD&nbsp;Objects</a><br>
&#160;&#160;&#160;&#160;&#160;stream<b>&nbsp;</b>output&#160;<a href="output.htm" target="_top">AD&nbsp;Output&nbsp;Stream&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;type<b>&nbsp;</b>sequence&#160;<a href="glossary.htm#AD Type Sequence" target="_top">Glossary:&#160;AD&nbsp;Type&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;unary<b>&nbsp;</b>minus<b>&nbsp;</b>operator&#160;<a href="unaryminus.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;unary<b>&nbsp;</b>plus<b>&nbsp;</b>operator&#160;<a href="unaryplus.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator</a><br>
ADFun<br>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.htm" target="_top">Comparison&nbsp;Changes&nbsp;During&nbsp;Zero&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;check&#160;<a href="funcheck.htm" target="_top">Check&nbsp;an&nbsp;ADFun&nbsp;Sequence&nbsp;of&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;construct&#160;<a href="funconstruct.htm" target="_top">Construct&nbsp;an&nbsp;ADFun&nbsp;Object&nbsp;and&nbsp;Stop&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;Domain&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
&#160;&#160;&#160;&#160;&#160;evaluate&#160;<a href="funeval.htm" target="_top">Evaluate&nbsp;ADFun&nbsp;Functions,&nbsp;Derivatives,&nbsp;and&nbsp;Sparsity&nbsp;Patterns</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Memory&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;Order&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;object&#160;<a href="adfun.htm" target="_top">ADFun&nbsp;Objects</a><br>
&#160;&#160;&#160;&#160;&#160;operation<b>&nbsp;</b>sequence&#160;<a href="dependent.htm" target="_top">Stop&nbsp;Recording&nbsp;and&nbsp;Store&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
&#160;&#160;&#160;&#160;&#160;Range&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
&#160;&#160;&#160;&#160;&#160;Size&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;taylor<b>_</b>size&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;use<b>_</b>VecAD&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
&#160;&#160;&#160;&#160;&#160;var<b>_</b>size&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
Adolc&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Adolc&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;Adolc</a><br>
&#160;&#160;&#160;&#160;&#160;compare&#160;<a href="exampleadolc.cpp.htm" target="_top">Compare&nbsp;Adolc&nbsp;and&nbsp;CppAD&nbsp;Results</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detluadolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detminoradolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detluadolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Minor<b>&nbsp;</b>expand&#160;<a href="detminoradolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detluadolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detminoradolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#AdolcDir" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;AdolcDir</a><br>
Algorithmic<b>&nbsp;</b>Differentiation<br>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="introduction.htm" target="_top">An&nbsp;Introduction&nbsp;by&nbsp;Example&nbsp;to&nbsp;Algorithmic&nbsp;Differentiation</a><br>
Automatic<b>&nbsp;</b>Differentiation<br>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="introduction.htm" target="_top">An&nbsp;Introduction&nbsp;by&nbsp;Example&nbsp;to&nbsp;Algorithmic&nbsp;Differentiation</a><br>
abs<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="abs.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="abs.cpp.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
absolute<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>value&#160;<a href="abs.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;difference&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
aclocal&#160;<a href="whatsnew06.htm#01-08" target="_top">Changes&nbsp;and&nbsp;Additions&nbsp;to&nbsp;CppAD:&#160;01-08</a><br>
acos<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="acos.cpp.htm" target="_top">The&nbsp;AD&nbsp;acos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="acosforward.htm" target="_top">Arccosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="acosreverse.htm" target="_top">Arccosine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
ad&#160;<a href="glossary.htm#AD Type Sequence" target="_top">Glossary:&#160;AD&nbsp;Type&nbsp;Sequence</a><br>
&#160;&#160;&#160;<a href="glossary.htm#AD of Base" target="_top">Glossary:&#160;AD&nbsp;of&nbsp;Base</a><br>
&#160;&#160;&#160;<a href="glossary.htm#AD Function" target="_top">Glossary:&#160;AD&nbsp;Function</a><br>
add<br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="add.htm" target="_top">AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="addeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="add.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
algorithm<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="expapx.htm" target="_top">An&nbsp;Example&nbsp;Exponential&nbsp;Approximation</a><br>
algorithmic<b>&nbsp;</b>differentiation&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29</a><br>
all&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Fadbad&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Adolc&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
arithmetic<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="arithmetic.htm" target="_top">AD&nbsp;Arithmetic&nbsp;Operators&nbsp;and&nbsp;Computed&nbsp;Assignments</a><br>
asin<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="asin.cpp.htm" target="_top">The&nbsp;AD&nbsp;asin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="asinforward.htm" target="_top">Arcsine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="asinreverse.htm" target="_top">Arcsine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
assert<br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>handler&#160;<a href="errorhandler.htm" target="_top">Replacing&nbsp;the&nbsp;CppAD&nbsp;Error&nbsp;Handler</a><br>
assign<br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="condexp.htm" target="_top">AD&nbsp;Conditional&nbsp;Expressions</a><br>
assignment<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="eq.cpp.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed&#160;<a href="arithmetic.htm" target="_top">AD&nbsp;Arithmetic&nbsp;Operators&nbsp;and&nbsp;Computed&nbsp;Assignments</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>add<b>&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>divide<b>&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>multiply<b>&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>subtract<b>&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>operator&#160;<a href="eq.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>vector&#160;<a href="cppad_vector.htm#Assignment" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Assignment</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>AD<b>&nbsp;</b>add&#160;<a href="addeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>AD<b>&nbsp;</b>divide&#160;<a href="diveq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>AD<b>&nbsp;</b>multiply&#160;<a href="muleq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;computed<b>&nbsp;</b>AD<b>&nbsp;</b>subtract&#160;<a href="subeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="eq.htm#Result.AD&lt;Base&gt;" target="_top">AD&nbsp;Assignment&nbsp;Operator:&#160;Result.AD&lt;Base&gt;</a><br>
&#160;&#160;&#160;&#160;&#160;operator&#160;<a href="faq.htm#Assignment and Independent" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Assignment&nbsp;and&nbsp;Independent</a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm#Assignment" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Assignment</a><br>
atan<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="atan.cpp.htm" target="_top">The&nbsp;AD&nbsp;atan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="atanforward.htm" target="_top">Arctangent&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="atanreverse.htm" target="_top">Arctangent&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
atan2&#160;<a href="wishlist.htm#Atan2" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List:&#160;Atan2</a><br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="atan2.htm" target="_top">AD&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="mathother.htm" target="_top">Other&nbsp;AD&nbsp;Math&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;AD&nbsp;atan2&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
atomic&#160;<a href="glossary.htm#Operation.Atomic" target="_top">Glossary:&#160;Operation.Atomic</a><br>
automatic<b>&nbsp;</b>differentiation&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29</a><br>

<b><big><a name="B">B</a></big></b>
<br>
Base<br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>AD<b>&nbsp;</b>from&#160;<a href="copybase.htm" target="_top">AD&nbsp;From&nbsp;Base&nbsp;Type&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;from<b>&nbsp;</b>AD&#160;<a href="value.htm" target="_top">Convert&nbsp;From&nbsp;an&nbsp;AD&nbsp;Type&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;require&#160;<a href="cppad.htm#Base Type Requirements" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Base&nbsp;Type&nbsp;Requirements</a><br>
BenderQuad&#160;<a href="benderquad.htm" target="_top">Computing&nbsp;Jacobian&nbsp;and&nbsp;Hessian&nbsp;of&nbsp;Bender's&nbsp;Reduced&nbsp;Objective</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="benderquad.cpp.htm" target="_top">BenderQuad:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
base&#160;<a href="glossary.htm#Base Type" target="_top">Glossary:&#160;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#Base Function" target="_top">Glossary:&#160;Base&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#AD of Base" target="_top">Glossary:&#160;AD&nbsp;of&nbsp;Base</a><br>
&#160;&#160;&#160;&#160;&#160;convert<b>&nbsp;</b>to<b>&nbsp;</b>AD&#160;<a href="copybase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
binary<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>add<b>&nbsp;</b>operator&#160;<a href="add.htm" target="_top">AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>bool&#160;<a href="boolfun.htm" target="_top">AD&nbsp;Boolean&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>compare<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>divide<b>&nbsp;</b>operator&#160;<a href="div.htm" target="_top">AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>multiply<b>&nbsp;</b>operator&#160;<a href="mul.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>subtract<b>&nbsp;</b>operator&#160;<a href="sub.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
bool<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>function&#160;<a href="boolfun.htm" target="_top">AD&nbsp;Boolean&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="vectorbool.cpp.htm" target="_top">CppAD::vectorBool&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
boost<br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#BoostDir" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;BoostDir</a><br>
bug<br>
&#160;&#160;&#160;&#160;&#160;gcc<b>&nbsp;</b>3<b>.</b>4<b>.</b>4&#160;<a href="bugs.htm#gcc 3.4.4 -O2" target="_top">Know&nbsp;Bugs&nbsp;and&nbsp;Problems&nbsp;Using&nbsp;CppAD:&#160;gcc&nbsp;3.4.4&nbsp;-O2</a><br>
bugs<br>
&#160;&#160;&#160;&#160;&#160;reporting&#160;<a href="faq.htm#Bugs" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Bugs</a><br>
&#160;&#160;&#160;&#160;&#160;using<b>&nbsp;</b>CppAD&#160;<a href="bugs.htm" target="_top">Know&nbsp;Bugs&nbsp;and&nbsp;Problems&nbsp;Using&nbsp;CppAD</a><br>

<b><big><a name="C">C</a></big></b>
<br>
C<br>
&#160;&#160;&#160;&#160;&#160;interface<b>&nbsp;</b>to&#160;<a href="interface2c.cpp.htm" target="_top">Interfacing&nbsp;to&nbsp;C:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
C<b>++</b><br>
&#160;&#160;&#160;&#160;&#160;algorithm<b>&nbsp;</b>derivative&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29</a><br>
&#160;&#160;&#160;&#160;&#160;numerical<b>&nbsp;</b>template<b>&nbsp;</b>library&#160;<a href="library.htm" target="_top">The&nbsp;CppAD&nbsp;General&nbsp;Purpose&nbsp;Library</a><br>
CheckNumericType&#160;<a href="checknumerictype.cpp.htm" target="_top">The&nbsp;CheckNumericType&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
CheckSimpleVector&#160;<a href="checksimplevector.cpp.htm" target="_top">The&nbsp;CheckSimpleVector&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
CompareChange&#160;<a href="faq.htm#CompareChange" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;CompareChange</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="comparechange.htm" target="_top">Comparison&nbsp;Changes&nbsp;During&nbsp;Zero&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
CondExp&#160;<a href="wishlist.htm#CondExp" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List:&#160;CondExp</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="condexp.cpp.htm" target="_top">Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
CppAD&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29</a><br>
&#160;&#160;&#160;&#160;&#160;namespace&#160;<a href="cppad.htm#Namespace" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Namespace</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>install&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
CppAD<b>.</b>h<br>
&#160;&#160;&#160;&#160;&#160;include&#160;<a href="cppad.htm#Include File" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Include&nbsp;File</a><br>
CppAD<b>::</b>vector<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
CppAD<b>::</b>vectorBool<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="vectorbool.cpp.htm" target="_top">CppAD::vectorBool&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
CppADvector&#160;<a href="cppadvector.htm" target="_top">Choosing&nbsp;The&nbsp;CppADvector&nbsp;Template&nbsp;Class</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.htm#Namespace.CppADvector Preprocessor Symbol" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.CppADvector&nbsp;Preprocessor&nbsp;Symbol</a><br>
calculate<br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>mode&#160;<a href="forwardany.htm" target="_top">Any&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>mode&#160;<a href="reverseany.htm" target="_top">Any&nbsp;Order&nbsp;Reverse&nbsp;Mode</a><br>
capacity<br>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="capacity_taylor.htm" target="_top">Controlling&nbsp;Taylor&nbsp;Coefficients&nbsp;Memory&nbsp;Allocation</a><br>
capacity<b>_</b>taylor&#160;<a href="capacity_taylor.htm" target="_top">Controlling&nbsp;Taylor&nbsp;Coefficients&nbsp;Memory&nbsp;Allocation</a><br>
central<b>&nbsp;</b>difference&#160;<a href="interface2c.cpp.htm" target="_top">Interfacing&nbsp;to&nbsp;C:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
check<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funcheck.htm" target="_top">Check&nbsp;an&nbsp;ADFun&nbsp;Sequence&nbsp;of&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="checknumerictype.htm" target="_top">Check&nbsp;NumericType&nbsp;Class&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
class<br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;template<b>&nbsp;</b>CppAD<b>&nbsp;</b>vector&#160;<a href="cppad_vector.htm" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class</a><br>
coefficient&#160;<a href="glossary.htm#Taylor Coefficient" target="_top">Glossary:&#160;Taylor&nbsp;Coefficient</a><br>
compare&#160;<a href="fadbad.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;Fadbad</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;Adolc</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
compile<br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>flags&#160;<a href="installunix.htm#CppErrorsAndWarnings" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;CppErrorsAndWarnings</a><br>
complex&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;faq&#160;<a href="faq.htm#Complex Types" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Complex&nbsp;Types</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
computed<br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment&#160;<a href="arithmetic.htm" target="_top">AD&nbsp;Arithmetic&nbsp;Operators&nbsp;and&nbsp;Computed&nbsp;Assignments</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment<b>&nbsp;</b>add<b>&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment<b>&nbsp;</b>divide<b>&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment<b>&nbsp;</b>multiply<b>&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment<b>&nbsp;</b>subtract<b>&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;assignment<b>&nbsp;</b>AD<b>&nbsp;</b>add&#160;<a href="addeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;assignment<b>&nbsp;</b>AD<b>&nbsp;</b>divide&#160;<a href="diveq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;assignment<b>&nbsp;</b>AD<b>&nbsp;</b>multiply&#160;<a href="muleq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;assignment<b>&nbsp;</b>AD<b>&nbsp;</b>subtract&#160;<a href="subeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction&nbsp;Operator</a><br>
concept<br>
&#160;&#160;&#160;&#160;&#160;C<b>++</b>&#160;<a href="library.htm#C++ Concepts" target="_top">The&nbsp;CppAD&nbsp;General&nbsp;Purpose&nbsp;Library:&#160;C++&nbsp;Concepts</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>numeric&#160;<a href="checknumerictype.htm" target="_top">Check&nbsp;NumericType&nbsp;Class&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>simple<b>&nbsp;</b>vector&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
conditional<br>
&#160;&#160;&#160;&#160;&#160;expression&#160;<a href="condexp.htm" target="_top">AD&nbsp;Conditional&nbsp;Expressions</a><br>
configure&#160;<a href="installunix.htm#Configure" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;Configure</a><br>
&#160;&#160;&#160;&#160;&#160;prefix&#160;<a href="installunix.htm#PrefixDir and PostfixDir" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;PrefixDir&nbsp;and&nbsp;PostfixDir</a><br>
construct<br>
&#160;&#160;&#160;&#160;&#160;,<b>&nbsp;</b>AD<b>&nbsp;</b>default&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>from<b>&nbsp;</b>Base&#160;<a href="copybase.htm" target="_top">AD&nbsp;From&nbsp;Base&nbsp;Type&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funconstruct.htm" target="_top">Construct&nbsp;an&nbsp;ADFun&nbsp;Object&nbsp;and&nbsp;Stop&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;copy<b>&nbsp;</b>AD&#160;<a href="copyad.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;default&#160;<a href="default.htm" target="_top">AD&nbsp;Default&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;from<b>&nbsp;</b>base<b>&nbsp;</b>type&#160;<a href="copybase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
constructor<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="constructor.htm" target="_top">AD&nbsp;Constructors</a><br>
&#160;&#160;&#160;&#160;&#160;copy<b>&nbsp;</b>vector&#160;<a href="simplevector.htm#Copy Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Copy&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;element&#160;<a href="simplevector.htm#Element Constructor and Destructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Element&nbsp;Constructor&nbsp;and&nbsp;Destructor</a><br>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="numerictype.htm#Constructor From Integer" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Constructor&nbsp;From&nbsp;Integer</a><br>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="numerictype.htm#Default Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Default&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;numeric<b>&nbsp;</b>copy&#160;<a href="numerictype.htm#Copy Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Copy&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;size<b>&nbsp;</b>vector&#160;<a href="simplevector.htm#Sizing Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Sizing&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>default&#160;<a href="simplevector.htm#Default Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Default&nbsp;Constructor</a><br>
control<br>
&#160;&#160;&#160;&#160;&#160;ODE<b>&nbsp;</b>error&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;Ode<b>&nbsp;</b>Gear&#160;<a href="odegearcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;Gear's&nbsp;Ode&nbsp;Solvers</a><br>
convert<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>to<b>&nbsp;</b>Base&#160;<a href="value.htm" target="_top">Convert&nbsp;From&nbsp;an&nbsp;AD&nbsp;Type&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>to<b>&nbsp;</b>integer&#160;<a href="integer.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;Integer</a><br>
&#160;&#160;&#160;&#160;&#160;from<b>&nbsp;</b>AD&#160;<a href="convert.htm" target="_top">Conversion&nbsp;and&nbsp;Printing&nbsp;of&nbsp;AD&nbsp;Objects</a><br>
copy<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>construct&#160;<a href="copyad.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>object&#160;<a href="copyad.cpp.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;numeric<b>&nbsp;</b>constructor&#160;<a href="numerictype.htm#Copy Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Copy&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>constructor&#160;<a href="simplevector.htm#Copy Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Copy&nbsp;Constructor</a><br>
cos<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="cos.cpp.htm" target="_top">The&nbsp;AD&nbsp;cos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
cosh<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="cosh.cpp.htm" target="_top">The&nbsp;AD&nbsp;cosh&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>

<b><big><a name="D">D</a></big></b>
<br>
Dependent&#160;<a href="dependent.htm" target="_top">Stop&nbsp;Recording&nbsp;and&nbsp;Store&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
DetByLu&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
DetByMinor&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
DetOfMinor&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
Domain<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
default<br>
&#160;&#160;&#160;&#160;&#160;constructor&#160;<a href="default.htm" target="_top">AD&nbsp;Default&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;numeric<b>&nbsp;</b>constructor&#160;<a href="numerictype.htm#Default Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Default&nbsp;Constructor</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>constructor&#160;<a href="simplevector.htm#Default Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Default&nbsp;Constructor</a><br>
delete<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="tracknewdel.cpp.htm" target="_top">Tracking&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;track&#160;<a href="tracknewdel.htm" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete</a><br>
dependent&#160;<a href="glossary.htm#Operation.Dependent" target="_top">Glossary:&#160;Operation.Dependent</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#Dependent Variable" target="_top">Glossary:&#160;Dependent&nbsp;Variable</a><br>
derivative<br>
&#160;&#160;&#160;&#160;&#160;directional<b>&nbsp;</b>abs&#160;<a href="abs.htm#Directional Derivative" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&#160;Directional&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;directional<b>&nbsp;</b>example&#160;<a href="abs.cpp.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="revone.htm" target="_top">First&nbsp;Order&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="revone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Derivative&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;first<b>&nbsp;</b>order<b>&nbsp;</b>driver&#160;<a href="revone.htm" target="_top">First&nbsp;Order&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>mode&#160;<a href="forwardany.htm" target="_top">Any&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&nbsp;</b>template&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>mode&#160;<a href="reverseany.htm" target="_top">Any&nbsp;Order&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;tape<b>&nbsp;</b>calculation&#160;<a href="multape.htm" target="_top">Using&nbsp;Multiple&nbsp;Tapes</a><br>
destructor<br>
&#160;&#160;&#160;&#160;&#160;element&#160;<a href="simplevector.htm#Element Constructor and Destructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Element&nbsp;Constructor&nbsp;and&nbsp;Destructor</a><br>
determinant&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="luratio.htm#LU.Determinant" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix&nbsp;and&nbsp;Stability&nbsp;Calculation:&#160;LU.Determinant</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="lufactor.htm#LU.Determinant" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix:&#160;LU.Determinant</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Adolc&#160;<a href="detluadolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Adolc&#160;<a href="detminoradolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;by<b>&nbsp;</b>minors&#160;<a href="detbylu.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;by<b>&nbsp;</b>minors&#160;<a href="detbyminor.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;by<b>&nbsp;</b>minors&#160;<a href="detofminor.cpp.htm" target="_top">Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Fadbad&#160;<a href="detlufadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Fadbad&#160;<a href="detminorfadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detbylu.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="luratio.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix&nbsp;and&nbsp;Stability&nbsp;Calculation</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>speed&#160;<a href="detluspeed.cpp.htm" target="_top">Determinant&nbsp;by&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>speed&#160;<a href="detminorspeed.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;source<b>&nbsp;</b>code&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
difference<br>
&#160;&#160;&#160;&#160;&#160;absolute&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
&#160;&#160;&#160;&#160;&#160;central&#160;<a href="interface2c.cpp.htm" target="_top">Interfacing&nbsp;to&nbsp;C:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;relative&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
differential&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="odegear.htm" target="_top">An&nbsp;Arbitrary&nbsp;Order&nbsp;Gear&nbsp;Method</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;ODE<b>&nbsp;</b>error<b>&nbsp;</b>control&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;Ode<b>&nbsp;</b>Gear<b>&nbsp;</b>control&#160;<a href="odegearcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;Gear's&nbsp;Ode&nbsp;Solvers</a><br>
dimension<br>
&#160;&#160;&#160;&#160;&#160;multi<b>&nbsp;</b>Romberg<b>&nbsp;</b>integration&#160;<a href="rombergmul.htm" target="_top">Multi-dimensional&nbsp;Romberg&nbsp;Integration</a><br>
direction<br>
&#160;&#160;&#160;&#160;&#160;times<b>&nbsp;</b>Hessian&#160;<a href="hestimesdir.cpp.htm" target="_top">Hessian&nbsp;Times&nbsp;Direction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
directional<br>
&#160;&#160;&#160;&#160;&#160;derivative<b>&nbsp;</b>abs&#160;<a href="abs.htm#Directional Derivative" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&#160;Directional&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;derivative<b>&nbsp;</b>example&#160;<a href="abs.cpp.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
discrete&#160;<a href="discrete.cpp.htm" target="_top">Discrete&nbsp;AD&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
disk<br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="faq.htm#Tape Storage: Disk or Memory" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</a><br>
divide<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="div.htm" target="_top">AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="diveq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="div.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
driver<br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>derivative&#160;<a href="revone.htm" target="_top">First&nbsp;Order&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>partial&#160;<a href="revtwo.htm" target="_top">Reverse&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>partial&#160;<a href="fortwo.htm" target="_top">Forward&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>partial&#160;<a href="forone.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;first<b>&nbsp;</b>order<b>&nbsp;</b>derivative&#160;<a href="revone.htm" target="_top">First&nbsp;Order&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;first<b>&nbsp;</b>order<b>&nbsp;</b>partial&#160;<a href="forone.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.htm" target="_top">Hessian:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>order<b>&nbsp;</b>partial&#160;<a href="revtwo.htm" target="_top">Reverse&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>order<b>&nbsp;</b>partial&#160;<a href="fortwo.htm" target="_top">Forward&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>

<b><big><a name="E">E</a></big></b>
<br>
ErrorHandler&#160;<a href="faq.htm#Exceptions" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Exceptions</a><br>
ExpApx&#160;<a href="expapx.htm" target="_top">An&nbsp;Example&nbsp;Exponential&nbsp;Approximation</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>sweep&#160;<a href="expapxfor.htm" target="_top">An&nbsp;Example&nbsp;Forward&nbsp;Mode&nbsp;Sweep</a><br>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="expapx.cpp.htm" target="_top">ExpApx:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;operation<b>&nbsp;</b>sequence&#160;<a href="expapxseq.htm" target="_top">An&nbsp;Example&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>sweep&#160;<a href="expapxrev.htm" target="_top">An&nbsp;Example&nbsp;Reverse&nbsp;Mode&nbsp;Sweep</a><br>
easy<br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.htm" target="_top">First&nbsp;Order&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="revtwo.htm" target="_top">Reverse&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="fortwo.htm" target="_top">Forward&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
efficient<br>
&#160;&#160;&#160;&#160;&#160;sparsity&#160;<a href="glossary.htm#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&nbsp;Pattern</a><br>
elementary&#160;<a href="glossary.htm#Elementary Vector" target="_top">Glossary:&#160;Elementary&nbsp;Vector</a><br>
empty&#160;<a href="glossary.htm#Tape State.Empty" target="_top">Glossary:&#160;Tape&nbsp;State.Empty</a><br>
equal<br>
&#160;&#160;&#160;&#160;&#160;near&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
equation&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="odegear.htm" target="_top">An&nbsp;Arbitrary&nbsp;Order&nbsp;Gear&nbsp;Method</a><br>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="luratio.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix&nbsp;and&nbsp;Stability&nbsp;Calculation</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>invert&#160;<a href="luinvert.htm" target="_top">Invert&nbsp;an&nbsp;LU&nbsp;Factored&nbsp;Equation</a><br>
&#160;&#160;&#160;&#160;&#160;linear&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;linear&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;ODE<b>&nbsp;</b>error<b>&nbsp;</b>control&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;Ode<b>&nbsp;</b>Gear<b>&nbsp;</b>control&#160;<a href="odegearcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;Gear's&nbsp;Ode&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;solve<b>&nbsp;</b>linear&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
erf<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="erf.cpp.htm" target="_top">The&nbsp;AD&nbsp;erf&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>function&#160;<a href="erf.htm" target="_top">The&nbsp;AD&nbsp;Error&nbsp;Function</a><br>
error<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>function&#160;<a href="erf.htm" target="_top">The&nbsp;AD&nbsp;Error&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;control<b>&nbsp;</b>ODE&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;Gear<b>&nbsp;</b>Ode&#160;<a href="odegearcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;Gear's&nbsp;Ode&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;handler&#160;<a href="errorhandler.cpp.htm" target="_top">Replacing&nbsp;The&nbsp;CppAD&nbsp;Error&nbsp;Handler:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;handler&#160;<a href="errorhandler.htm" target="_top">Replacing&nbsp;the&nbsp;CppAD&nbsp;Error&nbsp;Handler</a><br>
evaluate<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funeval.htm" target="_top">Evaluate&nbsp;ADFun&nbsp;Functions,&nbsp;Derivatives,&nbsp;and&nbsp;Sparsity&nbsp;Patterns</a><br>
example&#160;<a href="example.htm" target="_top">Examples</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>acos&#160;<a href="acos.cpp.htm" target="_top">The&nbsp;AD&nbsp;acos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>add&#160;<a href="add.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>asin&#160;<a href="asin.cpp.htm" target="_top">The&nbsp;AD&nbsp;asin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment&#160;<a href="eq.cpp.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>atan&#160;<a href="atan.cpp.htm" target="_top">The&nbsp;AD&nbsp;atan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>atan2&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;AD&nbsp;atan2&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>bool&#160;<a href="boolfun.cpp.htm" target="_top">AD&nbsp;Boolean&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>compare&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>add&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>divide&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>multiply&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>subtract&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>cos&#160;<a href="cos.cpp.htm" target="_top">The&nbsp;AD&nbsp;cos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>cosh&#160;<a href="cosh.cpp.htm" target="_top">The&nbsp;AD&nbsp;cosh&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>divide&#160;<a href="div.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>erf&#160;<a href="erf.cpp.htm" target="_top">The&nbsp;AD&nbsp;erf&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>exp&#160;<a href="exp.cpp.htm" target="_top">The&nbsp;AD&nbsp;exp&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>log&#160;<a href="log.cpp.htm" target="_top">The&nbsp;AD&nbsp;log&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>log10&#160;<a href="log10.cpp.htm" target="_top">The&nbsp;AD&nbsp;log10&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>multiply&#160;<a href="mul.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>output&#160;<a href="output.cpp.htm" target="_top">AD&nbsp;Output&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>pow&#160;<a href="pow.cpp.htm" target="_top">The&nbsp;AD&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sin&#160;<a href="sin.cpp.htm" target="_top">The&nbsp;AD&nbsp;sin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sinh&#160;<a href="sinh.cpp.htm" target="_top">The&nbsp;AD&nbsp;sinh&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sqrt&#160;<a href="sqrt.cpp.htm" target="_top">The&nbsp;AD&nbsp;sqrt&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>tan&#160;<a href="tan.cpp.htm" target="_top">The&nbsp;AD&nbsp;tan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;abs&#160;<a href="abs.cpp.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;algorithm&#160;<a href="expapx.htm" target="_top">An&nbsp;Example&nbsp;Exponential&nbsp;Approximation</a><br>
&#160;&#160;&#160;&#160;&#160;BenderQuad&#160;<a href="benderquad.cpp.htm" target="_top">BenderQuad:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CondExp&#160;<a href="condexp.cpp.htm" target="_top">Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vectorBool&#160;<a href="vectorbool.cpp.htm" target="_top">CppAD::vectorBool&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>NumericType&#160;<a href="checknumerictype.cpp.htm" target="_top">The&nbsp;CheckNumericType&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>SimpleVector&#160;<a href="checksimplevector.cpp.htm" target="_top">The&nbsp;CheckSimpleVector&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex<b>&nbsp;</b>polynomial&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>from<b>&nbsp;</b>base&#160;<a href="copybase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;copy<b>&nbsp;</b>AD<b>&nbsp;</b>object&#160;<a href="copyad.cpp.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Dependent&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Domain&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;default<b>&nbsp;</b>AD<b>&nbsp;</b>construct&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;delete&#160;<a href="tracknewdel.cpp.htm" target="_top">Tracking&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Derivative&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbylu.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbyminor.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detofminor.cpp.htm" target="_top">Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;discrete&#160;<a href="discrete.cpp.htm" target="_top">Discrete&nbsp;AD&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>handler&#160;<a href="errorhandler.cpp.htm" target="_top">Replacing&nbsp;The&nbsp;CppAD&nbsp;Error&nbsp;Handler:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="forward.cpp.htm" target="_top">Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;FunCheck&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>sweep&#160;<a href="expapxfor.htm" target="_top">An&nbsp;Example&nbsp;Forward&nbsp;Mode&nbsp;Sweep</a><br>
&#160;&#160;&#160;&#160;&#160;general&#160;<a href="general.htm" target="_top">General&nbsp;Examples</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.cpp.htm" target="_top">Hessian:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Independent&#160;<a href="independent.cpp.htm" target="_top">Independent&nbsp;and&nbsp;ADFun&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Integer&#160;<a href="integer.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;Integer:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.cpp.htm" target="_top">Jacobian:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LU&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>record<b>&nbsp;</b>pivot&#160;<a href="luvecadok.cpp.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;With&nbsp;Recorded&nbsp;Pivoting:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.cpp.htm" target="_top">LuFactor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.cpp.htm" target="_top">LuInvert:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuRatio&#160;<a href="luratio.cpp.htm" target="_top">LuRatio:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="near_equal.cpp.htm" target="_top">NearEqual&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqualExt&#160;<a href="nearequalext.cpp.htm" target="_top">Compare&nbsp;AD&nbsp;with&nbsp;Base&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NumericType&#160;<a href="numerictype.cpp.htm" target="_top">The&nbsp;NumericType:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;new&#160;<a href="tracknewdel.cpp.htm" target="_top">Tracking&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;Using&nbsp;Maxabs&nbsp;Argument</a><br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeGear&#160;<a href="odegear.cpp.htm" target="_top">OdeGear:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeGearControl&#160;<a href="odegearcontrol.cpp.htm" target="_top">OdeGearControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;operation<b>&nbsp;</b>sequence&#160;<a href="expapxseq.htm" target="_top">An&nbsp;Example&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="parvar.cpp.htm" target="_top">AD&nbsp;Parameter&nbsp;and&nbsp;Variable&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="poly.cpp.htm" target="_top">Polynomial&nbsp;Evaluation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pow<b>&nbsp;</b>int&#160;<a href="powint.cpp.htm" target="_top">The&nbsp;Integer&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;print<b>&nbsp;</b>forward<b>&nbsp;</b>mode&#160;<a href="printfor.cpp.htm" target="_top">Printing&nbsp;During&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Range&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Reverse&#160;<a href="reverseany.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;(any&nbsp;Order):&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Reverse&#160;<a href="reverseone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergmul.cpp.htm" target="_top">One&nbsp;Dimensional&nbsp;Romberg&nbsp;Integration:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergone.cpp.htm" target="_top">One&nbsp;Dimensional&nbsp;Romberg&nbsp;Integration:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Rosen34&#160;<a href="rosen34.cpp.htm" target="_top">Rosen34:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge45.cpp.htm" target="_top">Runge45:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;re<b>-</b>tape&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>sweep&#160;<a href="expapxrev.htm" target="_top">An&nbsp;Example&nbsp;Reverse&nbsp;Mode&nbsp;Sweep</a><br>
&#160;&#160;&#160;&#160;&#160;run<b>&nbsp;</b>all&#160;<a href="example.cpp.htm" target="_top">Program&nbsp;That&nbsp;Runs&nbsp;all&nbsp;the&nbsp;CppAD&nbsp;Example</a><br>
&#160;&#160;&#160;&#160;&#160;run<b>&nbsp;</b>all&#160;<a href="introduction.cpp.htm" target="_top">Run&nbsp;the&nbsp;CppAD&nbsp;Introduction&nbsp;Routines</a><br>
&#160;&#160;&#160;&#160;&#160;SpeedTest&#160;<a href="speedexample.cpp.htm" target="_top">Example&nbsp;Use&nbsp;of&nbsp;SpeedTest</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="revtwo.cpp.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="fortwo.cpp.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="getstarted.cpp.htm" target="_top">Getting&nbsp;Started&nbsp;Using&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>var&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>forward&#160;<a href="forsparsejac.cpp.htm" target="_top">Forward&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>Hessian&#160;<a href="revsparsehes.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Hessian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>reverse&#160;<a href="revsparsejac.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;stiff<b>&nbsp;</b>ode&#160;<a href="odestiff.cpp.htm" target="_top">A&nbsp;Stiff&nbsp;Ode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;subtract&#160;<a href="sub.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unary<b>&nbsp;</b>minus&#160;<a href="unaryminus.cpp.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unary<b>&nbsp;</b>plus&#160;<a href="unaryplus.cpp.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-Example" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-Example</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>SpeedTest&#160;<a href="installunix.htm#--with-SpeedExample" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-SpeedExample</a><br>
&#160;&#160;&#160;&#160;&#160;Value&#160;<a href="value.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Variable&#160;<a href="parvar.cpp.htm" target="_top">AD&nbsp;Parameter&nbsp;and&nbsp;Variable&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;VecAD&#160;<a href="vecad.cpp.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
exception<br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>handler&#160;<a href="errorhandler.htm" target="_top">Replacing&nbsp;the&nbsp;CppAD&nbsp;Error&nbsp;Handler</a><br>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="faq.htm#Exceptions" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Exceptions</a><br>
exercise<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.htm#Exercise" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Exercise</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="nearequal.htm#Exercise" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal:&#160;Exercise</a><br>
&#160;&#160;&#160;&#160;&#160;numeric<b>&nbsp;</b>type&#160;<a href="numerictype.htm#Exercise" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Exercise</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.htm#Exercise" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Exercise</a><br>
exp<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="exp.cpp.htm" target="_top">The&nbsp;AD&nbsp;exp&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="expapx.htm" target="_top">An&nbsp;Example&nbsp;Exponential&nbsp;Approximation</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="expforward.htm" target="_top">Exponential&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="expreverse.htm" target="_top">Exponential&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
expansion&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
exponent<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>function&#160;<a href="pow.htm" target="_top">The&nbsp;AD&nbsp;Power&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;integer&#160;<a href="powint.htm" target="_top">The&nbsp;Integer&nbsp;Power&nbsp;Function</a><br>
expression<br>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="condexp.htm" target="_top">AD&nbsp;Conditional&nbsp;Expressions</a><br>

<b><big><a name="F">F</a></big></b>
<br>
FAQ&#160;<a href="faq.htm" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers</a><br>
Fadbad&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Fadbad&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="fadbad.htm" target="_top">Routines&nbsp;for&nbsp;Comparing&nbsp;CppAD&nbsp;with&nbsp;Fadbad</a><br>
&#160;&#160;&#160;&#160;&#160;compare<b>&nbsp;</b>results&#160;<a href="examplefadbad.cpp.htm" target="_top">Compare&nbsp;Fadbad&nbsp;and&nbsp;CppAD&nbsp;Results</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detlufadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detminorfadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="detlufadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Minor<b>&nbsp;</b>expand&#160;<a href="detminorfadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detlufadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="detminorfadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#FadbadDir" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;FadbadDir</a><br>
ForSparseJac&#160;<a href="forsparsejac.cpp.htm" target="_top">Forward&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="forsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Forward&nbsp;Mode</a><br>
Forward&#160;<a href="forward.cpp.htm" target="_top">Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;capacity&#160;<a href="capacity_taylor.htm" target="_top">Controlling&nbsp;Taylor&nbsp;Coefficients&nbsp;Memory&nbsp;Allocation</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>one&#160;<a href="forwardone.htm" target="_top">First&nbsp;Order&nbsp;Forward&nbsp;Mode:&nbsp;Derivative&nbsp;Values</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>zero&#160;<a href="forwardzero.htm" target="_top">Zero&nbsp;Order&nbsp;Forward&nbsp;Mode:&nbsp;Function&nbsp;Values</a><br>
FunCheck&#160;<a href="funcheck.htm" target="_top">Check&nbsp;an&nbsp;ADFun&nbsp;Sequence&nbsp;of&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
factor<br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>complex&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>determinant&#160;<a href="detbylu.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;matrix&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
features<br>
&#160;&#160;&#160;&#160;&#160;new&#160;<a href="wishlist.htm" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List</a><br>
first<br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>derivative<b>&nbsp;</b>driver&#160;<a href="revone.htm" target="_top">First&nbsp;Order&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>partial<b>&nbsp;</b>driver&#160;<a href="forone.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
flags<br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>compile&#160;<a href="installunix.htm#CppErrorsAndWarnings" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;CppErrorsAndWarnings</a><br>
forward&#160;<a href="faq.htm#Mode: Forward or Reverse" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Mode:&nbsp;Forward&nbsp;or&nbsp;Reverse</a><br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>theory&#160;<a href="acosforward.htm" target="_top">Arccosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>theory&#160;<a href="asinforward.htm" target="_top">Arcsine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>theory&#160;<a href="atanforward.htm" target="_top">Arctangent&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>driver&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>theory&#160;<a href="expforward.htm" target="_top">Exponential&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>theory&#160;<a href="logforward.htm" target="_top">Logarithm&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;mode&#160;<a href="forwardany.htm" target="_top">Any&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;mode<b>&nbsp;</b>print&#160;<a href="printfor.cpp.htm" target="_top">Printing&nbsp;During&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;mode<b>&nbsp;</b>print&#160;<a href="printfor.htm" target="_top">Printing&nbsp;AD&nbsp;Values&nbsp;During&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;print&#160;<a href="installunix.htm#--with-PrintFor" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-PrintFor</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>Jacobian&#160;<a href="forsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>theory&#160;<a href="sqrtforward.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sweep&#160;<a href="expapxfor.htm" target="_top">An&nbsp;Example&nbsp;Forward&nbsp;Mode&nbsp;Sweep</a><br>
&#160;&#160;&#160;&#160;&#160;zero<b>&nbsp;</b>order&#160;<a href="comparechange.htm" target="_top">Comparison&nbsp;Changes&nbsp;During&nbsp;Zero&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
free<br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>install&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
function&#160;<a href="glossary.htm#Base Function" target="_top">Glossary:&#160;Base&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#AD Function" target="_top">Glossary:&#160;AD&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>Bool<b>&nbsp;</b>valued&#160;<a href="boolvalued.htm" target="_top">Bool&nbsp;Valued&nbsp;Operations&nbsp;and&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>bool&#160;<a href="boolfun.htm" target="_top">AD&nbsp;Boolean&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>error&#160;<a href="erf.htm" target="_top">The&nbsp;AD&nbsp;Error&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>valued&#160;<a href="advalued.htm" target="_top">AD&nbsp;Valued&nbsp;Operations&nbsp;and&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;math&#160;<a href="faq.htm#Math Functions" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Math&nbsp;Functions</a><br>

<b><big><a name="G">G</a></big></b>
<br>
Gear<br>
&#160;&#160;&#160;&#160;&#160;Ode&#160;<a href="odegear.htm" target="_top">An&nbsp;Arbitrary&nbsp;Order&nbsp;Gear&nbsp;Method</a><br>
GetStarted<br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-GetStarted" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-GetStarted</a><br>
gcc<b>&nbsp;</b>3<b>.</b>4<b>.</b>4<br>
&#160;&#160;&#160;&#160;&#160;bug&#160;<a href="bugs.htm#gcc 3.4.4 -O2" target="_top">Know&nbsp;Bugs&nbsp;and&nbsp;Problems&nbsp;Using&nbsp;CppAD:&#160;gcc&nbsp;3.4.4&nbsp;-O2</a><br>
general<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="general.htm" target="_top">General&nbsp;Examples</a><br>
getstarted&#160;<a href="getstarted.cpp.htm" target="_top">Getting&nbsp;Started&nbsp;Using&nbsp;CppAD</a><br>
gradient&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="H">H</a></big></b>
<br>
Hessian&#160;<a href="hessian.cpp.htm" target="_top">Hessian:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Bender&#160;<a href="benderquad.htm" target="_top">Computing&nbsp;Jacobian&nbsp;and&nbsp;Hessian&nbsp;of&nbsp;Bender's&nbsp;Reduced&nbsp;Objective</a><br>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="hessian.htm" target="_top">Hessian:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;times<b>&nbsp;</b>direction&#160;<a href="hestimesdir.cpp.htm" target="_top">Hessian&nbsp;Times&nbsp;Direction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
handler<br>
&#160;&#160;&#160;&#160;&#160;error&#160;<a href="errorhandler.cpp.htm" target="_top">Replacing&nbsp;The&nbsp;CppAD&nbsp;Error&nbsp;Handler:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;error&#160;<a href="errorhandler.htm" target="_top">Replacing&nbsp;the&nbsp;CppAD&nbsp;Error&nbsp;Handler</a><br>

<b><big><a name="I">I</a></big></b>
<br>
Independent&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="independent.cpp.htm" target="_top">Independent&nbsp;and&nbsp;ADFun&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Integer&#160;<a href="integer.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;Integer:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="integer.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;Integer</a><br>
Introduction<br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-Introduction" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-Introduction</a><br>
include<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>.</b>h&#160;<a href="cppad.htm#Include File" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Include&nbsp;File</a><br>
independent&#160;<a href="glossary.htm#Operation.Independent" target="_top">Glossary:&#160;Operation.Independent</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#Independent Variable" target="_top">Glossary:&#160;Independent&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.htm#Assignment and Independent" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Assignment&nbsp;and&nbsp;Independent</a><br>
independent<b>&nbsp;</b>variable&#160;<a href="faq.htm#Independent Variables" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Independent&nbsp;Variables</a><br>
index<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>record&#160;<a href="vecad.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations</a><br>
install&#160;<a href="install.htm" target="_top">Installing&nbsp;and&nbsp;Testing&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>CppAD&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
int<br>
&#160;&#160;&#160;&#160;&#160;numeric<b>&nbsp;</b>constructor&#160;<a href="numerictype.htm#Constructor From Integer" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type:&#160;Constructor&nbsp;From&nbsp;Integer</a><br>
integer<br>
&#160;&#160;&#160;&#160;&#160;pow&#160;<a href="powint.htm" target="_top">The&nbsp;Integer&nbsp;Power&nbsp;Function</a><br>
integrate<br>
&#160;&#160;&#160;&#160;&#160;multi<b>-</b>dimensional<b>&nbsp;</b>Romberg&#160;<a href="rombergmul.htm" target="_top">Multi-dimensional&nbsp;Romberg&nbsp;Integration</a><br>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergone.htm" target="_top">One&nbsp;DimensionalRomberg&nbsp;Integration</a><br>
interface<br>
&#160;&#160;&#160;&#160;&#160;to<b>&nbsp;</b>C&#160;<a href="interface2c.cpp.htm" target="_top">Interfacing&nbsp;to&nbsp;C:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
interpolate<br>
&#160;&#160;&#160;&#160;&#160;piecewise<b>&nbsp;</b>linear&#160;<a href="piecewise.cpp.htm" target="_top">Piecewise&nbsp;Linear&nbsp;Interpolation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
introduction&#160;<a href="cppad.htm#Introduction" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Introduction</a><br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="introduction.htm" target="_top">An&nbsp;Introduction&nbsp;by&nbsp;Example&nbsp;to&nbsp;Algorithmic&nbsp;Differentiation</a><br>
&#160;&#160;&#160;&#160;&#160;ExpApx&#160;<a href="expapx.cpp.htm" target="_top">ExpApx:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
inverse<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>tan&#160;<a href="atan2.htm" target="_top">AD&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;matrix&#160;<a href="faq.htm#Matrix Inverse" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Matrix&nbsp;Inverse</a><br>

<b><big><a name="J">J</a></big></b>
<br>
Jacobian&#160;<a href="jacobian.cpp.htm" target="_top">Jacobian:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Bender&#160;<a href="benderquad.htm" target="_top">Computing&nbsp;Jacobian&nbsp;and&nbsp;Hessian&nbsp;of&nbsp;Bender's&nbsp;Reduced&nbsp;Objective</a><br>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="jacobian.htm" target="_top">Jacobian:&nbsp;Driver&nbsp;Routine</a><br>

<b><big><a name="K">K</a></big></b>
<br>
Kutta<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>

<b><big><a name="L">L</a></big></b>
<br>
LU&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Lu&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>speed&#160;<a href="detluspeed.cpp.htm" target="_top">Determinant&nbsp;by&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
&#160;&#160;&#160;&#160;&#160;record<b>&nbsp;</b>pivot&#160;<a href="luvecadok.cpp.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;With&nbsp;Recorded&nbsp;Pivoting:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="lusolvespeed.cpp.htm" target="_top">Speed&nbsp;Test&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Lu<b>&nbsp;</b>factor<br>
&#160;&#160;&#160;&#160;&#160;Adolc&#160;<a href="detluadolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="detbylu.h.htm" target="_top">Determinant&nbsp;using&nbsp;Lu&nbsp;Factorization:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="detbylu.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Fadbad&#160;<a href="detlufadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
LuFactor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="lufactor.h.htm" target="_top">LuFactor&nbsp;Source&nbsp;Code</a><br>
LuInvert&#160;<a href="luinvert.htm" target="_top">Invert&nbsp;an&nbsp;LU&nbsp;Factored&nbsp;Equation</a><br>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="luinvert.h.htm" target="_top">LuInvert&nbsp;Source&nbsp;Code</a><br>
LuRatio&#160;<a href="luratio.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix&nbsp;and&nbsp;Stability&nbsp;Calculation</a><br>
LuSolve&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;source<b>&nbsp;</b>code&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
LuVecAD&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
library<br>
&#160;&#160;&#160;&#160;&#160;numerical<b>&nbsp;</b>C<b>++&nbsp;</b>template&#160;<a href="library.htm" target="_top">The&nbsp;CppAD&nbsp;General&nbsp;Purpose&nbsp;Library</a><br>
linear<br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;equation<b>&nbsp;</b>source<b>&nbsp;</b>code&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;invert<b>&nbsp;</b>Lu<b>&nbsp;</b>equation&#160;<a href="luinvert.htm" target="_top">Invert&nbsp;an&nbsp;LU&nbsp;Factored&nbsp;Equation</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor<b>&nbsp;</b>equation&#160;<a href="luratio.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix&nbsp;and&nbsp;Stability&nbsp;Calculation</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor<b>&nbsp;</b>equation&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;piecewise<b>&nbsp;</b>interpolate&#160;<a href="piecewise.cpp.htm" target="_top">Piecewise&nbsp;Linear&nbsp;Interpolation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;solve<b>&nbsp;</b>equation&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
log<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="log.cpp.htm" target="_top">The&nbsp;AD&nbsp;log&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="logforward.htm" target="_top">Logarithm&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="logreverse.htm" target="_top">Logarithm&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
log10<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="log10.cpp.htm" target="_top">The&nbsp;AD&nbsp;log10&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="M">M</a></big></b>
<br>
Memory<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
Minor<br>
&#160;&#160;&#160;&#160;&#160;Fadbad<b>&nbsp;</b>expand&#160;<a href="detminorfadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
Minors<br>
&#160;&#160;&#160;&#160;&#160;Adolc<b>&nbsp;</b>expand&#160;<a href="detminoradolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
math<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>other&#160;<a href="mathother.htm" target="_top">Other&nbsp;AD&nbsp;Math&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>unary&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;functions&#160;<a href="faq.htm#Math Functions" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Math&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;standard<b>&nbsp;</b>function&#160;<a href="faq.htm#Namespace.Using" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.Using</a><br>
matrix&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;factor&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;factor<b>&nbsp;</b>source&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="faq.htm#Matrix Inverse" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Matrix&nbsp;Inverse</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor<b>&nbsp;</b>source&#160;<a href="lufactor.h.htm" target="_top">LuFactor&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert<b>&nbsp;</b>source&#160;<a href="luinvert.h.htm" target="_top">LuInvert&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="ludetandsolve.htm" target="_top">Compute&nbsp;Determinants&nbsp;and&nbsp;Solve&nbsp;Equations&nbsp;by&nbsp;LU&nbsp;Factorization</a><br>
maxabs<br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;Using&nbsp;Maxabs&nbsp;Argument</a><br>
memory<br>
&#160;&#160;&#160;&#160;&#160;control&#160;<a href="capacity_taylor.htm" target="_top">Controlling&nbsp;Taylor&nbsp;Coefficients&nbsp;Memory&nbsp;Allocation</a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="faq.htm#Tape Storage: Disk or Memory" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</a><br>
&#160;&#160;&#160;&#160;&#160;track&#160;<a href="tracknewdel.htm" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete</a><br>
minor&#160;<a href="detbyminor.h.htm" target="_top">Determinant&nbsp;using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.h.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="detofminor.htm" target="_top">Compute&nbsp;the&nbsp;Determinant&nbsp;of&nbsp;a&nbsp;Minor</a><br>
minors&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
minus<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="sub.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>unary<b>&nbsp;</b>operator&#160;<a href="unaryminus.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
mode&#160;<a href="faq.htm#Mode: Forward or Reverse" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Mode:&nbsp;Forward&nbsp;or&nbsp;Reverse</a><br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="forwardany.htm" target="_top">Any&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="reverseany.htm" target="_top">Any&nbsp;Order&nbsp;Reverse&nbsp;Mode</a><br>
multi<br>
&#160;&#160;&#160;&#160;&#160;dimensional<b>&nbsp;</b>Romberg<b>&nbsp;</b>integration&#160;<a href="rombergmul.htm" target="_top">Multi-dimensional&nbsp;Romberg&nbsp;Integration</a><br>
multiple<br>
&#160;&#160;&#160;&#160;&#160;assignment&#160;<a href="eq.htm#Result.AD&lt;Base&gt;" target="_top">AD&nbsp;Assignment&nbsp;Operator:&#160;Result.AD&lt;Base&gt;</a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="wishlist.htm#Multiple Tapes With Same Base Type" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List:&#160;Multiple&nbsp;Tapes&nbsp;With&nbsp;Same&nbsp;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="multape.cpp.htm" target="_top">Multiple&nbsp;Tapes:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="multape.htm" target="_top">Using&nbsp;Multiple&nbsp;Tapes</a><br>
multiply<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="mul.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="muleq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="mul.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="N">N</a></big></b>
<br>
NDEBUG&#160;<a href="tracknewdel.htm#TrackNewVec" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&#160;TrackNewVec</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="simplevector.htm#Exercise" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Exercise</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.htm#Speed" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Speed</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.htm#CompareChange" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;CompareChange</a><br>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.htm#Restrictions" target="_top">Comparison&nbsp;Changes&nbsp;During&nbsp;Zero&nbsp;Order&nbsp;Forward&nbsp;Mode:&#160;Restrictions</a><br>
NearEqual&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>with<b>&nbsp;</b>Base&#160;<a href="nearequalext.htm" target="_top">Compare&nbsp;AD&nbsp;and&nbsp;Base&nbsp;Objects&nbsp;for&nbsp;Nearly&nbsp;Equal</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="near_equal.cpp.htm" target="_top">NearEqual&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
NearEqualExt<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="nearequalext.cpp.htm" target="_top">Compare&nbsp;AD&nbsp;with&nbsp;Base&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
NumericType<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="numerictype.cpp.htm" target="_top">The&nbsp;NumericType:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
namespace&#160;<a href="faq.htm#Namespace" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad.htm#Namespace" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Namespace</a><br>
new<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="tracknewdel.cpp.htm" target="_top">Tracking&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;features&#160;<a href="wishlist.htm" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List</a><br>
&#160;&#160;&#160;&#160;&#160;track&#160;<a href="tracknewdel.htm" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete</a><br>
numeric<br>
&#160;&#160;&#160;&#160;&#160;check&#160;<a href="checknumerictype.htm" target="_top">Check&nbsp;NumericType&nbsp;Class&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;type&#160;<a href="numerictype.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type</a><br>
numerical<br>
&#160;&#160;&#160;&#160;&#160;C<b>++&nbsp;</b>template<b>&nbsp;</b>library&#160;<a href="library.htm" target="_top">The&nbsp;CppAD&nbsp;General&nbsp;Purpose&nbsp;Library</a><br>

<b><big><a name="O">O</a></big></b>
<br>
ODE&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;control<b>&nbsp;</b>error&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;Rosenbrock&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Runge<b>-</b>Kutta&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Taylor&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Ode<br>
&#160;&#160;&#160;&#160;&#160;Gear&#160;<a href="odegear.htm" target="_top">An&nbsp;Arbitrary&nbsp;Order&nbsp;Gear&nbsp;Method</a><br>
OdeErrControl&#160;<a href="odeerrcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;ODE&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;Using&nbsp;Maxabs&nbsp;Argument</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;maxabs&#160;<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;Using&nbsp;Maxabs&nbsp;Argument</a><br>
OdeGear&#160;<a href="odegear.htm" target="_top">An&nbsp;Arbitrary&nbsp;Order&nbsp;Gear&nbsp;Method</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odegear.cpp.htm" target="_top">OdeGear:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
OdeGearControl&#160;<a href="odegearcontrol.htm" target="_top">An&nbsp;Error&nbsp;Controller&nbsp;for&nbsp;Gear's&nbsp;Ode&nbsp;Solvers</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odegearcontrol.cpp.htm" target="_top">OdeGearControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Order<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
object<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun.htm" target="_top">ADFun&nbsp;Objects</a><br>
ode<br>
&#160;&#160;&#160;&#160;&#160;stiff&#160;<a href="odestiff.cpp.htm" target="_top">A&nbsp;Stiff&nbsp;Ode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
of&#160;<a href="glossary.htm#AD of Base" target="_top">Glossary:&#160;AD&nbsp;of&nbsp;Base</a><br>
one<br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>Forward&#160;<a href="forwardone.htm" target="_top">First&nbsp;Order&nbsp;Forward&nbsp;Mode:&nbsp;Derivative&nbsp;Values</a><br>
operation&#160;<a href="glossary.htm#Operation" target="_top">Glossary:&#160;Operation</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>Bool<b>&nbsp;</b>valued&#160;<a href="boolvalued.htm" target="_top">Bool&nbsp;Valued&nbsp;Operations&nbsp;and&nbsp;Functions&nbsp;with&nbsp;AD&nbsp;Arguments</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>valued&#160;<a href="advalued.htm" target="_top">AD&nbsp;Valued&nbsp;Operations&nbsp;and&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;sequence&#160;<a href="expapxseq.htm" target="_top">An&nbsp;Example&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;sequence<b>&nbsp;</b>store&#160;<a href="dependent.htm" target="_top">Stop&nbsp;Recording&nbsp;and&nbsp;Store&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;symbol&#160;<a href="expapxseq.htm#Symbols" target="_top">An&nbsp;Example&nbsp;Operation&nbsp;Sequence:&#160;Symbols</a><br>
operator<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>arithmetic&#160;<a href="arithmetic.htm" target="_top">AD&nbsp;Arithmetic&nbsp;Operators&nbsp;and&nbsp;Computed&nbsp;Assignments</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment&#160;<a href="eq.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>add&#160;<a href="add.htm" target="_top">AD&nbsp;Binary&nbsp;Addition&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>compare&#160;<a href="compare.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>divide&#160;<a href="div.htm" target="_top">AD&nbsp;Binary&nbsp;Division&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>multiply&#160;<a href="mul.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>subtract&#160;<a href="sub.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;assignment&#160;<a href="faq.htm#Assignment and Independent" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Assignment&nbsp;and&nbsp;Independent</a><br>
order<br>
&#160;&#160;&#160;&#160;&#160;one<b>&nbsp;</b>Forward&#160;<a href="forwardone.htm" target="_top">First&nbsp;Order&nbsp;Forward&nbsp;Mode:&nbsp;Derivative&nbsp;Values</a><br>
&#160;&#160;&#160;&#160;&#160;zero<b>&nbsp;</b>Forward&#160;<a href="forwardzero.htm" target="_top">Zero&nbsp;Order&nbsp;Forward&nbsp;Mode:&nbsp;Function&nbsp;Values</a><br>
ordinary&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
other<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>math&#160;<a href="mathother.htm" target="_top">Other&nbsp;AD&nbsp;Math&nbsp;Functions</a><br>
output<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="output.htm" target="_top">AD&nbsp;Output&nbsp;Stream&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="output.cpp.htm" target="_top">AD&nbsp;Output&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="P">P</a></big></b>
<br>
Parameter&#160;<a href="parvar.htm" target="_top">Is&nbsp;an&nbsp;AD&nbsp;Object&nbsp;a&nbsp;Parameter&nbsp;or&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="parvar.cpp.htm" target="_top">AD&nbsp;Parameter&nbsp;and&nbsp;Variable&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Poly&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
parameter&#160;<a href="glossary.htm#Parameter" target="_top">Glossary:&#160;Parameter</a><br>
partial<br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="revtwo.htm" target="_top">Reverse&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="fortwo.htm" target="_top">Forward&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="forone.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="forone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;first<b>&nbsp;</b>order<b>&nbsp;</b>driver&#160;<a href="forone.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Derivative:&nbsp;Driver&nbsp;Routine</a><br>
&#160;&#160;&#160;&#160;&#160;second&#160;<a href="revtwo.cpp.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second&#160;<a href="fortwo.cpp.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>order<b>&nbsp;</b>driver&#160;<a href="revtwo.htm" target="_top">Reverse&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>order<b>&nbsp;</b>driver&#160;<a href="fortwo.htm" target="_top">Forward&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
pattern&#160;<a href="glossary.htm#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&nbsp;Pattern</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>Jacobian&#160;<a href="forsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>Hessian&#160;<a href="revsparsehes.htm" target="_top">Hessian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>Jacobian&#160;<a href="revsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity&#160;<a href="glossary.htm#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&nbsp;Pattern</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity&#160;<a href="sparse.htm" target="_top">Calculating&nbsp;Sparsity&nbsp;Patterns</a><br>
piecewise<br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>interpolate&#160;<a href="piecewise.cpp.htm" target="_top">Piecewise&nbsp;Linear&nbsp;Interpolation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
plus<br>
&#160;&#160;&#160;&#160;&#160;<b>*=&nbsp;</b>example&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>+=&nbsp;</b>example&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>-=&nbsp;</b>example&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<b>/=&nbsp;</b>example&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="add.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>unary<b>&nbsp;</b>operator&#160;<a href="unaryplus.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator</a><br>
polynomial&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="poly.cpp.htm" target="_top">Polynomial&nbsp;Evaluation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
postfix<br>
&#160;&#160;&#160;&#160;&#160;configure&#160;<a href="installunix.htm#PrefixDir and PostfixDir" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;PrefixDir&nbsp;and&nbsp;PostfixDir</a><br>
pow<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="pow.htm" target="_top">The&nbsp;AD&nbsp;Power&nbsp;Function</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="pow.cpp.htm" target="_top">The&nbsp;AD&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;int&#160;<a href="powint.cpp.htm" target="_top">The&nbsp;Integer&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;integer&#160;<a href="powint.htm" target="_top">The&nbsp;Integer&nbsp;Power&nbsp;Function</a><br>
prefix<br>
&#160;&#160;&#160;&#160;&#160;configure&#160;<a href="installunix.htm#PrefixDir and PostfixDir" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;PrefixDir&nbsp;and&nbsp;PostfixDir</a><br>
preprocessor<br>
&#160;&#160;&#160;&#160;&#160;symbols&#160;<a href="faq.htm#Namespace.CppADvector Preprocessor Symbol" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.CppADvector&nbsp;Preprocessor&nbsp;Symbol</a><br>
print<br>
&#160;&#160;&#160;&#160;&#160;example<b>&nbsp;</b>forward<b>&nbsp;</b>mode&#160;<a href="printfor.cpp.htm" target="_top">Printing&nbsp;During&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>mode&#160;<a href="printfor.htm" target="_top">Printing&nbsp;AD&nbsp;Values&nbsp;During&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>mode&#160;<a href="installunix.htm#--with-PrintFor" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-PrintFor</a><br>
problem<br>
&#160;&#160;&#160;&#160;&#160;using<b>&nbsp;</b>CppAD&#160;<a href="bugs.htm" target="_top">Know&nbsp;Bugs&nbsp;and&nbsp;Problems&nbsp;Using&nbsp;CppAD</a><br>
profile<br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-profiling" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-profiling</a><br>
push<b>_</b>back<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>vector&#160;<a href="cppad_vector.htm#push_back" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;push_back</a><br>

<b><big><a name="Q">Q</a></big></b>
<br>
quotient<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="div.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>

<b><big><a name="R">R</a></big></b>
<br>
Range<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
Reverse&#160;<a href="reverseany.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;(any&nbsp;Order):&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="reverseone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
RevSparseHes&#160;<a href="revsparsehes.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Hessian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="revsparsehes.htm" target="_top">Hessian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
RevSparseJac&#160;<a href="revsparsejac.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="revsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
Romberg<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rombergmul.cpp.htm" target="_top">One&nbsp;Dimensional&nbsp;Romberg&nbsp;Integration:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rombergone.cpp.htm" target="_top">One&nbsp;Dimensional&nbsp;Romberg&nbsp;Integration:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Integrate&#160;<a href="rombergone.htm" target="_top">One&nbsp;DimensionalRomberg&nbsp;Integration</a><br>
&#160;&#160;&#160;&#160;&#160;multi<b>-</b>dimensional<b>&nbsp;</b>integrate&#160;<a href="rombergmul.htm" target="_top">Multi-dimensional&nbsp;Romberg&nbsp;Integration</a><br>
Rosen34&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rosen34.cpp.htm" target="_top">Rosen34:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
Rosenbrock<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
Runge<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
Runge45&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="runge45.cpp.htm" target="_top">Runge45:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
re<b>-</b>tape<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
realistic<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="general.htm" target="_top">General&nbsp;Examples</a><br>
record<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>index&#160;<a href="vecad.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;avoid&#160;<a href="faq.htm#Independent Variables" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Independent&nbsp;Variables</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="value.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
recording&#160;<a href="glossary.htm#Tape State.Recording" target="_top">Glossary:&#160;Tape&nbsp;State.Recording</a><br>
&#160;&#160;&#160;&#160;&#160;start&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;stop&#160;<a href="dependent.htm" target="_top">Stop&nbsp;Recording&nbsp;and&nbsp;Store&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;stop<b>&nbsp;</b>tape&#160;<a href="funconstruct.htm" target="_top">Construct&nbsp;an&nbsp;ADFun&nbsp;Object&nbsp;and&nbsp;Stop&nbsp;Recording</a><br>
reference<br>
&#160;&#160;&#160;&#160;&#160;VecAD<b>&lt;</b>Base<b>&gt;</b>&#160;<a href="vecad.htm#VecAD&lt;Base&gt;::reference" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations:&#160;VecAD&lt;Base&gt;::reference</a><br>
relative<br>
&#160;&#160;&#160;&#160;&#160;difference&#160;<a href="nearequal.htm" target="_top">Determine&nbsp;if&nbsp;Two&nbsp;Values&nbsp;Are&nbsp;Nearly&nbsp;Equal</a><br>
replace<br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>handler&#160;<a href="errorhandler.htm" target="_top">Replacing&nbsp;the&nbsp;CppAD&nbsp;Error&nbsp;Handler</a><br>
require<br>
&#160;&#160;&#160;&#160;&#160;Base&#160;<a href="cppad.htm#Base Type Requirements" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Base&nbsp;Type&nbsp;Requirements</a><br>
resize<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm#Resize" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Resize</a><br>
reverse&#160;<a href="faq.htm#Mode: Forward or Reverse" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Mode:&nbsp;Forward&nbsp;or&nbsp;Reverse</a><br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>theory&#160;<a href="acosreverse.htm" target="_top">Arccosine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>theory&#160;<a href="asinreverse.htm" target="_top">Arcsine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>theory&#160;<a href="atanreverse.htm" target="_top">Arctangent&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;easy<b>&nbsp;</b>driver&#160;<a href="drivers.htm" target="_top">First&nbsp;and&nbsp;Second&nbsp;Derivatives:&nbsp;Easy&nbsp;Drivers</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>theory&#160;<a href="expreverse.htm" target="_top">Exponential&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>theory&#160;<a href="logreverse.htm" target="_top">Logarithm&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;mode&#160;<a href="reverseany.htm" target="_top">Any&nbsp;Order&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sparse<b>&nbsp;</b>Hessian&#160;<a href="revsparsehes.htm" target="_top">Hessian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;sparse<b>&nbsp;</b>Jacobian&#160;<a href="revsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>theory&#160;<a href="sqrtreverse.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sweep&#160;<a href="expapxrev.htm" target="_top">An&nbsp;Example&nbsp;Reverse&nbsp;Mode&nbsp;Sweep</a><br>
run&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Fadbad&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Adolc&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>

<b><big><a name="S">S</a></big></b>
<br>
Size<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
SpeedTest&#160;<a href="speedtest.htm" target="_top">Run&nbsp;One&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="speedexample.cpp.htm" target="_top">Example&nbsp;Use&nbsp;of&nbsp;SpeedTest</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>example&#160;<a href="installunix.htm#--with-SpeedExample" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-SpeedExample</a><br>
second<br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="hessian.htm" target="_top">Hessian:&nbsp;Easy&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>partial<b>&nbsp;</b>driver&#160;<a href="revtwo.htm" target="_top">Reverse&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>partial<b>&nbsp;</b>driver&#160;<a href="fortwo.htm" target="_top">Forward&nbsp;Mode&nbsp;Second&nbsp;Partial&nbsp;Derivative&nbsp;Driver</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="revtwo.cpp.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="fortwo.cpp.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
sequence&#160;<a href="glossary.htm#Operation.Sequence" target="_top">Glossary:&#160;Operation.Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#AD Type Sequence" target="_top">Glossary:&#160;AD&nbsp;Type&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>Type&#160;<a href="glossary.htm#AD Type Sequence" target="_top">Glossary:&#160;AD&nbsp;Type&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;operation&#160;<a href="expapxseq.htm" target="_top">An&nbsp;Example&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;operation<b>&nbsp;</b>store&#160;<a href="dependent.htm" target="_top">Stop&nbsp;Recording&nbsp;and&nbsp;Store&nbsp;Operation&nbsp;Sequence</a><br>
simple<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="getstarted.cpp.htm" target="_top">Getting&nbsp;Started&nbsp;Using&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>check&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>example&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
sin<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="sin.cpp.htm" target="_top">The&nbsp;AD&nbsp;sin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
sinh<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="sinh.cpp.htm" target="_top">The&nbsp;AD&nbsp;sinh&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
size<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm#Size" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Size</a><br>
&#160;&#160;&#160;&#160;&#160;vector<b>&nbsp;</b>constructor&#160;<a href="simplevector.htm#Sizing Constructor" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Sizing&nbsp;Constructor</a><br>
size<b>_</b>var<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
solve<br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="luratio.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix&nbsp;and&nbsp;Stability&nbsp;Calculation</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>factor&#160;<a href="lufactor.htm" target="_top">LU&nbsp;Factorization&nbsp;of&nbsp;A&nbsp;Square&nbsp;Matrix</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="luvecad.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;with&nbsp;Recorded&nbsp;Pivoting</a><br>
&#160;&#160;&#160;&#160;&#160;linear<b>&nbsp;</b>equation&#160;<a href="lusolve.htm" target="_top">Compute&nbsp;Determinant&nbsp;and&nbsp;Solve&nbsp;Linear&nbsp;Equations</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.htm" target="_top">An&nbsp;Embedded&nbsp;4th&nbsp;and&nbsp;5th&nbsp;Order&nbsp;Runge-Kutta&nbsp;ODE&nbsp;Solver</a><br>
source<br>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.h.htm" target="_top">LuFactor&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.h.htm" target="_top">LuInvert&nbsp;Source&nbsp;Code</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.h.htm" target="_top">LuSolve&nbsp;Source&nbsp;Code</a><br>
sparse<br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>Hessian&#160;<a href="revsparsehes.htm" target="_top">Hessian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>Jacobian&#160;<a href="revsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Reverse&nbsp;Mode</a><br>
sparsity&#160;<a href="glossary.htm#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&nbsp;Pattern</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>example&#160;<a href="forsparsejac.cpp.htm" target="_top">Forward&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>Jacobian&#160;<a href="forsparsejac.htm" target="_top">Jacobian&nbsp;Sparsity&nbsp;Pattern:&nbsp;Forward&nbsp;Mode</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="revsparsehes.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Hessian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pattern&#160;<a href="glossary.htm#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&nbsp;Pattern</a><br>
&#160;&#160;&#160;&#160;&#160;pattern&#160;<a href="sparse.htm" target="_top">Calculating&nbsp;Sparsity&nbsp;Patterns</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>example&#160;<a href="revsparsejac.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
speed&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Fadbad&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Adolc&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="speed.htm" target="_top">Routines&nbsp;That&nbsp;Speed&nbsp;Test&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.htm#Speed" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Speed</a><br>
&#160;&#160;&#160;&#160;&#160;Adolc&#160;<a href="detluadolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Adolc&#160;<a href="detminoradolc.cpp.htm" target="_top">Adolc&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;avoid<b>&nbsp;</b>taping&#160;<a href="faq.htm#Independent Variables" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Independent&nbsp;Variables</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detminorspeed.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Fadbad&#160;<a href="detlufadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Lu&nbsp;Factorization</a><br>
&#160;&#160;&#160;&#160;&#160;Fadbad&#160;<a href="detminorfadbad.cpp.htm" target="_top">Fadbad&nbsp;&amp;&nbsp;CppAD&nbsp;Gradient&nbsp;of&nbsp;Determinant&nbsp;by&nbsp;Minors</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="lusolvespeed.cpp.htm" target="_top">Speed&nbsp;Test&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>determinant&#160;<a href="detluspeed.cpp.htm" target="_top">Determinant&nbsp;by&nbsp;Lu&nbsp;Factor&nbsp;and&nbsp;Solve:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>test&#160;<a href="installunix.htm#--with-Speed" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-Speed</a><br>
sqrt<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="sqrt.cpp.htm" target="_top">The&nbsp;AD&nbsp;sqrt&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;forward<b>&nbsp;</b>theory&#160;<a href="sqrtforward.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;reverse<b>&nbsp;</b>theory&#160;<a href="sqrtreverse.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
standard<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>math<b>&nbsp;</b>unary&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;math<b>&nbsp;</b>function&#160;<a href="faq.htm#Namespace.Using" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.Using</a><br>
start<br>
&#160;&#160;&#160;&#160;&#160;recording&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;using<b>&nbsp;</b>CppAD&#160;<a href="getstarted.cpp.htm" target="_top">Getting&nbsp;Started&nbsp;Using&nbsp;CppAD</a><br>
state&#160;<a href="glossary.htm#Tape State" target="_top">Glossary:&#160;Tape&nbsp;State</a><br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="independent.htm#Tape State" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording:&#160;Tape&nbsp;State</a><br>
std<b>::</b>vector<br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-stdvector" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-stdvector</a><br>
stiff<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.htm" target="_top">A&nbsp;3rd&nbsp;and&nbsp;4th&nbsp;Order&nbsp;Rosenbrock&nbsp;ODE&nbsp;Solver</a><br>
&#160;&#160;&#160;&#160;&#160;Ode&#160;<a href="odegear.htm" target="_top">An&nbsp;Arbitrary&nbsp;Order&nbsp;Gear&nbsp;Method</a><br>
&#160;&#160;&#160;&#160;&#160;ode&#160;<a href="odestiff.cpp.htm" target="_top">A&nbsp;Stiff&nbsp;Ode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
storage<br>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="faq.htm#Tape Storage: Disk or Memory" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</a><br>
stream<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>output&#160;<a href="output.htm" target="_top">AD&nbsp;Output&nbsp;Stream&nbsp;Operator</a><br>
subtract<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>binary<b>&nbsp;</b>operator&#160;<a href="sub.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment&#160;<a href="subeq.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="sub.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
sweep<br>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="expapxfor.htm" target="_top">An&nbsp;Example&nbsp;Forward&nbsp;Mode&nbsp;Sweep</a><br>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="expapxrev.htm" target="_top">An&nbsp;Example&nbsp;Reverse&nbsp;Mode&nbsp;Sweep</a><br>
symbol<br>
&#160;&#160;&#160;&#160;&#160;operation&#160;<a href="expapxseq.htm#Symbols" target="_top">An&nbsp;Example&nbsp;Operation&nbsp;Sequence:&#160;Symbols</a><br>
symbols<br>
&#160;&#160;&#160;&#160;&#160;preprocessor&#160;<a href="faq.htm#Namespace.CppADvector Preprocessor Symbol" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.CppADvector&nbsp;Preprocessor&nbsp;Symbol</a><br>

<b><big><a name="T">T</a></big></b>
<br>
Taylor<br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
TrackCount&#160;<a href="tracknewdel.htm#TrackCount" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&#160;TrackCount</a><br>
TrackDelVec&#160;<a href="tracknewdel.htm#TrackDelVec" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&#160;TrackDelVec</a><br>
TrackExtend&#160;<a href="tracknewdel.htm#TrackExtend" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&#160;TrackExtend</a><br>
TrackNewVec&#160;<a href="tracknewdel.htm#TrackNewVec" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&#160;TrackNewVec</a><br>
tan<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="tan.cpp.htm" target="_top">The&nbsp;AD&nbsp;tan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>inverse&#160;<a href="atan2.htm" target="_top">AD&nbsp;Two&nbsp;Argument&nbsp;Inverse&nbsp;Tangent&nbsp;Function</a><br>
tape&#160;<a href="glossary.htm#Tape State" target="_top">Glossary:&#160;Tape&nbsp;State</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>index&#160;<a href="vecad.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;avoid&#160;<a href="faq.htm#Independent Variables" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Independent&nbsp;Variables</a><br>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="wishlist.htm#Multiple Tapes With Same Base Type" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List:&#160;Multiple&nbsp;Tapes&nbsp;With&nbsp;Same&nbsp;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="multape.cpp.htm" target="_top">Multiple&nbsp;Tapes:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="multape.htm" target="_top">Using&nbsp;Multiple&nbsp;Tapes</a><br>
&#160;&#160;&#160;&#160;&#160;state&#160;<a href="independent.htm#Tape State" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording:&#160;Tape&nbsp;State</a><br>
&#160;&#160;&#160;&#160;&#160;stop<b>&nbsp;</b>recording&#160;<a href="dependent.htm" target="_top">Stop&nbsp;Recording&nbsp;and&nbsp;Store&nbsp;Operation&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;stop<b>&nbsp;</b>recording&#160;<a href="funconstruct.htm" target="_top">Construct&nbsp;an&nbsp;ADFun&nbsp;Object&nbsp;and&nbsp;Stop&nbsp;Recording</a><br>
&#160;&#160;&#160;&#160;&#160;storage&#160;<a href="faq.htm#Tape Storage: Disk or Memory" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Tape&nbsp;Storage:&nbsp;Disk&nbsp;or&nbsp;Memory</a><br>
taylor&#160;<a href="glossary.htm#Taylor Coefficient" target="_top">Glossary:&#160;Taylor&nbsp;Coefficient</a><br>
taylor<b>_</b>size<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.htm" target="_top">ADFun&nbsp;Object&nbsp;Deprecated&nbsp;Member&nbsp;Functions</a><br>
template<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>vector<b>&nbsp;</b>class&#160;<a href="cppad_vector.htm" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class</a><br>
&#160;&#160;&#160;&#160;&#160;numerical<b>&nbsp;</b>C<b>++&nbsp;</b>library&#160;<a href="library.htm" target="_top">The&nbsp;CppAD&nbsp;General&nbsp;Purpose&nbsp;Library</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&nbsp;</b>derivative&#160;<a href="poly.htm" target="_top">Evaluate&nbsp;a&nbsp;Polynomial&nbsp;or&nbsp;its&nbsp;Derivative</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector<b>&nbsp;</b>class&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
test&#160;<a href="speedfadbad.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Fadbad&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="speedadolc.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Adolc&nbsp;Speed&nbsp;Comparison&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="odespeed.cpp.htm" target="_top">ODE&nbsp;Solver:&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="speed.cpp.htm" target="_top">Run&nbsp;All&nbsp;The&nbsp;Speed&nbsp;Tests</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="speed.htm" target="_top">Routines&nbsp;That&nbsp;Speed&nbsp;Test&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="install.htm" target="_top">Installing&nbsp;and&nbsp;Testing&nbsp;CppAD</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>acos&#160;<a href="acos.cpp.htm" target="_top">The&nbsp;AD&nbsp;acos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>add&#160;<a href="add.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>asin&#160;<a href="asin.cpp.htm" target="_top">The&nbsp;AD&nbsp;asin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>assignment&#160;<a href="eq.cpp.htm" target="_top">AD&nbsp;Assignment&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>atan&#160;<a href="atan.cpp.htm" target="_top">The&nbsp;AD&nbsp;atan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>atan2&#160;<a href="atan2.cpp.htm" target="_top">The&nbsp;AD&nbsp;atan2&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>bool&#160;<a href="boolfun.cpp.htm" target="_top">AD&nbsp;Boolean&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>compare&#160;<a href="compare.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>add&#160;<a href="addeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Addition:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>divide&#160;<a href="diveq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>multiply&#160;<a href="muleq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>computed<b>&nbsp;</b>assignment<b>&nbsp;</b>subtract&#160;<a href="subeq.cpp.htm" target="_top">AD&nbsp;Computed&nbsp;Assignment&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>cos&#160;<a href="cos.cpp.htm" target="_top">The&nbsp;AD&nbsp;cos&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>cosh&#160;<a href="cosh.cpp.htm" target="_top">The&nbsp;AD&nbsp;cosh&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>divide&#160;<a href="div.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Division:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>erf&#160;<a href="erf.cpp.htm" target="_top">The&nbsp;AD&nbsp;erf&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>exp&#160;<a href="exp.cpp.htm" target="_top">The&nbsp;AD&nbsp;exp&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>log&#160;<a href="log.cpp.htm" target="_top">The&nbsp;AD&nbsp;log&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>log10&#160;<a href="log10.cpp.htm" target="_top">The&nbsp;AD&nbsp;log10&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>multiply&#160;<a href="mul.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>output&#160;<a href="output.cpp.htm" target="_top">AD&nbsp;Output&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>pow&#160;<a href="pow.cpp.htm" target="_top">The&nbsp;AD&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sin&#160;<a href="sin.cpp.htm" target="_top">The&nbsp;AD&nbsp;sin&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sinh&#160;<a href="sinh.cpp.htm" target="_top">The&nbsp;AD&nbsp;sinh&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sqrt&#160;<a href="sqrt.cpp.htm" target="_top">The&nbsp;AD&nbsp;sqrt&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>tan&#160;<a href="tan.cpp.htm" target="_top">The&nbsp;AD&nbsp;tan&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;abs&#160;<a href="abs.cpp.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;BenderQuad&#160;<a href="benderquad.cpp.htm" target="_top">BenderQuad:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CondExp&#160;<a href="condexp.cpp.htm" target="_top">Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vectorBool&#160;<a href="vectorbool.cpp.htm" target="_top">CppAD::vectorBool&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>NumericType&#160;<a href="checknumerictype.cpp.htm" target="_top">The&nbsp;CheckNumericType&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;check<b>&nbsp;</b>SimpleVector&#160;<a href="checksimplevector.cpp.htm" target="_top">The&nbsp;CheckSimpleVector&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;complex<b>&nbsp;</b>polynomial&#160;<a href="complexpoly.cpp.htm" target="_top">Complex&nbsp;Polynomial:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;construct<b>&nbsp;</b>from<b>&nbsp;</b>base&#160;<a href="copybase.cpp.htm" target="_top">AD&nbsp;Constructor&nbsp;From&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;copy<b>&nbsp;</b>AD<b>&nbsp;</b>object&#160;<a href="copyad.cpp.htm" target="_top">AD&nbsp;Copy&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Dependent&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Domain&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;default<b>&nbsp;</b>AD<b>&nbsp;</b>construct&#160;<a href="default.cpp.htm" target="_top">Default&nbsp;AD&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;delete&#160;<a href="tracknewdel.cpp.htm" target="_top">Tracking&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Derivative&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbylu.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detbyminor.cpp.htm" target="_top">Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;determinant<b>&nbsp;</b>by<b>&nbsp;</b>minors&#160;<a href="detofminor.cpp.htm" target="_top">Determinant&nbsp;of&nbsp;a&nbsp;Minor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;discrete&#160;<a href="discrete.cpp.htm" target="_top">Discrete&nbsp;AD&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;error<b>&nbsp;</b>handler&#160;<a href="errorhandler.cpp.htm" target="_top">Replacing&nbsp;The&nbsp;CppAD&nbsp;Error&nbsp;Handler:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;exception&#160;<a href="faq.htm#Exceptions" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Exceptions</a><br>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="forward.cpp.htm" target="_top">Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;FunCheck&#160;<a href="funcheck.cpp.htm" target="_top">ADFun&nbsp;Check&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.cpp.htm" target="_top">Hessian:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Independent&#160;<a href="independent.cpp.htm" target="_top">Independent&nbsp;and&nbsp;ADFun&nbsp;Constructor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Integer&#160;<a href="integer.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;Integer:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.cpp.htm" target="_top">Jacobian:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LU&#160;<a href="hesludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;LU&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="jacludet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Lu&nbsp;Factorization:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Lu<b>&nbsp;</b>record<b>&nbsp;</b>pivot&#160;<a href="luvecadok.cpp.htm" target="_top">Lu&nbsp;Factor&nbsp;and&nbsp;Solve&nbsp;With&nbsp;Recorded&nbsp;Pivoting:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.cpp.htm" target="_top">LuFactor:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.cpp.htm" target="_top">LuInvert:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuRatio&#160;<a href="luratio.cpp.htm" target="_top">LuRatio:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.htm" target="_top">LuSolve&nbsp;With&nbsp;Complex&nbsp;Arguments:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="hesminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;minors<b>&nbsp;</b>expansion&#160;<a href="jacminordet.cpp.htm" target="_top">Gradient&nbsp;of&nbsp;Determinant&nbsp;Using&nbsp;Expansion&nbsp;by&nbsp;Minors:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="near_equal.cpp.htm" target="_top">NearEqual&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NearEqualExt&#160;<a href="nearequalext.cpp.htm" target="_top">Compare&nbsp;AD&nbsp;with&nbsp;Base&nbsp;Objects:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;NumericType&#160;<a href="numerictype.cpp.htm" target="_top">The&nbsp;NumericType:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;new&#160;<a href="tracknewdel.cpp.htm" target="_top">Tracking&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="odetaylor.cpp.htm" target="_top">Taylor's&nbsp;Method&nbsp;Ode&nbsp;Solver:&nbsp;An&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrmaxabs.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test&nbsp;Using&nbsp;Maxabs&nbsp;Argument</a><br>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrcontrol.cpp.htm" target="_top">OdeErrControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeGear&#160;<a href="odegear.cpp.htm" target="_top">OdeGear:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;OdeGearControl&#160;<a href="odegearcontrol.cpp.htm" target="_top">OdeGearControl:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="parvar.cpp.htm" target="_top">AD&nbsp;Parameter&nbsp;and&nbsp;Variable&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Partial&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="poly.cpp.htm" target="_top">Polynomial&nbsp;Evaluation:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;pow<b>&nbsp;</b>int&#160;<a href="powint.cpp.htm" target="_top">The&nbsp;Integer&nbsp;Power&nbsp;Function:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Range&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Reverse&#160;<a href="reverseany.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;(any&nbsp;Order):&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Reverse&#160;<a href="reverseone.cpp.htm" target="_top">First&nbsp;Order&nbsp;Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergmul.cpp.htm" target="_top">One&nbsp;Dimensional&nbsp;Romberg&nbsp;Integration:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergone.cpp.htm" target="_top">One&nbsp;Dimensional&nbsp;Romberg&nbsp;Integration:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Rosen34&#160;<a href="rosen34.cpp.htm" target="_top">Rosen34:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge45.cpp.htm" target="_top">Runge45:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;re<b>-</b>tape&#160;<a href="comparechange.cpp.htm" target="_top">CompareChange&nbsp;and&nbsp;Re-Tape:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="revtwo.cpp.htm" target="_top">Second&nbsp;Partials&nbsp;Reverse&nbsp;Driver:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;second<b>&nbsp;</b>partial&#160;<a href="fortwo.cpp.htm" target="_top">Subset&nbsp;of&nbsp;Second&nbsp;Order&nbsp;Partials:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>vector&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>var&#160;<a href="seqproperty.cpp.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>forward&#160;<a href="forsparsejac.cpp.htm" target="_top">Forward&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>Hessian&#160;<a href="revsparsehes.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Hessian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&nbsp;</b>reverse&#160;<a href="revsparsejac.cpp.htm" target="_top">Reverse&nbsp;Mode&nbsp;Jacobian&nbsp;Sparsity:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speedtest.htm" target="_top">Run&nbsp;One&nbsp;Speed&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;stiff<b>&nbsp;</b>ode&#160;<a href="odestiff.cpp.htm" target="_top">A&nbsp;Stiff&nbsp;Ode:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;subtract&#160;<a href="sub.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Subtraction:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unary<b>&nbsp;</b>minus&#160;<a href="unaryminus.cpp.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unary<b>&nbsp;</b>plus&#160;<a href="unaryplus.cpp.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-Example" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-Example</a><br>
&#160;&#160;&#160;&#160;&#160;unix<b>&nbsp;</b>speed&#160;<a href="installunix.htm#--with-Speed" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-Speed</a><br>
&#160;&#160;&#160;&#160;&#160;Value&#160;<a href="value.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;Variable&#160;<a href="parvar.cpp.htm" target="_top">AD&nbsp;Parameter&nbsp;and&nbsp;Variable&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;VecAD&#160;<a href="vecad.cpp.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="cppadvector.htm" target="_top">Choosing&nbsp;The&nbsp;CppADvector&nbsp;Template&nbsp;Class</a><br>
test<b>&nbsp;</b>more<br>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.htm#--with-TestMore" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing:&#160;--with-TestMore</a><br>
theory<br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>forward&#160;<a href="acosforward.htm" target="_top">Arccosine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;acos<b>&nbsp;</b>reverse&#160;<a href="acosreverse.htm" target="_top">Arccosine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>forward&#160;<a href="asinforward.htm" target="_top">Arcsine&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;asin<b>&nbsp;</b>reverse&#160;<a href="asinreverse.htm" target="_top">Arcsine&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>forward&#160;<a href="atanforward.htm" target="_top">Arctangent&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;atan<b>&nbsp;</b>reverse&#160;<a href="atanreverse.htm" target="_top">Arctangent&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>forward&#160;<a href="expforward.htm" target="_top">Exponential&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;exp<b>&nbsp;</b>reverse&#160;<a href="expreverse.htm" target="_top">Exponential&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>forward&#160;<a href="logforward.htm" target="_top">Logarithm&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;log<b>&nbsp;</b>reverse&#160;<a href="logreverse.htm" target="_top">Logarithm&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosreverse.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Reverse&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosforward.htm" target="_top">Trigonometric&nbsp;and&nbsp;Hyperbolic&nbsp;Sine&nbsp;and&nbsp;Cosine&nbsp;Forward&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>forward&#160;<a href="sqrtforward.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Forward&nbsp;Taylor&nbsp;Polynomial&nbsp;Theory</a><br>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&nbsp;</b>reverse&#160;<a href="sqrtreverse.htm" target="_top">Square&nbsp;Root&nbsp;Function&nbsp;Reverse&nbsp;Mode&nbsp;Theory</a><br>
times<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>example&#160;<a href="mul.cpp.htm" target="_top">AD&nbsp;Binary&nbsp;Multiplication:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
track<br>
&#160;&#160;&#160;&#160;&#160;new<b>&nbsp;</b>and<b>&nbsp;</b>delete&#160;<a href="tracknewdel.htm" target="_top">Routines&nbsp;That&nbsp;Track&nbsp;Use&nbsp;of&nbsp;New&nbsp;and&nbsp;Delete</a><br>
type&#160;<a href="glossary.htm#Base Type" target="_top">Glossary:&#160;Base&nbsp;Type</a><br>
&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#AD Type Sequence" target="_top">Glossary:&#160;AD&nbsp;Type&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>sequence&#160;<a href="glossary.htm#AD Type Sequence" target="_top">Glossary:&#160;AD&nbsp;Type&nbsp;Sequence</a><br>
&#160;&#160;&#160;&#160;&#160;Base<b>&nbsp;</b>require&#160;<a href="cppad.htm#Base Type Requirements" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29:&#160;Base&nbsp;Type&nbsp;Requirements</a><br>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="numerictype.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Numeric&nbsp;Type</a><br>

<b><big><a name="U">U</a></big></b>
<br>
unary<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>bool&#160;<a href="boolfun.htm" target="_top">AD&nbsp;Boolean&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>math&#160;<a href="stdmathunary.htm" target="_top">AD&nbsp;Standard&nbsp;Math&nbsp;Unary&nbsp;Functions</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>minus<b>&nbsp;</b>operator&#160;<a href="unaryminus.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>plus<b>&nbsp;</b>operator&#160;<a href="unaryplus.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator</a><br>
unary<b>&nbsp;</b>minus<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="unaryminus.cpp.htm" target="_top">AD&nbsp;Unary&nbsp;Minus&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
unary<b>&nbsp;</b>plus<br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="unaryplus.cpp.htm" target="_top">AD&nbsp;Unary&nbsp;Plus&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
unix<br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>install&#160;<a href="installunix.htm" target="_top">Unix&nbsp;Installation&nbsp;and&nbsp;Testing</a><br>
use<b>_</b>VecAD<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
using<br>
&#160;&#160;&#160;&#160;&#160;namespace&#160;<a href="faq.htm#Namespace.Using" target="_top">Frequently&nbsp;Asked&nbsp;Questions&nbsp;and&nbsp;Answers:&#160;Namespace.Using</a><br>

<b><big><a name="V">V</a></big></b>
<br>
Value&#160;<a href="value.cpp.htm" target="_top">Convert&nbsp;From&nbsp;AD&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="value.htm" target="_top">Convert&nbsp;From&nbsp;an&nbsp;AD&nbsp;Type&nbsp;to&nbsp;its&nbsp;Base&nbsp;Type</a><br>
Variable&#160;<a href="parvar.htm" target="_top">Is&nbsp;an&nbsp;AD&nbsp;Object&nbsp;a&nbsp;Parameter&nbsp;or&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="parvar.cpp.htm" target="_top">AD&nbsp;Parameter&nbsp;and&nbsp;Variable&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
VecAD&#160;<a href="vecad.cpp.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="vecad.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations</a><br>
VecAD<b>&lt;</b>Base<b>&gt;::</b>reference&#160;<a href="vecad.htm#VecAD&lt;Base&gt;::reference" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations:&#160;VecAD&lt;Base&gt;::reference</a><br>
value<br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>absolute&#160;<a href="abs.htm" target="_top">AD&nbsp;Absolute&nbsp;Value&nbsp;Function</a><br>
value<b>_</b>type<br>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.htm#Value Type" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector:&#160;Value&nbsp;Type</a><br>
var<b>_</b>size<br>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seqproperty.htm" target="_top">ADFun&nbsp;Sequence&nbsp;Properties</a><br>
variable&#160;<a href="glossary.htm#Variable" target="_top">Glossary:&#160;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#Independent Variable" target="_top">Glossary:&#160;Independent&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.htm#Dependent Variable" target="_top">Glossary:&#160;Dependent&nbsp;Variable</a><br>
&#160;&#160;&#160;&#160;&#160;independent&#160;<a href="independent.htm" target="_top">Declare&nbsp;Independent&nbsp;Variables&nbsp;and&nbsp;Start&nbsp;Recording</a><br>
vector&#160;<a href="glossary.htm#Elementary Vector" target="_top">Glossary:&#160;Elementary&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;<b>[]&nbsp;</b>CppAD&#160;<a href="cppad_vector.htm#Element Access" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;Element&nbsp;Access</a><br>
&#160;&#160;&#160;&#160;&#160;AD<b>&nbsp;</b>index&#160;<a href="vecad.htm" target="_top">AD&nbsp;Vectors&nbsp;that&nbsp;Record&nbsp;Index&nbsp;Operations</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad_vector.cpp.htm" target="_top">CppAD::vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>push<b>_</b>back&#160;<a href="cppad_vector.htm#push_back" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;push_back</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&nbsp;</b>template<b>&nbsp;</b>class&#160;<a href="cppad_vector.htm" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class</a><br>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="simplevector.cpp.htm" target="_top">Simple&nbsp;Vector&nbsp;Template&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="simplevector.htm" target="_top">Definition&nbsp;of&nbsp;a&nbsp;Simple&nbsp;Vector</a><br>
&#160;&#160;&#160;&#160;&#160;simple<b>&nbsp;</b>check&#160;<a href="checksimplevector.htm" target="_top">Check&nbsp;Simple&nbsp;Vector&nbsp;Concept</a><br>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="cppadvector.htm" target="_top">Choosing&nbsp;The&nbsp;CppADvector&nbsp;Template&nbsp;Class</a><br>
vectorBool&#160;<a href="cppad_vector.htm#vectorBool" target="_top">The&nbsp;CppAD::vector&nbsp;Template&nbsp;Class:&#160;vectorBool</a><br>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="vectorbool.cpp.htm" target="_top">CppAD::vectorBool&nbsp;Class:&nbsp;Example&nbsp;and&nbsp;Test</a><br>
version<br>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad.htm" target="_top">A&nbsp;Package&nbsp;for&nbsp;Differentiation&nbsp;of&nbsp;C++&nbsp;Algorithms:&nbsp;CppAD-06-05-29</a><br>

<b><big><a name="W">W</a></big></b>
<br>
wish<b>&nbsp;</b>list&#160;<a href="wishlist.htm" target="_top">The&nbsp;CppAD&nbsp;Wish&nbsp;List</a><br>
write<br>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="output.htm" target="_top">AD&nbsp;Output&nbsp;Stream&nbsp;Operator</a><br>

<b><big><a name="Z">Z</a></big></b>
<br>
zero<br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>Forward&#160;<a href="forwardzero.htm" target="_top">Zero&nbsp;Order&nbsp;Forward&nbsp;Mode:&nbsp;Function&nbsp;Values</a><br>
&#160;&#160;&#160;&#160;&#160;order<b>&nbsp;</b>forward&#160;<a href="comparechange.htm" target="_top">Comparison&nbsp;Changes&nbsp;During&nbsp;Zero&nbsp;Order&nbsp;Forward&nbsp;Mode</a><br>

</body>
</html>
