<html><head>
<title>Glossary</title>
<meta name="description" id="description" content="Glossary">
<meta name="keywords" id="keywords" content=" ad function of base type sequence Ad Type dependent variable elementary vector independent operation atomic parameter sparsity pattern efficient tape state empty recording taylor coefficient ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_glossary_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="detlufadbad.cpp.htm" target="_top">Prev</a>
</td><td><a href="bib.htm" target="_top">Next</a>
</td><td><a href="cppad.htm" target="_top">Top</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Appendix-&gt;</option>
<option>Theory</option>
<option>Speed</option>
<option>Adolc</option>
<option>Fadbad</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>WhatsNew06</option>
</select>
</td>
<td>glossary</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>AD Function</option>
<option>AD of Base</option>
<option>AD Type Sequence</option>
<option>Base Function</option>
<option>Base Type</option>
<option>Dependent Variable</option>
<option>Elementary Vector</option>
<option>Independent Variable</option>
<option>Operation</option>
<option>---..Atomic</option>
<option>---..Sequence</option>
<option>---..Dependent</option>
<option>---..Independent</option>
<option>Parameter</option>
<option>Sparsity Pattern</option>
<option>Tape State</option>
<option>---..Empty</option>
<option>---..Recording</option>
<option>Taylor Coefficient</option>
<option>Variable</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Glossary</big></big></b></center>
<br>
<b><big><a name="AD Function" id="AD Function">AD Function</a></big></b>
<br>
Given an <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object <i>f</i>
there is a corresponding
AD of <i>Base</i> <a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
.
This operation sequence
defines a function 
<code>
<span style='white-space: nowrap'>&nbsp;F&nbsp;:&nbsp;B^n&nbsp;\rightarrow&nbsp;B^m&nbsp;</span></code>

where <i>B</i> is the space corresponding to objects of type <i>Base</i>.
We refer to <code>
<span style='white-space: nowrap'>&nbsp;F</span></code>
 as the AD function corresponding to 
the operation sequence and to the object <i>f</i>.
(See the <a href="funcheck.htm#Discussion" target="_top"><span style='white-space: nowrap'>FunCheck&nbsp;discussion</span></a>
 for
possible differences between <code>
<span style='white-space: nowrap'>&nbsp;F(x)</span></code>
 and the algorithm that defined
the operation sequence.)

<br>
<br>
<b><big><a name="AD of Base" id="AD of Base">AD of Base</a></big></b>
<br>
An object is called an AD of <i>Base</i> object its type is 
either <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> (see <a href="constructor.htm" target="_top"><span style='white-space: nowrap'>Constructor</span></a>
)
or <code><font color="blue"><span style='white-space: nowrap'>VecAD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;::reference</span></font></code> (see <a href="vecad.htm" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
)
for some <i>Base</i> type.

<br>
<br>
<b><big><a name="AD Type Sequence" id="AD Type Sequence">AD Type Sequence</a></big></b>



<br>
If <i>Base</i> is a type, the AD type sequence above <i>Base</i> 
is the following sequence of types:
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>,</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;AD&lt;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>,</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;AD&lt;&nbsp;AD&lt;&nbsp;AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&gt;&nbsp;&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>,</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font></code><i><span style='white-space: nowrap'>...</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code><br>
<b><big><a name="Base Function" id="Base Function">Base Function</a></big></b>
<br>
A function <code>
<span style='white-space: nowrap'>&nbsp;f&nbsp;:&nbsp;B&nbsp;\rightarrow&nbsp;B</span></code>
 
is referred to as a <i>Base</i> function,
if <i>Base</i> is a C++ type that represent elements of
the domain and range space of <i>f</i>; i.e. elements of <code>
<span style='white-space: nowrap'>&nbsp;B</span></code>
.

<br>
<br>
<b><big><a name="Base Type" id="Base Type">Base Type</a></big></b>
<br>
If <i>x</i> is an <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object,
<i>Base</i> is referred to as the base type for <i>x</i>.

<br>
<br>
<b><big><a name="Dependent Variable" id="Dependent Variable">Dependent Variable</a></big></b>
<br>
An <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object is a dependent variable
if it is a variable and is not an independent variable.

<br>
<br>
<b><big><a name="Elementary Vector" id="Elementary Vector">Elementary Vector</a></big></b>
<br>
The <i>j</i>-th elementary vector <code>
<span style='white-space: nowrap'>&nbsp;e^j&nbsp;\in&nbsp;B^m</span></code>
 is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
e_i^j&nbsp;=&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&amp;&nbsp;{\rm&nbsp;if}&nbsp;\;&nbsp;i&nbsp;=&nbsp;j&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&amp;&nbsp;{\rm&nbsp;otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>



<br>
<br>
<b><big><a name="Independent Variable" id="Independent Variable">Independent Variable</a></big></b>
<br>
The set of independent variables are specified by
the <a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 function call
that starts recording operations on the corresponding tape.

<br>
<br>
<b><big><a name="Operation" id="Operation">Operation</a></big></b>


<br>
<br>
<b><a name="Operation.Atomic" id="Operation.Atomic">Atomic</a></b>
<br>
An atomic <i>Type</i> operation is an operation that
has a <i>Type</i> result and is not made up of other
more basic operations.

<br>
<br>
<b><a name="Operation.Sequence" id="Operation.Sequence">Sequence</a></b>
<br>
A sequence of atomic <i>Type</i> operations 
is called a <i>Type</i> operation sequence.
A sequence of atomic <a href="glossary.htm#AD of Base" target="_top"><span style='white-space: nowrap'>AD&nbsp;of&nbsp;Base</span></a>
 operations
is referred to as an AD of <i>Base</i> operation sequence.
The abbreviated notation AD operation sequence is often used
when it is not necessary to specify the base type.

<br>
<br>
<b><a name="Operation.Dependent" id="Operation.Dependent">Dependent</a></b>
<br>
Suppose that <i>x</i> and <i>y</i> are <i>Type</i> objects and
the result of 
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>has type <code><font color="blue">bool</font></code> (where <i>Type</i> is not the same as <code><font color="blue">bool</font></code>).
If one executes the following code
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cos(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;sin(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>);&nbsp;<br>
</span></font></code>the choice above depends on the value of <i>x</i> and <i>y</i>
and the two choices result in a different <i>Type</i> operation sequence.
In this case, we say that the <i>Type</i> operation sequence depends
on <i>x</i> and <i>y</i>.

<br>
<br>
<b><a name="Operation.Independent" id="Operation.Independent">Independent</a></b>
<br>
Suppose that <i>i</i> and <i>n</i> are <code><font color="blue">size_t</font></code> objects,
and <code><font color="blue"></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>]</span></font></code>, <i>y</i> are <i>Type</i> objects,
where <i>Type</i> is different from <code><font color="blue">size_t</font></code>.
The <i>Type</i> sequence of operations corresponding to
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0;&nbsp;</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>;&nbsp;</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;+=&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>[</span></font></code><i><span style='white-space: nowrap'>i</span></i><code><font color="blue"><span style='white-space: nowrap'>];<br>
</span></font></code>does not depend on the value of <i>x</i> or <i>y</i>.
In this case, we say that the <i>Type</i> operation sequence 
is independent of <i>y</i> and the elements of <i>x</i>.

<br>
<br>
<b><big><a name="Parameter" id="Parameter">Parameter</a></big></b>
<br>
All <i>Base</i> objects are parameters.
All <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> objects are currently parameters
when the tape is in the Empty state.
An <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object <i>u</i> is currently a parameter if
its value does not depend on the value of the
current <a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 variables.
If <i>u</i> is a parameter, the function 
<a href="parvar.htm" target="_top"><span style='white-space: nowrap'>Parameter(u)</span></a>
 returns true
and <a href="parvar.htm" target="_top"><span style='white-space: nowrap'>Variable(u)</span></a>
 returns false.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Note that we often drop the word currently and 
just refer to an <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object as a parameter.

<br>
<br>
<b><big><a name="Sparsity Pattern" id="Sparsity Pattern">Sparsity Pattern</a></big></b>



<br>
Given a matrix 
<code>
<span style='white-space: nowrap'>&nbsp;A&nbsp;\in&nbsp;B^{n&nbsp;\times&nbsp;m}</span></code>
,
a boolean valued <code>
<span style='white-space: nowrap'>&nbsp;m&nbsp;\times&nbsp;n</span></code>
 matrix <code>
<span style='white-space: nowrap'>&nbsp;P</span></code>
 is a 
sparsity pattern for <code>
<span style='white-space: nowrap'>&nbsp;A</span></code>
 if 
for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0,&nbsp;\ldots&nbsp;,&nbsp;m-1</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;n-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
A_{i,j}&nbsp;\neq&nbsp;0&nbsp;&nbsp;<br>
\;&nbsp;\Rightarrow&nbsp;\;&nbsp;<br>
P_{i,j}&nbsp;=&nbsp;{\rm&nbsp;true}<br>
\]&nbsp;</span></code>

Given two sparsity patterns <code>
<span style='white-space: nowrap'>&nbsp;P</span></code>
 and <i>Q</i> 
for a matrix <i>A</i>, we say that <i>P</i> is more efficient than
<i>Q</i> if <i>P</i> has fewer true elements than <i>Q</i>.
 
<br>
<br>
<b><big><a name="Tape State" id="Tape State">Tape State</a></big></b>
<br>
For each <i>Base</i> class,
the tape that record the corresponding 
AD of <i>Base</i> <a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

has two possible states:
<code><font color="blue">
<span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enum&nbsp;TapeState&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empty,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Recording,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
</span>
</font></code>
The tape is initially in the <code><font color="blue">Empty</font></code> state.
It is in the <code><font color="blue">Recording</font></code> state after a call to 
<a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 with an argument vector containing 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> elements.
It is in the <code><font color="blue">Empty</font></code> state after the corresponding call to the
<a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun&lt;Base&gt;</span></a>
 constructor.


<br>
<br>
<b><a name="Tape State.Empty" id="Tape State.Empty">Empty</a></b>
<br>
The tape is empty 
(hence all <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> objects are parameters).
The tape is initially in this state and it enters this state whenever a
<a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object is constructed.

<br>
<br>
<b><a name="Tape State.Recording" id="Tape State.Recording">Recording</a></b>
<br>
All of the independent variables have been specified
and the tape is currently recording the operations that define
the more variables as <i>Base</i> scalar functions of the
independent variables.
The tape enters this state when a
<a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 calculation is preformed.

<br>
<br>
<b><big><a name="Taylor Coefficient" id="Taylor Coefficient">Taylor Coefficient</a></big></b>
<br>
Suppose <code>
<span style='white-space: nowrap'>&nbsp;X&nbsp;:&nbsp;B&nbsp;\rightarrow&nbsp;B^n</span></code>
 is a 
is <code>
<span style='white-space: nowrap'>&nbsp;p</span></code>
 times continuously differentiable function
in some neighborhood of zero.
For <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;p</span></code>
, 
we use the column vector <code>
<span style='white-space: nowrap'>&nbsp;x^{(k)}&nbsp;\in&nbsp;B^n</span></code>
 for the <i>k</i>-th order 
Taylor coefficient corresponding to <code>
<span style='white-space: nowrap'>&nbsp;X</span></code>
 
which is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x^{(k)}&nbsp;=&nbsp;\frac{1}{k&nbsp;!}&nbsp;\Dpow{k}{t}&nbsp;X(0)<br>
\]&nbsp;</span></code>

It follows that 
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X(t)&nbsp;=&nbsp;x^{(0)}&nbsp;+&nbsp;x^{(1)}&nbsp;t&nbsp;+&nbsp;\cdots&nbsp;+&nbsp;x^{(p)}&nbsp;t^p&nbsp;&nbsp;+&nbsp;R(t)<br>
\]</span></code>

where the remainder <code>
<span style='white-space: nowrap'>&nbsp;R(t)</span></code>
 divided by <code>
<span style='white-space: nowrap'>&nbsp;t^p</span></code>
 
converges to zero and <code>
<span style='white-space: nowrap'>&nbsp;t</span></code>
 goes to zero.


<br>
<br>
<b><big><a name="Variable" id="Variable">Variable</a></big></b>
<br>
An <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object <i>u</i> is currently a variable if
the corresponding tape is in the Recording state
and the current value of an <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object 
depends on the value of at least one of the 
<a href="glossary.htm#Independent Variable" target="_top"><span style='white-space: nowrap'>independent</span></a>
 variables.
If <i>u</i> is a variable,
<a href="parvar.htm" target="_top"><span style='white-space: nowrap'>Variable(u)</span></a>
 returns true and 
<a href="parvar.htm" target="_top"><span style='white-space: nowrap'>Parameter(u)</span></a>
 returns false. 
For example,
directly after the code sequence
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>[0];<br>
</span></font></code>the <code><font color="blue"><span style='white-space: nowrap'>AD&lt;double&gt;</span></font></code> object <i>u</i> is currently a variable.
Directly after the code sequence
<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Independent(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;double&gt;&nbsp;</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>[0];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></code><i><span style='white-space: nowrap'>u</span></i><code><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;5;<br>
</span></font></code><i>u</i>  is currently a <a href="glossary.htm#Parameter" target="_top"><span style='white-space: nowrap'>parameter</span></a>

(not a variable).
<code><span style='white-space: nowrap'><br>
<br>
</span></code>Note that we often drop the word currently and 
just refer to an <code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code> object as a variable
or parameter.


<hr>Input File: omh/glossary.omh

</body>
</html>
