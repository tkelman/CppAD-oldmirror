<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Determinant by Lu Factor and Solve: Speed Test</title>
<meta name="description" id="description" content="Determinant by Lu Factor and Solve: Speed Test"/>
<meta name="keywords" id="keywords" content=" speed Lu determinant "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_detluspeed.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="detminorspeed.cpp.xml" target="_top">Prev</a>
</td><td><a href="odespeed.cpp.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Appendix-&gt;</option>
<option>Theory</option>
<option>Speed</option>
<option>Adolc</option>
<option>Fadbad</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>WhatsNew06</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Speed-&gt;</option>
<option>Speed.cpp</option>
<option>DetMinorSpeed.cpp</option>
<option>DetLuSpeed.cpp</option>
<option>OdeSpeed.cpp</option>
<option>LuSolveSpeed.cpp</option>
</select>
</td>
<td>DetLuSpeed.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Determinant by Lu Factor and Solve: Speed Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
#&#xA0;include&#xA0;&quot;../Example/DetByLu.h&quot;<br/>
<br/>
#&#xA0;include&#xA0;&lt;sstream&gt;<br/>
#&#xA0;include&#xA0;&lt;string&gt;<br/>
<br/>
std::string&#xA0;doubleDetLu(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;a(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;double&#xA0;(&#xA0;i&#xA0;/&#xA0;(double)&#xA0;(j&#xA0;+&#xA0;1.)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;double&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Det(a);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;double:&#xA0;Determinant&#xA0;by&#xA0;Lu&#xA0;Factorization&quot;;<br/>
}<br/>
<br/>
std::string&#xA0;ADdoubleDetLu(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;A(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;&#xA0;AD&lt;double&gt;(&#xA0;i&#xA0;/&#xA0;(double)&#xA0;(j&#xA0;+&#xA0;1.)&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;AD&lt;double&gt;:&#xA0;Determinant&#xA0;by&#xA0;Lu&#xA0;Factorization&quot;;<br/>
}<br/>
<br/>
<br/>
std::string&#xA0;TapeDetLu(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;J(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;A(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;D(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;A[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;a[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;double(&#xA0;i&#xA0;/&#xA0;(double)&#xA0;(j&#xA0;+&#xA0;1.));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;memory&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;length&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;the&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tape&#xA0;the&#xA0;evaluation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;D[0]&#xA0;=&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;D<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(A,&#xA0;D);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;save&#xA0;so&#xA0;can&#xA0;return<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;length&#xA0;=&#xA0;f.Size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;memory&#xA0;=&#xA0;f.Memory();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;Tape&#xA0;of&#xA0;Determinate&#xA0;by&#xA0;Lu&#xA0;Factorization:&#xA0;Length&#xA0;=&#xA0;&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;length&#xA0;&lt;&lt;&#xA0;&quot;,&#xA0;Memory&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;memory;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;buf.str();<br/>
}<br/>
<br/>
std::string&#xA0;JacDetLu(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;J(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;A(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;D(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;A[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;a[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;double(&#xA0;i&#xA0;/&#xA0;(double)&#xA0;(j&#xA0;+&#xA0;1.));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;memory&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;length&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;the&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tape&#xA0;the&#xA0;evaluation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;D[0]&#xA0;=&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;D<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(A,&#xA0;D);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;Jacobian&#xA0;of&#xA0;f<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;J&#xA0;=&#xA0;f.Jacobian(a);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;save&#xA0;so&#xA0;can&#xA0;return<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;length&#xA0;=&#xA0;f.Size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;memory&#xA0;=&#xA0;f.Memory();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;Jacobian&#xA0;of&#xA0;Determinate&#xA0;by&#xA0;Lu&#xA0;Factorization:&#xA0;Length&#xA0;=&#xA0;&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;length&#xA0;&lt;&lt;&#xA0;&quot;,&#xA0;Memory&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;memory;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;buf.str();<br/>
}<br/>
<br/>
std::string&#xA0;HesDetLu(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;std;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H(&#xA0;size&#xA0;*&#xA0;size&#xA0;*&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;A(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;D(1);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;0;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;A[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;a[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;double(&#xA0;i&#xA0;/&#xA0;(double)&#xA0;(j&#xA0;+&#xA0;1.));<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;memory&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;length&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;the&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tape&#xA0;the&#xA0;evaluation<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;D[0]&#xA0;=&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;D<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(A,&#xA0;D);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evaluate&#xA0;the&#xA0;Hessian&#xA0;of&#xA0;f<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;H&#xA0;=&#xA0;f.Hessian(a,&#xA0;0);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;save&#xA0;so&#xA0;can&#xA0;return<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;length&#xA0;=&#xA0;f.Size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;memory&#xA0;=&#xA0;f.Memory();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ostringstream&#xA0;buf;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;buf&#xA0;&lt;&lt;&#xA0;&quot;Hessian&#xA0;of&#xA0;Determinate&#xA0;by&#xA0;Lu&#xA0;Factorization:&#xA0;Length&#xA0;=&#xA0;&quot;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;length&#xA0;&lt;&lt;&#xA0;&quot;,&#xA0;Memory&#xA0;=&#xA0;&quot;&#xA0;&lt;&lt;&#xA0;memory;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;buf.str();<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Speed/DetLu.cpp

</body>
</html>
