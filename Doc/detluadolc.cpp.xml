<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Adolc &amp; CppAD Gradient of Determinant by Lu Factorization</title>
<meta name="description" id="description" content="Adolc &amp; CppAD Gradient of Determinant by Lu Factorization"/>
<meta name="keywords" id="keywords" content=" Adolc speed determinant Lu factor "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_detluadolc.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="detminoradolc.cpp.xml" target="_top">Prev</a>
</td><td><a href="fadbad.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Appendix-&gt;</option>
<option>Theory</option>
<option>Speed</option>
<option>Adolc</option>
<option>Fadbad</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>WhatsNew06</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Adolc-&gt;</option>
<option>SpeedAdolc.cpp</option>
<option>ExampleAdolc.cpp</option>
<option>DetMinorAdolc.cpp</option>
<option>DetLuAdolc.cpp</option>
</select>
</td>
<td>DetLuAdolc.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Adolc &amp; CppAD Gradient of Determinant by Lu Factorization</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
#&#xA0;include&#xA0;&quot;../Example/DetByLu.h&quot;<br/>
<br/>
#&#xA0;include&#xA0;&lt;adolc/adouble.h&gt;<br/>
#&#xA0;include&#xA0;&lt;adolc/interfaces.h&gt;<br/>
<br/>
void&#xA0;DetLuCp(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat,&#xA0;CppADvector&lt;double&gt;&#xA0;&amp;u)<br/>
{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-----------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Do&#xA0;this&#xA0;set&#xA0;up&#xA0;once&#xA0;so&#xA0;not&#xA0;significant&#xA0;in&#xA0;timing&#xA0;test<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;object&#xA0;for&#xA0;computing&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;&#xA0;&#xA0;A(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;A[&#xA0;i&#xA0;]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;1;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;double(i)&#xA0;*&#xA0;A[&#xA0;i&#xA0;+&#xA0;(j-1)&#xA0;*&#xA0;size&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vectors&#xA0;for&#xA0;reverse&#xA0;mode&#xA0;input&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;v(1);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[0]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;------------------------------------------------------<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA[0]&#xA0;=&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;function&#xA0;object&#xA0;f&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;detA<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;f(A,&#xA0;detA);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evalute&#xA0;and&#xA0;return&#xA0;gradient&#xA0;using&#xA0;reverse&#xA0;mode<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u&#xA0;=&#xA0;f.Reverse(1,&#xA0;v);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}<br/>
<br/>
void&#xA0;DetLuAd(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat,&#xA0;double&#xA0;*u)<br/>
{<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;j;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;&#xA0;deta;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;-----------------------------------------------------<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Do&#xA0;this&#xA0;set&#xA0;up&#xA0;once&#xA0;so&#xA0;not&#xA0;significant&#xA0;in&#xA0;timing&#xA0;test<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;object&#xA0;for&#xA0;computing&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::DetByLu&lt;adouble&gt;&#xA0;Det(size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;adouble&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;adouble&gt;&#xA0;&#xA0;A(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;a(&#xA0;size&#xA0;*&#xA0;size&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(&#xA0;i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;a[&#xA0;i&#xA0;]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(j&#xA0;=&#xA0;1;&#xA0;j&#xA0;&lt;&#xA0;size;&#xA0;j++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;a[i&#xA0;+&#xA0;j&#xA0;*&#xA0;size]&#xA0;=&#xA0;double(i)&#xA0;*&#xA0;a[&#xA0;i&#xA0;+&#xA0;(j-1)&#xA0;*&#xA0;size&#xA0;];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;vectors&#xA0;for&#xA0;reverse&#xA0;mode&#xA0;input&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;v[1];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[0]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;tag,&#xA0;keep,&#xA0;and&#xA0;order&#xA0;flags<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;tag&#xA0;&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;keep&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;d&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;0;&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;number&#xA0;of&#xA0;elements&#xA0;in&#xA0;A<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;&#xA0;length&#xA0;=&#xA0;size&#xA0;*&#xA0;size;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;------------------------------------------------------<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(repeat--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;trace_on(tag,&#xA0;keep);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;length;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;A[i]&#xA0;&lt;&lt;=&#xA0;a[i];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;determinant<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA&#xA0;=&#xA0;Det(A);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;function&#xA0;object&#xA0;f&#xA0;:&#xA0;A&#xA0;-&gt;&#xA0;detA<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;detA&#xA0;&gt;&gt;=&#xA0;deta;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;trace_off();<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;evalute&#xA0;and&#xA0;return&#xA0;gradient&#xA0;using&#xA0;reverse&#xA0;mode<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;reverse(tag,&#xA0;1,&#xA0;length,&#xA0;d,&#xA0;v,&#xA0;u);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}<br/>
}<br/>
<br/>
bool&#xA0;DetLu(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;size&#xA0;&#xA0;&#xA0;=&#xA0;4;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;repeat&#xA0;=&#xA0;1;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*uAd&#xA0;=&#xA0;new&#xA0;double[size&#xA0;*&#xA0;size];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;uCp(size&#xA0;*&#xA0;size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetLuCp(size,&#xA0;repeat,&#xA0;uCp);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetLuAd(size,&#xA0;repeat,&#xA0;uAd);<br/>
<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;size&#xA0;*&#xA0;size;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;CppAD::NearEqual(uCp[i],&#xA0;uAd[i],&#xA0;1e-12,&#xA0;1e-12);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;uAd;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
std::string&#xA0;DetLuCp(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;u(size&#xA0;*&#xA0;size);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetLuCp(size,&#xA0;repeat,&#xA0;u);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;CppAD:&#xA0;gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Lu&#xA0;Factorization&quot;;<br/>
}<br/>
std::string&#xA0;DetLuAd(size_t&#xA0;size,&#xA0;size_t&#xA0;repeat)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;double&#xA0;*u&#xA0;=&#xA0;new&#xA0;double[size&#xA0;*&#xA0;size];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetLuAd(size,&#xA0;repeat,&#xA0;u);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;u;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;&quot;Adolc:&#xA0;gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Lu&#xA0;Factorization&quot;;<br/>
}<br/>
<br/>
</span></font></code>
<hr/>Input File: Adolc/DetLu.cpp

</body>
</html>
