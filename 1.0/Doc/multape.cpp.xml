<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Multiple Tapes: Example and Test</title>
<meta name="description" id="description" content="Multiple Tapes: Example and Test"/>
<meta name="keywords" id="keywords" content=" multiple tape "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_multape.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="multape.xml" target="_top">Prev</a>
</td><td><a href="exampleutility.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>CppADvector</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>General-&gt;</option>
<option>Interface2C.cpp</option>
<option>JacMinorDet.cpp</option>
<option>JacLuDet.cpp</option>
<option>HesMinorDet.cpp</option>
<option>HesLuDet.cpp</option>
<option>OdeStiff.cpp</option>
<option>OdeTaylor.cpp</option>
<option>ComplexPoly.cpp</option>
<option>MulTape</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>MulTape-&gt;</option>
<option>MulTape.cpp</option>
</select>
</td>
<td>MulTape.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Description</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>Multiple Tapes: Example and Test</big></big></b></center>
<br/>
<b><big><a name="Description" id="Description">Description</a></big></b>
<br/>
This is an example and test of using multiple levels of taping to compute
the value

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mi mathvariant='italic'>d</mi>
</mrow>
<mrow><mi mathvariant='italic'>dx</mi>
</mrow>
</mfrac>
<mrow><mo stretchy="true">[</mo><mrow><msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>v</mi>
</mrow><mo stretchy="true">]</mo></mrow>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">:</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
</mrow></math>

 and

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>v</mi>
<mo stretchy="false">&#x02208;</mo>
<msup><mrow><mstyle mathvariant='bold'><mi mathvariant='bold'>R</mi>
</mstyle></mrow>
<mi mathvariant='italic'>n</mi>
</msup>
</mrow></math>

.
The example <a href="hestimesdir.cpp.xml" target="_top"><span style='white-space: nowrap'>HesTimesDir.cpp</span></a>
 computes the same value using only
one level of taping (more efficient) and the identity

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mfrac><mrow><mi mathvariant='italic'>d</mi>
</mrow>
<mrow><mi mathvariant='italic'>dx</mi>
</mrow>
</mfrac>
<mrow><mo stretchy="true">[</mo><mrow><msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>v</mi>
</mrow><mo stretchy="true">]</mo></mrow>
<mo stretchy="false">=</mo>
<msup><mi mathvariant='italic'>f</mi>
<mrow><mo stretchy="false">(</mo>
<mn>2</mn>
<mo stretchy="false">)</mo>
</mrow>
</msup>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">*</mo>
<mi mathvariant='italic'>v</mi>
</mrow></math>

<code><font color="blue"><span style='white-space: nowrap'><br/>
<br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
<br/>
namespace&#xA0;{&#xA0;//&#xA0;put&#xA0;this&#xA0;function&#xA0;in&#xA0;the&#xA0;empty&#xA0;namespace<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;f(x)&#xA0;=&#xA0;|x|^2&#xA0;=&#xA0;x[0]^2&#xA0;+&#xA0;...&#xA0;+&#xA0;x[n-1]^2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;template&#xA0;&lt;class&#xA0;Type&gt;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Type&#xA0;f(CppADvector&lt;Type&gt;&#xA0;&amp;x)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;Type&#xA0;sum&#xA0;=&#xA0;0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i&#xA0;=&#xA0;x.size();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;while(i--)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sum&#xA0;+=&#xA0;x[i]&#xA0;*&#xA0;x[i];<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;sum;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;<br/>
}<br/>
<br/>
bool&#xA0;MulTape()&#xA0;<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;initialize&#xA0;test&#xA0;result<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;namespace&#xA0;CppAD;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;so&#xA0;do&#xA0;not&#xA0;need&#xA0;CppAD::<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;AD&lt;double&gt;&#xA0;&#xA0;&#xA0;ADdouble;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;type&#xA0;for&#xA0;one&#xA0;level&#xA0;of&#xA0;taping<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;AD&lt;ADdouble&gt;&#xA0;ADDdouble;&#xA0;&#xA0;&#xA0;//&#xA0;type&#xA0;for&#xA0;two&#xA0;levels&#xA0;of&#xA0;taping<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;5;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;dimension&#xA0;for&#xA0;example<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;i;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;a&#xA0;temporary&#xA0;index&#xA0;variable<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;x(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADdouble&gt;&#xA0;&#xA0;ax(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADDdouble&gt;&#xA0;aax(n);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;value&#xA0;of&#xA0;the&#xA0;independent&#xA0;variables<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ax[i]&#xA0;=&#xA0;x[i]&#xA0;=&#xA0;double(i);&#xA0;&#xA0;//&#xA0;x[i]&#xA0;=&#xA0;i<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(ax);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;ax&#xA0;is&#xA0;indedendent&#xA0;for&#xA0;ADdouble<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;aax[i]&#xA0;=&#xA0;ax[i];&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;track&#xA0;how&#xA0;aax&#xA0;depends&#xA0;on&#xA0;ax<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(aax);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;aax&#xA0;is&#xA0;independent&#xA0;for&#xA0;ADDdouble<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;function<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADDdouble&gt;&#xA0;aaf(1);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;scalar&#xA0;valued&#xA0;fucntion<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;aaf[0]&#xA0;=&#xA0;f(aax);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;has&#xA0;only&#xA0;one&#xA0;component<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;inner&#xA0;function&#xA0;(corresponding&#xA0;to&#xA0;ADDdouble&#xA0;calculation)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;ADdouble&gt;&#xA0;aF(aax,&#xA0;aaf);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;f'(x)&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;p&#xA0;=&#xA0;1;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;order&#xA0;of&#xA0;derivative&#xA0;of&#xA0;aF<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADdouble&gt;&#xA0;aw(1);&#xA0;&#xA0;//&#xA0;weight&#xA0;vector&#xA0;for&#xA0;aF<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;ADdouble&gt;&#xA0;ag(n);&#xA0;&#xA0;//&#xA0;gradient&#xA0;of&#xA0;aF<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;aw[0]&#xA0;=&#xA0;1;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;weighted&#xA0;fucntion&#xA0;is&#xA0;f<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ag&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;aF.Reverse(p,&#xA0;aw);&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;gradient&#xA0;of&#xA0;f<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;outter&#xA0;function&#xA0;(corresponding&#xA0;to&#xA0;ADdouble&#xA0;calculation)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;double&gt;&#xA0;G(ax,&#xA0;ag);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;compute&#xA0;the&#xA0;derivative&#xA0;of&#xA0;f'(x)&#xA0;*&#xA0;v<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;v(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;double&gt;&#xA0;dgv(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;v[i]&#xA0;=&#xA0;double(n&#xA0;-&#xA0;i);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dgv&#xA0;=&#xA0;G.Reverse(p,&#xA0;v);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;f(x)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;x[0]^2&#xA0;+&#xA0;x[1]^2&#xA0;+&#xA0;...&#xA0;+&#xA0;x[n-1]^2<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;f'(x)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;2&#xA0;(x[0],&#xA0;x[1],&#xA0;...&#xA0;,&#xA0;x[n-1])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;f'(x)&#xA0;*&#xA0;v&#xA0;=&#xA0;2&#xA0;(&#xA0;x[0]*v[0]&#xA0;+&#xA0;x[1]*v[1]&#xA0;+&#xA0;...&#xA0;+&#xA0;x[n-1]*v[n-1]&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for(i&#xA0;=&#xA0;0;&#xA0;i&#xA0;&lt;&#xA0;n;&#xA0;i++)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;NearEqual(dgv[i],&#xA0;2.*v[i],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: Example/MulTape.cpp

</body>
</html>
