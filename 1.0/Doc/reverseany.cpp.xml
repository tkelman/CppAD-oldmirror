<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Reverse Mode (any Order): Example and Test</title>
<meta name="description" id="description" content="Reverse Mode (any Order): Example and Test"/>
<meta name="keywords" id="keywords" content=" Reverse example test "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_reverseany.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="reverseany.xml" target="_top">Prev</a>
</td><td><a href="hestimesdir.cpp.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down4(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>SeqProperty</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Reverse-&gt;</option>
<option>ReverseOne</option>
<option>ReverseAny</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ReverseAny-&gt;</option>
<option>ReverseAny.cpp</option>
<option>HesTimesDir.cpp</option>
</select>
</td>
<td>ReverseAny.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>Reverse Mode (any Order): Example and Test</big></big></b></center>
<code><font color="blue"><span style='white-space: nowrap'><br/>
#&#xA0;include&#xA0;&lt;CppAD/CppAD.h&gt;<br/>
namespace&#xA0;{&#xA0;//&#xA0;----------------------------------------------------------<br/>
//&#xA0;define&#xA0;the&#xA0;template&#xA0;function&#xA0;ReverseAnyCases&lt;Vector&gt;&#xA0;in&#xA0;empty&#xA0;namespace<br/>
template&#xA0;&lt;typename&#xA0;Vector&gt;&#xA0;<br/>
bool&#xA0;ReverseAnyCases(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::AD;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;using&#xA0;CppAD::NearEqual;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;domain&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;n&#xA0;=&#xA0;2;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;X(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[0]&#xA0;=&#xA0;0.;&#xA0;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;X[1]&#xA0;=&#xA0;1.;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;declare&#xA0;independent&#xA0;variables&#xA0;and&#xA0;start&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::Independent(X);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;range&#xA0;space&#xA0;vector<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;size_t&#xA0;m&#xA0;=&#xA0;1;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppADvector&lt;&#xA0;AD&lt;double&gt;&#xA0;&gt;&#xA0;Y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Y[0]&#xA0;=&#xA0;X[0]&#xA0;*&#xA0;X[0]&#xA0;*&#xA0;X[1];<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;create&#xA0;f&#xA0;:&#xA0;X&#xA0;-&gt;&#xA0;Y&#xA0;and&#xA0;stop&#xA0;recording<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CppAD::ADFun&lt;double&gt;&#xA0;f(X,&#xA0;Y);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;zero&#xA0;order&#xA0;forward&#xA0;mode&#xA0;to&#xA0;evaluate&#xA0;y&#xA0;at&#xA0;x&#xA0;=&#xA0;(3,&#xA0;4)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;the&#xA0;template&#xA0;parameter&#xA0;Vector&#xA0;for&#xA0;the&#xA0;vector&#xA0;type<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;x(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;y(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[0]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;3.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;x[1]&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;4.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(0,&#xA0;x);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(y[0]&#xA0;,&#xA0;x[0]*x[0]*x[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;first&#xA0;order&#xA0;reverse&#xA0;mode&#xA0;to&#xA0;evaluate&#xA0;derivative&#xA0;of&#xA0;y[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;w(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;dw(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;w[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dw&#xA0;&#xA0;&#xA0;=&#xA0;f.Reverse(1,&#xA0;w);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[0]&#xA0;,&#xA0;2.*x[0]*x[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dw[1]&#xA0;,&#xA0;&#xA0;&#xA0;&#xA0;x[0]*x[0],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;apply&#xA0;first&#xA0;order&#xA0;forward&#xA0;mode&#xA0;in&#xA0;x[0]&#xA0;direction<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;(all&#xA0;second&#xA0;order&#xA0;partials&#xA0;below&#xA0;involve&#xA0;x[0])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;dx(n);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;dy(m);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[0]&#xA0;=&#xA0;1.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dx[1]&#xA0;=&#xA0;0.;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dy&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;f.Forward(1,&#xA0;dx);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&#xA0;&amp;=&#xA0;NearEqual(dy[0],&#xA0;2.*x[0]*x[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;use&#xA0;second&#xA0;order&#xA0;reverse&#xA0;mode&#xA0;to&#xA0;evalaute&#xA0;second&#xA0;partials&#xA0;of&#xA0;y[0]<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;with&#xA0;respect&#xA0;to&#xA0;(x[0],&#xA0;x[0])&#xA0;and&#xA0;with&#xA0;respect&#xA0;to&#xA0;(x[0],&#xA0;x[1])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Vector&#xA0;ddw(&#xA0;2&#xA0;*&#xA0;n&#xA0;);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ddw&#xA0;&#xA0;=&#xA0;f.Reverse(2,&#xA0;w);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;that&#xA0;first&#xA0;order&#xA0;result&#xA0;is&#xA0;part&#xA0;of&#xA0;second&#xA0;order&#xA0;result<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(ddw[0&#xA0;*&#xA0;2&#xA0;+&#xA0;0]&#xA0;,&#xA0;dw[0],&#xA0;1e-10,&#xA0;1e-10);<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(ddw[1&#xA0;*&#xA0;2&#xA0;+&#xA0;0]&#xA0;,&#xA0;dw[1],&#xA0;1e-10,&#xA0;1e-10);<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;partial&#xA0;of&#xA0;y[0]&#xA0;w.r.t&#xA0;(x[0],&#xA0;x[0])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(ddw[0&#xA0;*&#xA0;2&#xA0;+&#xA0;1]&#xA0;,&#xA0;2.*x[1],&#xA0;1e-10,&#xA0;1e-10);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;check&#xA0;partial&#xA0;of&#xA0;y[0]&#xA0;w.r.t&#xA0;(x[0],&#xA0;x[1])<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&#xA0;&amp;=&#xA0;NearEqual(ddw[1&#xA0;*&#xA0;2&#xA0;+&#xA0;1]&#xA0;,&#xA0;2.*x[0],&#xA0;1e-10,&#xA0;1e-10);&#xA0;<br/>
<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
}&#xA0;//&#xA0;End&#xA0;empty&#xA0;namespace&#xA0;<br/>
#&#xA0;include&#xA0;&lt;vector&gt;<br/>
#&#xA0;include&#xA0;&lt;valarray&gt;<br/>
bool&#xA0;ReverseAny(void)<br/>
{&#xA0;&#xA0;&#xA0;&#xA0;bool&#xA0;ok&#xA0;=&#xA0;true;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;ReverseAnyCases&lt;&#xA0;CppAD::vector&#xA0;&#xA0;&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;ReverseAnyCases&lt;&#xA0;std::vector&#xA0;&#xA0;&#xA0;&#xA0;&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ok&#xA0;&amp;=&#xA0;ReverseAnyCases&lt;&#xA0;std::valarray&#xA0;&#xA0;&lt;double&gt;&#xA0;&gt;();<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ok;<br/>
}<br/>
</span></font></code>
<hr/>Input File: Example/ReverseAny.cpp

</body>
</html>
