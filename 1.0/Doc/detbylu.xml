<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Determinant Using Lu Factorization</title>
<meta name="description" id="description" content="Determinant Using Lu Factorization"/>
<meta name="keywords" id="keywords" content=" determinant Lu factor "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_detbylu_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="detbyminor.h.xml" target="_top">Prev</a>
</td><td><a href="detbylu.cpp.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>CppADvector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ExampleUtility-&gt;</option>
<option>Example.cpp</option>
<option>DetOfMinor</option>
<option>DetOfMinor.h</option>
<option>DetByMinor</option>
<option>DetByMinor.h</option>
<option>DetByLu</option>
<option>DetByLu.h</option>
<option>LuVecAD</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>DetByLu-&gt;</option>
<option>DetByLu.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Inclusion</option>
<option>Constructor</option>
<option>Evaluation</option>
<option>Complex Types</option>
<option>Example</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Determinant Using Lu Factorization</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<b>Syntax</b>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <code><font color="blue"><span style='white-space: nowrap'>#&#xA0;include&#xA0;&quot;Example/DetByLu.h&quot;</span></font></code>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <code><font color="blue"><span style='white-space: nowrap'>DetByLu&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Det</span></i><code><font color="blue"><span style='white-space: nowrap'>(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <code><font color="blue"></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>Det</span></i><code><font color="blue"><span style='white-space: nowrap'>(CppADvector&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <code><font color="blue"><span style='white-space: nowrap'>typedef&#xA0;std::complex&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex;</span></font></code>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <code><font color="blue"><span style='white-space: nowrap'>typedef&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADComplex;</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="Inclusion" id="Inclusion">Inclusion</a></big></b>
<br/>
The template class <code><font color="blue">DetByLu</font></code> is defined in the <code><font color="blue">CppAD</font></code>
namespace by including 
the file <code><font color="blue">Example/DetByLu.h</font></code>.
It is only intended for example and testing purposes, 
so it is not automatically included by
<a href="cppad.xml" target="_top"><span style='white-space: nowrap'>CppAD.h</span></a>
.

<br/>
<br/>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;DetByLu&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Det</span></i><code><font color="blue"><span style='white-space: nowrap'>(size_t&#xA0;</span></font></code><i><span style='white-space: nowrap'>n</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>constructs the object <i>Det</i> which can be used for 
evaluating the determinant of <i>n</i> by <i>n</i> matrices
using Lu factorization.

<br/>
<br/>
<b><big><a name="Evaluation" id="Evaluation">Evaluation</a></big></b>
<br/>
The syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>Det</span></i><code><font color="blue"><span style='white-space: nowrap'>(CppADvector&lt;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>A</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>returns the determinant of <i>A</i> using expansion by minors.



<br/>
<br/>
<b><big><a name="Complex Types" id="Complex Types">Complex Types</a></big></b>
<br/>
The complex data types <code><font color="blue">Complex</font></code> and <code><font color="blue">ADComplex</font></code>
are defined by
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;std::complex&lt;double&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Complex;<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;typedef&#xA0;CppAD::AD&lt;Complex&gt;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADComplex;<br/>
</span></font></code>These are used to specialize the template functions
<code><font color="blue">LeqZero</font></code> and <code><font color="blue">AbsGeq</font></code> so they can be used
by <a href="lusolve.xml" target="_top"><span style='white-space: nowrap'>LuSolve</span></a>
 with the <code><font color="blue">Complex</font></code> and <code><font color="blue">ADComplex</font></code>
types.

<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br/>
The file
<a href="detbylu.cpp.xml" target="_top"><span style='white-space: nowrap'>DetByLu.cpp</span></a>
 
contains an example and a test of <code><font color="blue">DetByLu.h</font></code>.
It returns true if it succeeds and false otherwise.

<br/>
<br/>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br/>
The file
<a href="detbylu.h.xml" target="_top"><span style='white-space: nowrap'>DetByLu.h</span></a>
 
contains the source for this template function.



<hr/>Input File: Example/DetByLu.h

</body>
</html>
