<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>List of All the CppAD Examples</title>
<meta name="description" id="description" content="List of All the CppAD Examples"/>
<meta name="keywords" id="keywords" content=" "/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_listallexamples_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="luvecadok.cpp.xml" target="_top">Prev</a>
</td><td><a href="cppadvector.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>CppADvector</option>
</select>
</td>
<td>ListAllExamples</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>List of All the CppAD Examples</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<a href="abs.cpp.xml" target="_top">Abs.cpp</a></td><td>
AD Absolute Value Function: Example and Test</td></tr>
<tr><td>
<a href="acos.cpp.xml" target="_top">Acos.cpp</a></td><td>
The AD acos Function: Example and Test</td></tr>
<tr><td>
<a href="add.cpp.xml" target="_top">Add.cpp</a></td><td>
AD Binary Addition: Example and Test</td></tr>
<tr><td>
<a href="addeq.cpp.xml" target="_top">AddEq.cpp</a></td><td>
AD Computed Assignment Addition: Example and Test</td></tr>
<tr><td>
<a href="asin.cpp.xml" target="_top">Asin.cpp</a></td><td>
The AD asin Function: Example and Test</td></tr>
<tr><td>
<a href="atan.cpp.xml" target="_top">Atan.cpp</a></td><td>
The AD atan Function: Example and Test</td></tr>
<tr><td>
<a href="atan2.cpp.xml" target="_top">Atan2.cpp</a></td><td>
The AD atan2 Function: Example and Test</td></tr>
<tr><td>
<a href="benderquad.cpp.xml" target="_top">BenderQuad.cpp</a></td><td>
BenderQuad: Example and Test</td></tr>
<tr><td>
<a href="boolfun.cpp.xml" target="_top">BoolFun.cpp</a></td><td>
AD Boolean Functions: Example and Test</td></tr>
<tr><td>
<a href="checknumerictype.cpp.xml" target="_top">CheckNumericType.cpp</a></td><td>
The CheckNumericType Function: Example and Test</td></tr>
<tr><td>
<a href="checksimplevector.cpp.xml" target="_top">CheckSimpleVector.cpp</a></td><td>
The CheckSimpleVector Function: Example and Test</td></tr>
<tr><td>
<a href="compare.cpp.xml" target="_top">Compare.cpp</a></td><td>
AD Binary Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="comparechange.cpp.xml" target="_top">CompareChange.cpp</a></td><td>
CompareChange and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="complexpoly.cpp.xml" target="_top">ComplexPoly.cpp</a></td><td>
Complex Polynomial: Example and Test</td></tr>
<tr><td>
<a href="condexp.cpp.xml" target="_top">CondExp.cpp</a></td><td>
Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="copyad.cpp.xml" target="_top">CopyAD.cpp</a></td><td>
AD Copy Constructor: Example and Test</td></tr>
<tr><td>
<a href="copybase.cpp.xml" target="_top">CopyBase.cpp</a></td><td>
AD Constructor From Base Type: Example and Test</td></tr>
<tr><td>
<a href="cos.cpp.xml" target="_top">Cos.cpp</a></td><td>
The AD cos Function: Example and Test</td></tr>
<tr><td>
<a href="cosh.cpp.xml" target="_top">Cosh.cpp</a></td><td>
The AD cosh Function: Example and Test</td></tr>
<tr><td>
<a href="cppad_vector.cpp.xml" target="_top">CppAD_vector.cpp</a></td><td>
CppAD::vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="default.cpp.xml" target="_top">Default.cpp</a></td><td>
Default AD Constructor: Example and Test</td></tr>
<tr><td>
<a href="detbylu.cpp.xml" target="_top">DetByLu.cpp</a></td><td>
Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="detbyminor.cpp.xml" target="_top">DetByMinor.cpp</a></td><td>
Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="detofminor.cpp.xml" target="_top">DetOfMinor.cpp</a></td><td>
Determinant of a Minor: Example and Test</td></tr>
<tr><td>
<a href="discrete.cpp.xml" target="_top">Discrete.cpp</a></td><td>
Discrete AD Functions: Example and Test</td></tr>
<tr><td>
<a href="div.cpp.xml" target="_top">Div.cpp</a></td><td>
AD Binary Division: Example and Test</td></tr>
<tr><td>
<a href="diveq.cpp.xml" target="_top">DivEq.cpp</a></td><td>
AD Computed Assignment Division: Example and Test</td></tr>
<tr><td>
<a href="eq.cpp.xml" target="_top">Eq.cpp</a></td><td>
AD Assignment Operator: Example and Test</td></tr>
<tr><td>
<a href="erf.cpp.xml" target="_top">Erf.cpp</a></td><td>
The AD erf Function: Example and Test</td></tr>
<tr><td>
<a href="errorhandler.cpp.xml" target="_top">ErrorHandler.cpp</a></td><td>
Replacing The CppAD Error Handler: Example and Test</td></tr>
<tr><td>
<a href="example.cpp.xml" target="_top">Example.cpp</a></td><td>
Program That Runs all the CppAD Example</td></tr>
<tr><td>
<a href="exp.cpp.xml" target="_top">Exp.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="forone.cpp.xml" target="_top">ForOne.cpp</a></td><td>
First Order Partial Driver: Example and Test</td></tr>
<tr><td>
<a href="fortwo.cpp.xml" target="_top">ForTwo.cpp</a></td><td>
Subset of Second Order Partials: Example and Test</td></tr>
<tr><td>
<a href="forward.cpp.xml" target="_top">Forward.cpp</a></td><td>
Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="forsparsejac.cpp.xml" target="_top">ForSparseJac.cpp</a></td><td>
Forward Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="funcheck.cpp.xml" target="_top">FunCheck.cpp</a></td><td>
ADFun Check and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="getstarted.cpp.xml" target="_top">GetStarted.cpp</a></td><td>
Getting Started Using CppAD</td></tr>
<tr><td>
<a href="hesludet.cpp.xml" target="_top">HesLuDet.cpp</a></td><td>
Gradient of Determinant Using LU Factorization: Example and Test</td></tr>
<tr><td>
<a href="hesminordet.cpp.xml" target="_top">HesMinorDet.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="hestimesdir.cpp.xml" target="_top">HesTimesDir.cpp</a></td><td>
Hessian Times Direction: Example and Test</td></tr>
<tr><td>
<a href="hessian.cpp.xml" target="_top">Hessian.cpp</a></td><td>
Hessian: Example and Test</td></tr>
<tr><td>
<a href="independent.cpp.xml" target="_top">Independent.cpp</a></td><td>
Independent and ADFun Constructor: Example and Test</td></tr>
<tr><td>
<a href="integer.cpp.xml" target="_top">Integer.cpp</a></td><td>
Convert From AD to Integer: Example and Test</td></tr>
<tr><td>
<a href="interface2c.cpp.xml" target="_top">Interface2C.cpp</a></td><td>
Interfacing to C: Example and Test</td></tr>
<tr><td>
<a href="jacludet.cpp.xml" target="_top">JacLuDet.cpp</a></td><td>
Gradient of Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="jacminordet.cpp.xml" target="_top">JacMinorDet.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="jacobian.cpp.xml" target="_top">Jacobian.cpp</a></td><td>
Jacobian: Example and Test</td></tr>
<tr><td>
<a href="log.cpp.xml" target="_top">Log.cpp</a></td><td>
The AD log Function: Example and Test</td></tr>
<tr><td>
<a href="log10.cpp.xml" target="_top">Log10.cpp</a></td><td>
The AD log10 Function: Example and Test</td></tr>
<tr><td>
<a href="lufactor.cpp.xml" target="_top">LuFactor.cpp</a></td><td>
LuFactor: Example and Test</td></tr>
<tr><td>
<a href="luinvert.cpp.xml" target="_top">LuInvert.cpp</a></td><td>
LuInvert: Example and Test</td></tr>
<tr><td>
<a href="luratio.cpp.xml" target="_top">LuRatio.cpp</a></td><td>
LuRatio: Example and Test</td></tr>
<tr><td>
<a href="lusolve.cpp.xml" target="_top">LuSolve.cpp</a></td><td>
LuSolve With Complex Arguments: Example and Test</td></tr>
<tr><td>
<a href="luvecadok.cpp.xml" target="_top">LuVecADOk.cpp</a></td><td>
Lu Factor and Solve With Recorded Pivoting: Example and Test</td></tr>
<tr><td>
<a href="mul.cpp.xml" target="_top">Mul.cpp</a></td><td>
AD Binary Multiplication: Example and Test</td></tr>
<tr><td>
<a href="muleq.cpp.xml" target="_top">MulEq.cpp</a></td><td>
AD Computed Assignment Multiplication: Example and Test</td></tr>
<tr><td>
<a href="multape.cpp.xml" target="_top">Multape.cpp</a></td><td>
Multiple Tapes: Example and Test</td></tr>
<tr><td>
<a href="nearequalext.cpp.xml" target="_top">NearEqualExt.cpp</a></td><td>
Compare AD with Base Objects: Example and Test</td></tr>
<tr><td>
<a href="near_equal.cpp.xml" target="_top">Near_Equal.cpp</a></td><td>
NearEqual Function: Example and Test</td></tr>
<tr><td>
<a href="numerictype.cpp.xml" target="_top">NumericType.cpp</a></td><td>
The NumericType: Example and Test</td></tr>
<tr><td>
<a href="odeerrcontrol.cpp.xml" target="_top">OdeErrControl.cpp</a></td><td>
OdeErrControl: Example and Test</td></tr>
<tr><td>
<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrMaxabs.cpp</a></td><td>
OdeErrControl: Example and Test Using Maxabs Argument</td></tr>
<tr><td>
<a href="odegear.cpp.xml" target="_top">OdeGear.cpp</a></td><td>
OdeGear: Example and Test</td></tr>
<tr><td>
<a href="odegearcontrol.cpp.xml" target="_top">OdeGearControl.cpp</a></td><td>
OdeGearControl: Example and Test</td></tr>
<tr><td>
<a href="odestiff.cpp.xml" target="_top">OdeStiff.cpp</a></td><td>
A Stiff Ode: Example and Test</td></tr>
<tr><td>
<a href="odetaylor.cpp.xml" target="_top">OdeTaylor.cpp</a></td><td>
Taylor's Method Ode Solver: An Example and Test</td></tr>
<tr><td>
<a href="output.cpp.xml" target="_top">Output.cpp</a></td><td>
AD Output Operator: Example and Test</td></tr>
<tr><td>
<a href="parvar.cpp.xml" target="_top">ParVar.cpp</a></td><td>
AD Parameter and Variable Functions: Example and Test</td></tr>
<tr><td>
<a href="piecewise.cpp.xml" target="_top">Piecewise.cpp</a></td><td>
Piecewise Linear Interpolation: Example and Test</td></tr>
<tr><td>
<a href="poly.cpp.xml" target="_top">Poly.cpp</a></td><td>
Polynomial Evaluation: Example and Test</td></tr>
<tr><td>
<a href="pow.cpp.xml" target="_top">Pow.cpp</a></td><td>
The AD Power Function: Example and Test</td></tr>
<tr><td>
<a href="powint.cpp.xml" target="_top">PowInt.cpp</a></td><td>
The Integer Power Function: Example and Test</td></tr>
<tr><td>
<a href="revone.cpp.xml" target="_top">RevOne.cpp</a></td><td>
First Order Derivative Driver: Example and Test</td></tr>
<tr><td>
<a href="revsparsehes.cpp.xml" target="_top">RevSparseHes.cpp</a></td><td>
Reverse Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="revsparsejac.cpp.xml" target="_top">RevSparseJac.cpp</a></td><td>
Reverse Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="revtwo.cpp.xml" target="_top">RevTwo.cpp</a></td><td>
Second Partials Reverse Driver: Example and Test</td></tr>
<tr><td>
<a href="reverseany.cpp.xml" target="_top">ReverseAny.cpp</a></td><td>
Reverse Mode (any Order): Example and Test</td></tr>
<tr><td>
<a href="reverseone.cpp.xml" target="_top">ReverseOne.cpp</a></td><td>
First Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="rombergmul.cpp.xml" target="_top">RombergMul.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="rombergone.cpp.xml" target="_top">RombergOne.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="rosen34.cpp.xml" target="_top">Rosen34.cpp</a></td><td>
Rosen34: Example and Test</td></tr>
<tr><td>
<a href="runge45.cpp.xml" target="_top">Runge45.cpp</a></td><td>
Runge45: Example and Test</td></tr>
<tr><td>
<a href="seqproperty.cpp.xml" target="_top">SeqProperty.cpp</a></td><td>
ADFun Sequence Properties: Example and Test</td></tr>
<tr><td>
<a href="simplevector.cpp.xml" target="_top">SimpleVector.cpp</a></td><td>
Simple Vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="sin.cpp.xml" target="_top">Sin.cpp</a></td><td>
The AD sin Function: Example and Test</td></tr>
<tr><td>
<a href="sinh.cpp.xml" target="_top">Sinh.cpp</a></td><td>
The AD sinh Function: Example and Test</td></tr>
<tr><td>
<a href="sqrt.cpp.xml" target="_top">Sqrt.cpp</a></td><td>
The AD sqrt Function: Example and Test</td></tr>
<tr><td>
<a href="sub.cpp.xml" target="_top">Sub.cpp</a></td><td>
AD Binary Subtraction: Example and Test</td></tr>
<tr><td>
<a href="subeq.cpp.xml" target="_top">SubEq.cpp</a></td><td>
AD Computed Assignment Subtraction: Example and Test</td></tr>
<tr><td>
<a href="tan.cpp.xml" target="_top">Tan.cpp</a></td><td>
The AD tan Function: Example and Test</td></tr>
<tr><td>
<a href="tracknewdel.cpp.xml" target="_top">TrackNewDel.cpp</a></td><td>
Tracking Use of New and Delete: Example and Test</td></tr>
<tr><td>
<a href="unaryminus.cpp.xml" target="_top">UnaryMinus.cpp</a></td><td>
AD Unary Minus Operator: Example and Test</td></tr>
<tr><td>
<a href="unaryplus.cpp.xml" target="_top">UnaryPlus.cpp</a></td><td>
AD Unary Plus Operator: Example and Test</td></tr>
<tr><td>
<a href="value.cpp.xml" target="_top">Value.cpp</a></td><td>
Convert From AD to its Base Type: Example and Test</td></tr>
<tr><td>
<a href="vecad.cpp.xml" target="_top">VecAD.cpp</a></td><td>
AD Vectors that Record Index Operations: Example and Test</td></tr>
<tr><td>
<a href="vectorbool.cpp.xml" target="_top">vectorBool.cpp</a></td><td>
CppAD::vectorBool Class: Example and Test</td></tr>
<tr><td>
</td></tr>
</table>

<hr/>Input File: omh/ExampleList.omh

</body>
</html>
