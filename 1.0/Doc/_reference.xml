<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Alphabetic Listing of Cross Reference Tags</title>
<meta name="description" id="description" content="Alphabetic Listing of Cross Reference Tags"/>
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='__reference_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td><a href="whatsnew03.xml" target="_top">Prev</a>
</td><td><a href="_index.xml" target="_top">Next</a>
</td><td><a href="cppad.xml" target="_top">Top</a>
</td><td>
<select onchange='choose_down1(this)'>
<option>CppAD-&gt;</option>
<option>License</option>
<option>Faq</option>
<option>Install</option>
<option>GetStarted.cpp</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>_reference</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>A</option>
<option>B</option>
<option>C</option>
<option>D</option>
<option>E</option>
<option>F</option>
<option>G</option>
<option>H</option>
<option>I</option>
<option>J</option>
<option>L</option>
<option>M</option>
<option>N</option>
<option>O</option>
<option>P</option>
<option>R</option>
<option>S</option>
<option>T</option>
<option>U</option>
<option>V</option>
<option>W</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Alphabetic Listing of Cross Reference Tags</big></big></b></center>
<table>
<tr valign="top"><td>

<b><big><a name="A">A</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="abs.xml" target="_top">abs</a><br/> </td><td> AD Absolute Value Function </td></tr><tr valign="top"><td>
<a href="abs.cpp.xml" target="_top">Abs.cpp</a><br/> </td><td> AD Absolute Value Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acos.cpp.xml" target="_top">Acos.cpp</a><br/> </td><td> The AD acos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acosforward.xml" target="_top">AcosForward</a><br/> </td><td> Arccosine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="acosreverse.xml" target="_top">AcosReverse</a><br/> </td><td> Arccosine Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="ad.xml" target="_top">AD</a><br/> </td><td> AD Objects </td></tr><tr valign="top"><td>
<a href="add.xml" target="_top">Add</a><br/> </td><td> AD Binary Addition Operator </td></tr><tr valign="top"><td>
<a href="add.cpp.xml" target="_top">Add.cpp</a><br/> </td><td> AD Binary Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="addeq.xml" target="_top">AddEq</a><br/> </td><td> AD Computed Assignment Addition Operator </td></tr><tr valign="top"><td>
<a href="addeq.cpp.xml" target="_top">AddEq.cpp</a><br/> </td><td> AD Computed Assignment Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="adfun.xml" target="_top">ADFun</a><br/> </td><td> ADFun Objects </td></tr><tr valign="top"><td>
<a href="adolc.xml" target="_top">Adolc</a><br/> </td><td> Routines for Comparing CppAD with Adolc </td></tr><tr valign="top"><td>
<a href="advalued.xml" target="_top">ADValued</a><br/> </td><td> AD Valued Operations and Functions </td></tr><tr valign="top"><td>
<a href="appendix.xml" target="_top">Appendix</a><br/> </td><td> Appendix </td></tr><tr valign="top"><td>
<a href="arithmetic.xml" target="_top">Arithmetic</a><br/> </td><td> AD Arithmetic Operators and Computed Assignments </td></tr><tr valign="top"><td>
<a href="asin.cpp.xml" target="_top">Asin.cpp</a><br/> </td><td> The AD asin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="asinforward.xml" target="_top">AsinForward</a><br/> </td><td> Arcsine Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="asinreverse.xml" target="_top">AsinReverse</a><br/> </td><td> Arcsine Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="atan.cpp.xml" target="_top">Atan.cpp</a><br/> </td><td> The AD atan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atan2.xml" target="_top">atan2</a><br/> </td><td> AD Two Argument Inverse Tangent Function </td></tr><tr valign="top"><td>
<a href="atan2.cpp.xml" target="_top">Atan2.cpp</a><br/> </td><td> The AD atan2 Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atanforward.xml" target="_top">AtanForward</a><br/> </td><td> Arctangent Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="atanreverse.xml" target="_top">AtanReverse</a><br/> </td><td> Arctangent Function Reverse Mode Theory </td></tr><tr valign="top"><td>

<b><big><a name="B">B</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="benderquad.xml" target="_top">BenderQuad</a><br/> </td><td> Computing Jacobian and Hessian of Bender's Reduced Objective </td></tr><tr valign="top"><td>
<a href="benderquad.cpp.xml" target="_top">BenderQuad.cpp</a><br/> </td><td> BenderQuad: Example and Test </td></tr><tr valign="top"><td>
<a href="bib.xml" target="_top">Bib</a><br/> </td><td> Bibliography </td></tr><tr valign="top"><td>
<a href="boolfun.xml" target="_top">BoolFun</a><br/> </td><td> AD Boolean Functions </td></tr><tr valign="top"><td>
<a href="boolfun.cpp.xml" target="_top">BoolFun.cpp</a><br/> </td><td> AD Boolean Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="boolvalued.xml" target="_top">BoolValued</a><br/> </td><td> Bool Valued Operations and Functions with AD Arguments </td></tr><tr valign="top"><td>
<a href="bugs.xml" target="_top">Bugs</a><br/> </td><td> Know Bugs and Problems Using CppAD </td></tr><tr valign="top"><td>

<b><big><a name="C">C</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="capacity_taylor.xml" target="_top">capacity_taylor</a><br/> </td><td> Controlling Taylor Coefficients Memory Allocation </td></tr><tr valign="top"><td>
<a href="checknumerictype.xml" target="_top">CheckNumericType</a><br/> </td><td> Check NumericType Class Concept </td></tr><tr valign="top"><td>
<a href="checknumerictype.cpp.xml" target="_top">CheckNumericType.cpp</a><br/> </td><td> The CheckNumericType Function: Example and Test </td></tr><tr valign="top"><td>
<a href="checksimplevector.xml" target="_top">CheckSimpleVector</a><br/> </td><td> Check Simple Vector Concept </td></tr><tr valign="top"><td>
<a href="checksimplevector.cpp.xml" target="_top">CheckSimpleVector.cpp</a><br/> </td><td> The CheckSimpleVector Function: Example and Test </td></tr><tr valign="top"><td>
<a href="compare.xml" target="_top">Compare</a><br/> </td><td> AD Binary Comparison Operators </td></tr><tr valign="top"><td>
<a href="compare.cpp.xml" target="_top">Compare.cpp</a><br/> </td><td> AD Binary Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="comparechange.xml" target="_top">CompareChange</a><br/> </td><td> Comparison Changes During Zero Order Forward Mode </td></tr><tr valign="top"><td>
<a href="comparechange.cpp.xml" target="_top">CompareChange.cpp</a><br/> </td><td> CompareChange and Re-Tape: Example and Test </td></tr><tr valign="top"><td>
<a href="complexpoly.cpp.xml" target="_top">ComplexPoly.cpp</a><br/> </td><td> Complex Polynomial: Example and Test </td></tr><tr valign="top"><td>
<a href="condexp.xml" target="_top">CondExp</a><br/> </td><td> AD Conditional Expressions </td></tr><tr valign="top"><td>
<a href="condexp.cpp.xml" target="_top">CondExp.cpp</a><br/> </td><td> Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="constructor.xml" target="_top">Constructor</a><br/> </td><td> AD Constructors </td></tr><tr valign="top"><td>
<a href="convert.xml" target="_top">Convert</a><br/> </td><td> Conversion and Printing of AD Objects </td></tr><tr valign="top"><td>
<a href="copyad.xml" target="_top">CopyAD</a><br/> </td><td> AD Copy Constructor </td></tr><tr valign="top"><td>
<a href="copyad.cpp.xml" target="_top">CopyAD.cpp</a><br/> </td><td> AD Copy Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="copybase.xml" target="_top">CopyBase</a><br/> </td><td> AD From Base Type Constructor </td></tr><tr valign="top"><td>
<a href="copybase.cpp.xml" target="_top">CopyBase.cpp</a><br/> </td><td> AD Constructor From Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="cos.cpp.xml" target="_top">Cos.cpp</a><br/> </td><td> The AD cos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cosh.cpp.xml" target="_top">Cosh.cpp</a><br/> </td><td> The AD cosh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cppad.xml" target="_top">CppAD</a><br/> </td><td> A Package for Differentiation of C++ Algorithms: CppAD-1.0 </td></tr><tr valign="top"><td>
<a href="cppad_vector.xml" target="_top">CppAD_vector</a><br/> </td><td> The CppAD::vector Template Class </td></tr><tr valign="top"><td>
<a href="cppad_vector.cpp.xml" target="_top">CppAD_vector.cpp</a><br/> </td><td> CppAD::vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="cppadvector.xml" target="_top">CppADvector</a><br/> </td><td> Choosing The CppADvector Template Class </td></tr><tr valign="top"><td>

<b><big><a name="D">D</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="default.xml" target="_top">Default</a><br/> </td><td> AD Default Constructor </td></tr><tr valign="top"><td>
<a href="default.cpp.xml" target="_top">Default.cpp</a><br/> </td><td> Default AD Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="dependent.xml" target="_top">Dependent</a><br/> </td><td> Stop Recording and Store Operation Sequence </td></tr><tr valign="top"><td>
<a href="detbylu.xml" target="_top">DetByLu</a><br/> </td><td> Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="detbylu.cpp.xml" target="_top">DetByLu.cpp</a><br/> </td><td> Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="detbylu.h.xml" target="_top">DetByLu.h</a><br/> </td><td> Determinant using Lu Factorization: Source Code </td></tr><tr valign="top"><td>
<a href="detbyminor.xml" target="_top">DetByMinor</a><br/> </td><td> Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="detbyminor.cpp.xml" target="_top">DetByMinor.cpp</a><br/> </td><td> Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="detbyminor.h.xml" target="_top">DetByMinor.h</a><br/> </td><td> Determinant using Expansion by Minors: Source Code </td></tr><tr valign="top"><td>
<a href="detluadolc.cpp.xml" target="_top">DetLuAdolc.cpp</a><br/> </td><td> Adolc &amp; CppAD Gradient of Determinant by Lu Factorization </td></tr><tr valign="top"><td>
<a href="detlufadbad.cpp.xml" target="_top">DetLuFadbad.cpp</a><br/> </td><td> Fadbad &amp; CppAD Gradient of Determinant by Lu Factorization </td></tr><tr valign="top"><td>
<a href="detluspeed.cpp.xml" target="_top">DetLuSpeed.cpp</a><br/> </td><td> Determinant by Lu Factor and Solve: Speed Test </td></tr><tr valign="top"><td>
<a href="detminoradolc.cpp.xml" target="_top">DetMinorAdolc.cpp</a><br/> </td><td> Adolc &amp; CppAD Gradient of Determinant by Minors </td></tr><tr valign="top"><td>
<a href="detminorfadbad.cpp.xml" target="_top">DetMinorFadbad.cpp</a><br/> </td><td> Fadbad &amp; CppAD Gradient of Determinant by Minors </td></tr><tr valign="top"><td>
<a href="detminorspeed.cpp.xml" target="_top">DetMinorSpeed.cpp</a><br/> </td><td> Determinant Using Expansion by Minors: Speed Test </td></tr><tr valign="top"><td>
<a href="detofminor.xml" target="_top">DetOfMinor</a><br/> </td><td> Compute the Determinant of a Minor </td></tr><tr valign="top"><td>
<a href="detofminor.cpp.xml" target="_top">DetOfMinor.cpp</a><br/> </td><td> Determinant of a Minor: Example and Test </td></tr><tr valign="top"><td>
<a href="detofminor.h.xml" target="_top">DetOfMinor.h</a><br/> </td><td> Compute the Determinant of a Minor: Source Code </td></tr><tr valign="top"><td>
<a href="discrete.xml" target="_top">Discrete</a><br/> </td><td> Discrete AD Functions </td></tr><tr valign="top"><td>
<a href="discrete.cpp.xml" target="_top">Discrete.cpp</a><br/> </td><td> Discrete AD Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="div.xml" target="_top">Div</a><br/> </td><td> AD Binary Division Operator </td></tr><tr valign="top"><td>
<a href="div.cpp.xml" target="_top">Div.cpp</a><br/> </td><td> AD Binary Division: Example and Test </td></tr><tr valign="top"><td>
<a href="diveq.xml" target="_top">DivEq</a><br/> </td><td> AD Computed Assignment Division Operator </td></tr><tr valign="top"><td>
<a href="diveq.cpp.xml" target="_top">DivEq.cpp</a><br/> </td><td> AD Computed Assignment Division: Example and Test </td></tr><tr valign="top"><td>
<a href="drivers.xml" target="_top">Drivers</a><br/> </td><td> First and Second Derivatives: Easy Drivers </td></tr><tr valign="top"><td>

<b><big><a name="E">E</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="eq.xml" target="_top">Eq</a><br/> </td><td> AD Assignment Operator </td></tr><tr valign="top"><td>
<a href="eq.cpp.xml" target="_top">Eq.cpp</a><br/> </td><td> AD Assignment Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="erf.xml" target="_top">erf</a><br/> </td><td> The AD Error Function </td></tr><tr valign="top"><td>
<a href="erf.cpp.xml" target="_top">Erf.cpp</a><br/> </td><td> The AD erf Function: Example and Test </td></tr><tr valign="top"><td>
<a href="errorhandler.xml" target="_top">ErrorHandler</a><br/> </td><td> Replacing the CppAD Error Handler </td></tr><tr valign="top"><td>
<a href="errorhandler.cpp.xml" target="_top">ErrorHandler.cpp</a><br/> </td><td> Replacing The CppAD Error Handler: Example and Test </td></tr><tr valign="top"><td>
<a href="example.xml" target="_top">Example</a><br/> </td><td> Examples </td></tr><tr valign="top"><td>
<a href="example.cpp.xml" target="_top">Example.cpp</a><br/> </td><td> Program That Runs all the CppAD Example </td></tr><tr valign="top"><td>
<a href="exampleadolc.cpp.xml" target="_top">ExampleAdolc.cpp</a><br/> </td><td> Compare Adolc and CppAD Results </td></tr><tr valign="top"><td>
<a href="examplefadbad.cpp.xml" target="_top">ExampleFadbad.cpp</a><br/> </td><td> Compare Fadbad and CppAD Results </td></tr><tr valign="top"><td>
<a href="exampleutility.xml" target="_top">ExampleUtility</a><br/> </td><td> Utility Routines used by CppAD Examples </td></tr><tr valign="top"><td>
<a href="exp.cpp.xml" target="_top">Exp.cpp</a><br/> </td><td> The AD exp Function: Example and Test </td></tr><tr valign="top"><td>
<a href="expapx.xml" target="_top">ExpApx</a><br/> </td><td> An Example Exponential Approximation </td></tr><tr valign="top"><td>
<a href="expapx.cpp.xml" target="_top">ExpApx.cpp</a><br/> </td><td> ExpApx: Example and Test </td></tr><tr valign="top"><td>
<a href="expapx.hpp.xml" target="_top">ExpApx.hpp</a><br/> </td><td> An Example Exponential Approximation Source Code </td></tr><tr valign="top"><td>
<a href="expapxad.cpp.xml" target="_top">ExpApxAD.cpp</a><br/> </td><td> ExpApx: Computing Derivatives with CppAD </td></tr><tr valign="top"><td>
<a href="expapxfor.xml" target="_top">ExpApxFor</a><br/> </td><td> An Example Forward Mode Sweep </td></tr><tr valign="top"><td>
<a href="expapxfor.cpp.xml" target="_top">ExpApxFor.cpp</a><br/> </td><td> ExpApx Forward Mode Verification </td></tr><tr valign="top"><td>
<a href="expapxrev.xml" target="_top">ExpApxRev</a><br/> </td><td> An Example Reverse Mode Sweep </td></tr><tr valign="top"><td>
<a href="expapxrev.cpp.xml" target="_top">ExpApxRev.cpp</a><br/> </td><td> ExpApx Reverse Mode Verification </td></tr><tr valign="top"><td>
<a href="expapxseq.xml" target="_top">ExpApxSeq</a><br/> </td><td> An Example Operation Sequence </td></tr><tr valign="top"><td>
<a href="expapxseq.cpp.xml" target="_top">ExpApxSeq.cpp</a><br/> </td><td> ExpApx: Operation Sequence Verification </td></tr><tr valign="top"><td>
<a href="expforward.xml" target="_top">ExpForward</a><br/> </td><td> Exponential Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="expreverse.xml" target="_top">ExpReverse</a><br/> </td><td> Exponential Function Reverse Mode Theory </td></tr><tr valign="top"><td>

<b><big><a name="F">F</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="fadbad.xml" target="_top">Fadbad</a><br/> </td><td> Routines for Comparing CppAD with Fadbad </td></tr><tr valign="top"><td>
<a href="faq.xml" target="_top">Faq</a><br/> </td><td> Frequently Asked Questions and Answers </td></tr><tr valign="top"><td>
<a href="forone.xml" target="_top">ForOne</a><br/> </td><td> First Order Partial Derivative: Driver Routine </td></tr><tr valign="top"><td>
<a href="forone.cpp.xml" target="_top">ForOne.cpp</a><br/> </td><td> First Order Partial Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="forsparsejac.xml" target="_top">ForSparseJac</a><br/> </td><td> Jacobian Sparsity Pattern: Forward Mode </td></tr><tr valign="top"><td>
<a href="forsparsejac.cpp.xml" target="_top">ForSparseJac.cpp</a><br/> </td><td> Forward Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="fortwo.xml" target="_top">ForTwo</a><br/> </td><td> Forward Mode Second Partial Derivative Driver </td></tr><tr valign="top"><td>
<a href="fortwo.cpp.xml" target="_top">ForTwo.cpp</a><br/> </td><td> Subset of Second Order Partials: Example and Test </td></tr><tr valign="top"><td>
<a href="forward.xml" target="_top">Forward</a><br/> </td><td> Forward Mode </td></tr><tr valign="top"><td>
<a href="forward.cpp.xml" target="_top">Forward.cpp</a><br/> </td><td> Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="forwardany.xml" target="_top">ForwardAny</a><br/> </td><td> Any Order Forward Mode </td></tr><tr valign="top"><td>
<a href="forwardone.xml" target="_top">ForwardOne</a><br/> </td><td> First Order Forward Mode: Derivative Values </td></tr><tr valign="top"><td>
<a href="forwardtheory.xml" target="_top">ForwardTheory</a><br/> </td><td> The Theory of Forward Mode </td></tr><tr valign="top"><td>
<a href="forwardzero.xml" target="_top">ForwardZero</a><br/> </td><td> Zero Order Forward Mode: Function Values </td></tr><tr valign="top"><td>
<a href="funcheck.xml" target="_top">FunCheck</a><br/> </td><td> Check an ADFun Sequence of Operations </td></tr><tr valign="top"><td>
<a href="funcheck.cpp.xml" target="_top">FunCheck.cpp</a><br/> </td><td> ADFun Check and Re-Tape: Example and Test </td></tr><tr valign="top"><td>
<a href="funconstruct.xml" target="_top">FunConstruct</a><br/> </td><td> Construct an ADFun Object and Stop Recording </td></tr><tr valign="top"><td>
<a href="fundeprecated.xml" target="_top">FunDeprecated</a><br/> </td><td> ADFun Object Deprecated Member Functions </td></tr><tr valign="top"><td>
<a href="funeval.xml" target="_top">FunEval</a><br/> </td><td> Evaluate ADFun Functions, Derivatives, and Sparsity Patterns </td></tr><tr valign="top"><td>

<b><big><a name="G">G</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="general.xml" target="_top">General</a><br/> </td><td> General Examples </td></tr><tr valign="top"><td>
<a href="getstarted.cpp.xml" target="_top">GetStarted.cpp</a><br/> </td><td> Getting Started Using CppAD </td></tr><tr valign="top"><td>
<a href="glossary.xml" target="_top">glossary</a><br/> </td><td> Glossary </td></tr><tr valign="top"><td>

<b><big><a name="H">H</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="hesludet.cpp.xml" target="_top">HesLuDet.cpp</a><br/> </td><td> Gradient of Determinant Using LU Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="hesminordet.cpp.xml" target="_top">HesMinorDet.cpp</a><br/> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="hessian.xml" target="_top">Hessian</a><br/> </td><td> Hessian: Easy Driver </td></tr><tr valign="top"><td>
<a href="hessian.cpp.xml" target="_top">Hessian.cpp</a><br/> </td><td> Hessian: Example and Test </td></tr><tr valign="top"><td>
<a href="hestimesdir.cpp.xml" target="_top">HesTimesDir.cpp</a><br/> </td><td> Hessian Times Direction: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="I">I</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="independent.xml" target="_top">Independent</a><br/> </td><td> Declare Independent Variables and Start Recording </td></tr><tr valign="top"><td>
<a href="independent.cpp.xml" target="_top">Independent.cpp</a><br/> </td><td> Independent and ADFun Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="install.xml" target="_top">Install</a><br/> </td><td> Installing and Testing CppAD </td></tr><tr valign="top"><td>
<a href="installunix.xml" target="_top">InstallUnix</a><br/> </td><td> Unix Installation and Testing </td></tr><tr valign="top"><td>
<a href="integer.xml" target="_top">Integer</a><br/> </td><td> Convert From AD to Integer </td></tr><tr valign="top"><td>
<a href="integer.cpp.xml" target="_top">Integer.cpp</a><br/> </td><td> Convert From AD to Integer: Example and Test </td></tr><tr valign="top"><td>
<a href="interface2c.cpp.xml" target="_top">Interface2C.cpp</a><br/> </td><td> Interfacing to C: Example and Test </td></tr><tr valign="top"><td>
<a href="introduction.xml" target="_top">Introduction</a><br/> </td><td> An Introduction by Example to Algorithmic Differentiation </td></tr><tr valign="top"><td>
<a href="introduction.cpp.xml" target="_top">Introduction.cpp</a><br/> </td><td> Run the CppAD Introduction Routines </td></tr><tr valign="top"><td>

<b><big><a name="J">J</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="jacludet.cpp.xml" target="_top">JacLuDet.cpp</a><br/> </td><td> Gradient of Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="jacminordet.cpp.xml" target="_top">JacMinorDet.cpp</a><br/> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="jacobian.xml" target="_top">Jacobian</a><br/> </td><td> Jacobian: Driver Routine </td></tr><tr valign="top"><td>
<a href="jacobian.cpp.xml" target="_top">Jacobian.cpp</a><br/> </td><td> Jacobian: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="L">L</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="library.xml" target="_top">library</a><br/> </td><td> The CppAD General Purpose Library </td></tr><tr valign="top"><td>
<a href="license.xml" target="_top">License</a><br/> </td><td> Your License for the CppAD Software </td></tr><tr valign="top"><td>
<a href="listallexamples.xml" target="_top">ListAllExamples</a><br/> </td><td> List of All the CppAD Examples </td></tr><tr valign="top"><td>
<a href="log.cpp.xml" target="_top">Log.cpp</a><br/> </td><td> The AD log Function: Example and Test </td></tr><tr valign="top"><td>
<a href="log10.cpp.xml" target="_top">Log10.cpp</a><br/> </td><td> The AD log10 Function: Example and Test </td></tr><tr valign="top"><td>
<a href="logforward.xml" target="_top">LogForward</a><br/> </td><td> Logarithm Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="logreverse.xml" target="_top">LogReverse</a><br/> </td><td> Logarithm Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="ludetandsolve.xml" target="_top">LuDetAndSolve</a><br/> </td><td> Compute Determinants and Solve Equations by LU Factorization </td></tr><tr valign="top"><td>
<a href="lufactor.xml" target="_top">LuFactor</a><br/> </td><td> LU Factorization of A Square Matrix </td></tr><tr valign="top"><td>
<a href="lufactor.cpp.xml" target="_top">LuFactor.cpp</a><br/> </td><td> LuFactor: Example and Test </td></tr><tr valign="top"><td>
<a href="lufactor.h.xml" target="_top">LuFactor.h</a><br/> </td><td> LuFactor Source Code </td></tr><tr valign="top"><td>
<a href="luinvert.xml" target="_top">LuInvert</a><br/> </td><td> Invert an LU Factored Equation </td></tr><tr valign="top"><td>
<a href="luinvert.cpp.xml" target="_top">LuInvert.cpp</a><br/> </td><td> LuInvert: Example and Test </td></tr><tr valign="top"><td>
<a href="luinvert.h.xml" target="_top">LuInvert.h</a><br/> </td><td> LuInvert Source Code </td></tr><tr valign="top"><td>
<a href="luratio.xml" target="_top">LuRatio</a><br/> </td><td> LU Factorization of A Square Matrix and Stability Calculation </td></tr><tr valign="top"><td>
<a href="luratio.cpp.xml" target="_top">LuRatio.cpp</a><br/> </td><td> LuRatio: Example and Test </td></tr><tr valign="top"><td>
<a href="lusolve.xml" target="_top">LuSolve</a><br/> </td><td> Compute Determinant and Solve Linear Equations </td></tr><tr valign="top"><td>
<a href="lusolve.cpp.xml" target="_top">LuSolve.cpp</a><br/> </td><td> LuSolve With Complex Arguments: Example and Test </td></tr><tr valign="top"><td>
<a href="lusolve.h.xml" target="_top">LuSolve.h</a><br/> </td><td> LuSolve Source Code </td></tr><tr valign="top"><td>
<a href="lusolvespeed.cpp.xml" target="_top">LuSolveSpeed.cpp</a><br/> </td><td> Speed Test Lu Factor and Solve: Example and Test </td></tr><tr valign="top"><td>
<a href="luvecad.xml" target="_top">LuVecAD</a><br/> </td><td> Lu Factor and Solve with Recorded Pivoting </td></tr><tr valign="top"><td>
<a href="luvecadok.cpp.xml" target="_top">LuVecADOk.cpp</a><br/> </td><td> Lu Factor and Solve With Recorded Pivoting: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="M">M</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="mathother.xml" target="_top">MathOther</a><br/> </td><td> Other AD Math Functions </td></tr><tr valign="top"><td>
<a href="mul.xml" target="_top">Mul</a><br/> </td><td> AD Binary Multiplication Operator </td></tr><tr valign="top"><td>
<a href="mul.cpp.xml" target="_top">Mul.cpp</a><br/> </td><td> AD Binary Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="muleq.xml" target="_top">MulEq</a><br/> </td><td> AD Computed Assignment Multiplication Operator </td></tr><tr valign="top"><td>
<a href="muleq.cpp.xml" target="_top">MulEq.cpp</a><br/> </td><td> AD Computed Assignment Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="multape.xml" target="_top">MulTape</a><br/> </td><td> Using Multiple Tapes </td></tr><tr valign="top"><td>
<a href="multape.cpp.xml" target="_top">MulTape.cpp</a><br/> </td><td> Multiple Tapes: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="N">N</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="near_equal.cpp.xml" target="_top">Near_Equal.cpp</a><br/> </td><td> NearEqual Function: Example and Test </td></tr><tr valign="top"><td>
<a href="nearequal.xml" target="_top">NearEqual</a><br/> </td><td> Determine if Two Values Are Nearly Equal </td></tr><tr valign="top"><td>
<a href="nearequalext.xml" target="_top">NearEqualExt</a><br/> </td><td> Compare AD and Base Objects for Nearly Equal </td></tr><tr valign="top"><td>
<a href="nearequalext.cpp.xml" target="_top">NearEqualExt.cpp</a><br/> </td><td> Compare AD with Base Objects: Example and Test </td></tr><tr valign="top"><td>
<a href="numerictype.xml" target="_top">NumericType</a><br/> </td><td> Definition of a Numeric Type </td></tr><tr valign="top"><td>
<a href="numerictype.cpp.xml" target="_top">NumericType.cpp</a><br/> </td><td> The NumericType: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="O">O</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.xml" target="_top">OdeErrControl</a><br/> </td><td> An Error Controller for ODE Solvers </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.cpp.xml" target="_top">OdeErrControl.cpp</a><br/> </td><td> OdeErrControl: Example and Test </td></tr><tr valign="top"><td>
<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrMaxabs.cpp</a><br/> </td><td> OdeErrControl: Example and Test Using Maxabs Argument </td></tr><tr valign="top"><td>
<a href="odegear.xml" target="_top">OdeGear</a><br/> </td><td> An Arbitrary Order Gear Method </td></tr><tr valign="top"><td>
<a href="odegear.cpp.xml" target="_top">OdeGear.cpp</a><br/> </td><td> OdeGear: Example and Test </td></tr><tr valign="top"><td>
<a href="odegearcontrol.xml" target="_top">OdeGearControl</a><br/> </td><td> An Error Controller for Gear's Ode Solvers </td></tr><tr valign="top"><td>
<a href="odegearcontrol.cpp.xml" target="_top">OdeGearControl.cpp</a><br/> </td><td> OdeGearControl: Example and Test </td></tr><tr valign="top"><td>
<a href="odespeed.cpp.xml" target="_top">OdeSpeed.cpp</a><br/> </td><td> ODE Solver: Speed Test </td></tr><tr valign="top"><td>
<a href="odestiff.cpp.xml" target="_top">OdeStiff.cpp</a><br/> </td><td> A Stiff Ode: Example and Test </td></tr><tr valign="top"><td>
<a href="odetaylor.cpp.xml" target="_top">OdeTaylor.cpp</a><br/> </td><td> Taylor's Method Ode Solver: An Example and Test </td></tr><tr valign="top"><td>
<a href="output.xml" target="_top">Output</a><br/> </td><td> AD Output Stream Operator </td></tr><tr valign="top"><td>
<a href="output.cpp.xml" target="_top">Output.cpp</a><br/> </td><td> AD Output Operator: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="P">P</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="parvar.xml" target="_top">ParVar</a><br/> </td><td> Is an AD Object a Parameter or Variable </td></tr><tr valign="top"><td>
<a href="parvar.cpp.xml" target="_top">ParVar.cpp</a><br/> </td><td> AD Parameter and Variable Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="piecewise.cpp.xml" target="_top">Piecewise.cpp</a><br/> </td><td> Piecewise Linear Interpolation: Example and Test </td></tr><tr valign="top"><td>
<a href="poly.xml" target="_top">Poly</a><br/> </td><td> Evaluate a Polynomial or its Derivative </td></tr><tr valign="top"><td>
<a href="poly.cpp.xml" target="_top">Poly.cpp</a><br/> </td><td> Polynomial Evaluation: Example and Test </td></tr><tr valign="top"><td>
<a href="pow.xml" target="_top">pow</a><br/> </td><td> The AD Power Function </td></tr><tr valign="top"><td>
<a href="pow.cpp.xml" target="_top">Pow.cpp</a><br/> </td><td> The AD Power Function: Example and Test </td></tr><tr valign="top"><td>
<a href="powint.xml" target="_top">PowInt</a><br/> </td><td> The Integer Power Function </td></tr><tr valign="top"><td>
<a href="powint.cpp.xml" target="_top">PowInt.cpp</a><br/> </td><td> The Integer Power Function: Example and Test </td></tr><tr valign="top"><td>
<a href="printfor.xml" target="_top">PrintFor</a><br/> </td><td> Printing AD Values During Forward Mode </td></tr><tr valign="top"><td>
<a href="printfor.cpp.xml" target="_top">PrintFor.cpp</a><br/> </td><td> Printing During Forward Mode: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="R">R</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="reverse.xml" target="_top">Reverse</a><br/> </td><td> Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverseany.xml" target="_top">ReverseAny</a><br/> </td><td> Any Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverseany.cpp.xml" target="_top">ReverseAny.cpp</a><br/> </td><td> Reverse Mode (any Order): Example and Test </td></tr><tr valign="top"><td>
<a href="reverseidentity.xml" target="_top">ReverseIdentity</a><br/> </td><td> An Important Reverse Mode Identity </td></tr><tr valign="top"><td>
<a href="reverseone.xml" target="_top">ReverseOne</a><br/> </td><td> First Order Reverse Mode: Derivative Values </td></tr><tr valign="top"><td>
<a href="reverseone.cpp.xml" target="_top">ReverseOne.cpp</a><br/> </td><td> First Order Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="reversetheory.xml" target="_top">ReverseTheory</a><br/> </td><td> The Theory of Reverse Mode </td></tr><tr valign="top"><td>
<a href="revone.xml" target="_top">RevOne</a><br/> </td><td> First Order Derivative: Driver Routine </td></tr><tr valign="top"><td>
<a href="revone.cpp.xml" target="_top">RevOne.cpp</a><br/> </td><td> First Order Derivative Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="revsparsehes.xml" target="_top">RevSparseHes</a><br/> </td><td> Hessian Sparsity Pattern: Reverse Mode </td></tr><tr valign="top"><td>
<a href="revsparsehes.cpp.xml" target="_top">RevSparseHes.cpp</a><br/> </td><td> Reverse Mode Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="revsparsejac.xml" target="_top">RevSparseJac</a><br/> </td><td> Jacobian Sparsity Pattern: Reverse Mode </td></tr><tr valign="top"><td>
<a href="revsparsejac.cpp.xml" target="_top">RevSparseJac.cpp</a><br/> </td><td> Reverse Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="revtwo.xml" target="_top">RevTwo</a><br/> </td><td> Reverse Mode Second Partial Derivative Driver </td></tr><tr valign="top"><td>
<a href="revtwo.cpp.xml" target="_top">RevTwo.cpp</a><br/> </td><td> Second Partials Reverse Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="rombergmul.xml" target="_top">RombergMul</a><br/> </td><td> Multi-dimensional Romberg Integration </td></tr><tr valign="top"><td>
<a href="rombergmul.cpp.xml" target="_top">RombergMul.cpp</a><br/> </td><td> One Dimensional Romberg Integration: Example and Test </td></tr><tr valign="top"><td>
<a href="rombergone.xml" target="_top">RombergOne</a><br/> </td><td> One DimensionalRomberg Integration </td></tr><tr valign="top"><td>
<a href="rombergone.cpp.xml" target="_top">RombergOne.cpp</a><br/> </td><td> One Dimensional Romberg Integration: Example and Test </td></tr><tr valign="top"><td>
<a href="rosen34.xml" target="_top">Rosen34</a><br/> </td><td> A 3rd and 4th Order Rosenbrock ODE Solver </td></tr><tr valign="top"><td>
<a href="rosen34.cpp.xml" target="_top">Rosen34.cpp</a><br/> </td><td> Rosen34: Example and Test </td></tr><tr valign="top"><td>
<a href="runge45.xml" target="_top">Runge45</a><br/> </td><td> An Embedded 4th and 5th Order Runge-Kutta ODE Solver </td></tr><tr valign="top"><td>
<a href="runge45.cpp.xml" target="_top">Runge45.cpp</a><br/> </td><td> Runge45: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="S">S</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="seqproperty.xml" target="_top">SeqProperty</a><br/> </td><td> ADFun Sequence Properties </td></tr><tr valign="top"><td>
<a href="seqproperty.cpp.xml" target="_top">SeqProperty.cpp</a><br/> </td><td> ADFun Sequence Properties: Example and Test </td></tr><tr valign="top"><td>
<a href="simplevector.xml" target="_top">SimpleVector</a><br/> </td><td> Definition of a Simple Vector </td></tr><tr valign="top"><td>
<a href="simplevector.cpp.xml" target="_top">SimpleVector.cpp</a><br/> </td><td> Simple Vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="sin.cpp.xml" target="_top">Sin.cpp</a><br/> </td><td> The AD sin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sincosforward.xml" target="_top">SinCosForward</a><br/> </td><td> Trigonometric and Hyperbolic Sine and Cosine Forward Theory </td></tr><tr valign="top"><td>
<a href="sincosreverse.xml" target="_top">SinCosReverse</a><br/> </td><td> Trigonometric and Hyperbolic Sine and Cosine Reverse Theory </td></tr><tr valign="top"><td>
<a href="sinh.cpp.xml" target="_top">Sinh.cpp</a><br/> </td><td> The AD sinh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="size_taylor.xml" target="_top">size_taylor</a><br/> </td><td> Number Taylor Coefficients, Per Variable, Currently Stored </td></tr><tr valign="top"><td>
<a href="sparse.xml" target="_top">Sparse</a><br/> </td><td> Calculating Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="speed.xml" target="_top">Speed</a><br/> </td><td> Routines That Speed Test CppAD </td></tr><tr valign="top"><td>
<a href="speed.cpp.xml" target="_top">Speed.cpp</a><br/> </td><td> Run All The Speed Tests </td></tr><tr valign="top"><td>
<a href="speedadolc.cpp.xml" target="_top">SpeedAdolc.cpp</a><br/> </td><td> Run All The Adolc Speed Comparison Tests </td></tr><tr valign="top"><td>
<a href="speedexample.cpp.xml" target="_top">SpeedExample.cpp</a><br/> </td><td> Example Use of SpeedTest </td></tr><tr valign="top"><td>
<a href="speedfadbad.cpp.xml" target="_top">SpeedFadbad.cpp</a><br/> </td><td> Run All The Fadbad Speed Comparison Tests </td></tr><tr valign="top"><td>
<a href="speedtest.xml" target="_top">SpeedTest</a><br/> </td><td> Run One Speed Test </td></tr><tr valign="top"><td>
<a href="sqrt.cpp.xml" target="_top">Sqrt.cpp</a><br/> </td><td> The AD sqrt Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sqrtforward.xml" target="_top">SqrtForward</a><br/> </td><td> Square Root Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="sqrtreverse.xml" target="_top">SqrtReverse</a><br/> </td><td> Square Root Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="stdmathunary.xml" target="_top">StdMathUnary</a><br/> </td><td> AD Standard Math Unary Functions </td></tr><tr valign="top"><td>
<a href="sub.xml" target="_top">Sub</a><br/> </td><td> AD Binary Subtraction Operator </td></tr><tr valign="top"><td>
<a href="sub.cpp.xml" target="_top">Sub.cpp</a><br/> </td><td> AD Binary Subtraction: Example and Test </td></tr><tr valign="top"><td>
<a href="subeq.xml" target="_top">SubEq</a><br/> </td><td> AD Computed Assignment Subtraction Operator </td></tr><tr valign="top"><td>
<a href="subeq.cpp.xml" target="_top">SubEq.cpp</a><br/> </td><td> AD Computed Assignment Subtraction: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="T">T</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="tan.cpp.xml" target="_top">Tan.cpp</a><br/> </td><td> The AD tan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="theory.xml" target="_top">Theory</a><br/> </td><td> The Theory of Derivative Calculations </td></tr><tr valign="top"><td>
<a href="tracknewdel.xml" target="_top">TrackNewDel</a><br/> </td><td> Routines That Track Use of New and Delete </td></tr><tr valign="top"><td>
<a href="tracknewdel.cpp.xml" target="_top">TrackNewDel.cpp</a><br/> </td><td> Tracking Use of New and Delete: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="U">U</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="unaryminus.xml" target="_top">UnaryMinus</a><br/> </td><td> AD Unary Minus Operator </td></tr><tr valign="top"><td>
<a href="unaryminus.cpp.xml" target="_top">UnaryMinus.cpp</a><br/> </td><td> AD Unary Minus Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="unaryplus.xml" target="_top">UnaryPlus</a><br/> </td><td> AD Unary Plus Operator </td></tr><tr valign="top"><td>
<a href="unaryplus.cpp.xml" target="_top">UnaryPlus.cpp</a><br/> </td><td> AD Unary Plus Operator: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="V">V</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="value.xml" target="_top">Value</a><br/> </td><td> Convert From an AD Type to its Base Type </td></tr><tr valign="top"><td>
<a href="value.cpp.xml" target="_top">Value.cpp</a><br/> </td><td> Convert From AD to its Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="vecad.xml" target="_top">VecAD</a><br/> </td><td> AD Vectors that Record Index Operations </td></tr><tr valign="top"><td>
<a href="vecad.cpp.xml" target="_top">VecAD.cpp</a><br/> </td><td> AD Vectors that Record Index Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="vectorbool.cpp.xml" target="_top">vectorBool.cpp</a><br/> </td><td> CppAD::vectorBool Class: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="W">W</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="whatsnew03.xml" target="_top">WhatsNew03</a><br/> </td><td> Changes and Additions to CppAD During 2003 </td></tr><tr valign="top"><td>
<a href="whatsnew04.xml" target="_top">WhatsNew04</a><br/> </td><td> Changes and Additions to CppAD During 2004 </td></tr><tr valign="top"><td>
<a href="whatsnew05.xml" target="_top">WhatsNew05</a><br/> </td><td> Changes and Additions to CppAD During 2005 </td></tr><tr valign="top"><td>
<a href="whatsnew06.xml" target="_top">WhatsNew06</a><br/> </td><td> Changes and Additions to CppAD </td></tr><tr valign="top"><td>
<a href="wishlist.xml" target="_top">WishList</a><br/> </td><td> The CppAD Wish List </td></tr><tr valign="top"><td>
</td></tr></table>

</body>
</html>
