/* -----------------------------------------------------------------------
CppAD: C++ Algorithm Differentiation: Copyright (C) 2003-06 Bradley M. Bell

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
------------------------------------------------------------------------ */

$begin InstallUnix$$
$dollar @$$
$spell
	Dev
	sed
	cppad
	gprof
	config
	stdvector
	std
	CppADvector
	ublas
	hpp
	adouble
	badiff
	usr
	cygdrive
	htm
	xml
	Dir
	xvzf
	gz
	GetStarted
	workspace
	Makefile
	exe
	Cygwin
	Microsoft
	dsw
	CppAD
	Adolc
	Fadbad
	ls
	aclocal
$$

$index CppAD, unix install$$
$index unix, CppAD install$$
$index free, unix install$$
$index install, unix CppAD$$

$section Unix Installation and Testing$$

$head Download Current Version$$
$index download, unix$$
Download the file
$href%
	http://www.coin-or.org/Tarballs/CppAD/cppad-20060913.tar.gz%
	cppad-20060913.tar.gz
%$$

$head Extraction$$
Use the command
$codep
	tar -xvzf cppad-20060913.tar.gz
$$
to decompress and extract the unix format version
into the distribution directory
$syntax%
	cppad-06-06-16
%$$
Note that $code 20060913$$ is the version number for CppAD.
All of the commands below are to be executed starting from this
directory.

$head User Documentation$$
The $code Doc$$ sub-directory of the distribution directory
contains user documentation for CppAD.
The files $syntax%Doc/%*%.htm%$$ are in HTML format.
If your browser supports XHTML+MATHML format,
an easier to read copy is available in the files
$syntax%Doc/%*%.xml%$$.

$head Developer Documentation$$
The $code Dev$$ sub-directory of the distribution directory
contains developer documentation for CppAD. 

$head Configure$$
$index configure$$
Enter the directory created by the extraction and execute the command:
$syntax%
	./configure                            \
	--prefix=%PrefixDir%                     \
	--with-GetStarted                      \
	--with-Introduction                    \
	--with-Example                         \
	--with-TestMore                        \
	--with-Speed                           \
	--with-PrintFor                        \
	--with-SpeedExample                    \
	--with-profiling                       \
	--with-stdvector                       \  
	POSTFIX_DIR=%PostfixDir%                 \
	ADOLC_DIR=%AdolcDir%                     \
	FADBAD_DIR=%FadbadDir%                   \
	BOOST_DIR=%BoostDir%                     \
	CPP_ERROR_WARN=%CppErrorsAndWarnings%    \
%$$
where only the $code configure$$ command need appear.
The entries one each of the other lines are optional
and the text in italic is replaced values that you choose.

$head PrefixDir and PostfixDir$$
$index configure, prefix$$
$index prefix, configure$$
$index postfix, configure$$
The default value for $italic PrefixDir$$ is $code @HOME$$
and the default value for $italic PostfixDir$$ is the empty string; 
i.e., by default the CppAD include files 
will install in
$syntax%
	@HOME/include/CppAD
%$$
If you want to install elsewhere, you will have to use this option.
$pre

$$
As an example of using just the $code --prefix$$ option,
if you have permission to write into the directory 
$code /usr/local/include$$ 
$codep
	./configure --prefix=/usr/local
$$ 
will set up for installing the CppAD include files in the directory
$syntax%
	/usr/local/include/CppAD
%$$
This is the standard location for such files on many systems.
$pre

$$
As an example of using both the 
$code --prefix$$ and $code POSTFIX_DIR$$ options,
$codep
	./configure --prefix=/usr POSTFIX_DIR=test
$$ 
will set up for installing the CppAD include files in the directory
$syntax%
	/usr/include/test/CppAD
%$$

$head --with-GetStarted$$
$index GetStarted, unix$$
If the command line argument $code --with-GetStarted$$ is specified,
the $xref/GetStarted.cpp/$$ example will be built.
Once the $code make$$ command 
has been executed, you can run this example by executing the command 
$codep
	GetStarted/GetStarted
$$

$head --with-Introduction$$
$index Introduction, unix$$
If the command line argument $code --with-Introduction$$ is specified,
the $xref/Introduction.cpp/$$ program
(verifies calculations in the $xref/Introduction/$$) will be built.
Once the $code make$$ command
has been executed, you can run these examples by executing the command
$codep
	Introduction/Introduction
$$

$head --with-Example$$
$index example, unix$$
$index test, unix$$
If the command line argument $code --with-Example$$ is specified,
the $xref/Example.cpp/$$ program 
(an extensive set of examples and correctness tests) will be built.
Once the $code make$$ command 
has been executed, you can run these examples by executing the command 
$codep
	Example/Example
$$

$head --with-TestMore$$
$index test more, unix$$
If the command line argument $code --with-TestMore$$ is specified,
another extensive set of correctness tests will be compiled by the
$xref/InstallUnix/make/make/$$ command. Once the $code make$$ command 
has been executed, you can run these tests by executing the command 
$codep
	TestMore/TestMore
$$

$head --with-Speed$$
$index test, unix speed$$
$index speed, unix test$$
If the command line argument $code --with-Speed$$ is specified,
the $xref/Speed.cpp/$$ program
(a set of speed tests) will built.
Once the $code make$$ command 
has been executed, you can run these speed tests by executing the command 
$codep
	Speed/Speed
$$

$head --with-PrintFor$$
$index print, forward mode$$
$index forward, print$$
If the command line argument $code --with-PrintFor$$ is specified,
the $xref/PrintFor.cpp/$$ example will be built.
Once the $code make$$ command 
has been executed, you can run this example by executing the command 
$codep
	PrintFor/PrintFor
$$

$head --with-SpeedExample$$
$index SpeedTest, unix example$$
$index example, unix SpeedTest$$
If the command line argument $code --with-SpeedExample$$ is specified,
the $xref/SpeedExample.cpp/$$ example will be built.
Once the $code make$$ command 
has been executed, you can run this example by executing the command 
$codep
	SpeedExample/SpeedExample
$$

$head --with-profiling$$
$index profile, unix$$
CppAD profile files that aid profiling with the GNU C++ compiler.
If the command line argument $code --with-profiling$$ is specified
(in addition to the argument $code --with-Speed$$)
a program called $code Speed/Speed_p$$ is generated.
In this case, the following commands will profile the speed tests:
$codep
	Speed/Speed_p
	gprof -b Speed/Speed_p
$$ 
If you are using a windows operating system with Cygwin or MinGW, 
you may have to replace $code Speed_p$$ by $code Speed_p.exe$$
in the $code gprof$$ command above. 
$pre

$$
In C++, template parameters and argument types become part of a 
routines's name.
This can make the $code gprof$$ output hard to read 
(the routine names can be very long).
You can remove the template parameters and argument types from the 
routine names by executing the following command
$codep
	gprof -b Speed/Speed_p | sed -f Speed/gprof.sed
$$

$head --with-stdvector$$
$index std::vector, unix$$
The template class 
$xref/CppADvector/$$ is used for extensive examples and testing of CppAD.
If the command line argument $code --with-stdvector$$ is specified,
the default definition of $xref/CppADvector/$$ is replaced by
$codep
	std::vector
$$
(In this case $italic BoostDir$$ must not also be specified.)

$head AdolcDir$$
$index Adolc, unix$$
If you have 
$href%
	http://www.math.tu-dresden.de/~adol-c/%
	ADOLC
%$$
installed on your system, you can 
specify a value for $italic AdolcDir$$ in the 
$xref/InstallUnix/Configure/configure/$$ command line.
The value of $italic AdolcDir$$ must be such that
$syntax%
	%AdolcDir%/include/adolc/adouble.h
%$$
is a valid way to reference $code adouble.h$$.
In this case,
after you execute the $xref/InstallUnix/make/make/$$ command,
you can compare the correctness 
and speed of your version of CppAD with version 1.9 of Adolc.
The commands
$syntax%
	Adolc/Example
	Adolc/Speed
%$$
will run both the speed and correctness tests for this comparison.
$pre

$$
If you are using Cygwin, 
you will have to add to following lines to the file
$code .profile$$ in your home directory:
$syntax%
	PATH=%AdolcDir%/bin:@PATH
	export PATH
%$$
in order for Adolc to run properly.
If $italic AdolcDir$$ begins with a disk specification,
you must use the Cygwin format for the disk specification.
For example, 
if $code d:/ADOLC19$$ is the proper directory,
$code /cygdrive/d/ADOLC19$$ should be used for $italic AdolcDir$$.

$head FadbadDir$$
$index Fadbad, unix$$
If you have
$href%
	http://www.imm.dtu.dk/fadbad.html/%
	FADBAD++
%$$
installed on your system, you can 
specify a value for $italic FadbadDir$$.
It must be such that
$syntax%
	%FadbadDir%/FADBAD++/badiff.h
%$$
is a valid reference to $code badiff.h$$.
In this case,
after you execute the $xref/InstallUnix/make/make/$$ command,
you can compare the correctness 
and speed of your version of CppAD with FADBAD.
The commands
$syntax%
	Fadbad/Example
	Fadbad/Speed
%$$
will run both the speed and correctness tests for this comparison.

$head BoostDir$$
$index boost, unix$$
The template class 
$xref/CppADvector/$$ is used for extensive examples and testing of CppAD.
The default definition for $code CppADvector$$ is
$xref/CppAD_vector//CppAD::vector/$$.
If the command line argument
$syntax%
	BOOST_DIR=%BoostDir%
%$$
is present, it must be such that
$syntax%
	%BoostDir%/boost/numeric/ublas/vector.hpp
%$$
is a valid reference to the file $code vector.hpp$$.
In this case, the default definition of $code CppADvector$$ 
is replaced by
$codep
	boost::numeric::ublas::vector
$$
(see $href%http://www.boost.org%boost%$$).
If $italic BoostDir$$ is present, the argument $code --with-stdvector$$
must not be present.

$head CppErrorsAndWarnings$$
$index compile, unix flags$$
$index flags, unix compile$$
If the command line argument $italic CppErrorsAndWarnings$$ is present,
it specifies compiler error and warning flags. 
For example,
$syntax%
	CPP_ERROR_AND_WARN="-Wall -ansi"
%$$
would specify that error and warning flags $code -Wall$$
and $code -ansi$$ should be included
in all the C++ compile commands.
The error and warning flags chosen must be valid options
for the C++ compiler.
The default value for $italic CppErrorsAndWarnings$$ is the
empty string.


$head make$$
The command
$codep
	make
$$
will compile all of the examples and tests.  
An extensive set of examples and tests can be run as described under
the headings
$xref/InstallUnix/--with-GetStarted/--with-GetStarted/$$,
$xref/InstallUnix/--with-Introduction/--with-Introduction/$$,
$xref/InstallUnix/--with-Example/--with-Example/$$,
$xref/InstallUnix/--with-TestMore/--with-TestMore/$$,
$xref/InstallUnix/--with-Speed/--with-Speed/$$,
$xref/InstallUnix/--with-PrintFor/--with-PrintFor/$$,
$xref/InstallUnix/AdolcDir/AdolcDir/$$, and
$xref/InstallUnix/FadbadDir/FadbadDir/$$ above.

$head Final Installation$$
Once you are satisfied that the tests are giving correct results,
you can install CppAD into easy to use directories by executing the command
$codep
	make install
$$
This will install CppAD in the location specified by 
$xref/InstallUnix/PrefixDir and PostfixDir/PrefixDir and PostfixDir/$$.

$end
