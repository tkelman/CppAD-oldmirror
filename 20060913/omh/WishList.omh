/* -----------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-06 Bradley M. Bell

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
------------------------------------------------------------------------ */
$begin WishList$$
$spell
	xml
	hpp
	xmguidlinesl
	CondExp
	Jacobian
	Vec
	Cpp
	Atan
	CppADlib
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Atan2$$
$index atan2$$
The $xref/Atan2//atan2/$$ function could be made faster by adding
a special operator for it.

$head CondExp$$
$index CondExp$$
Extend the conditional expressions $xref/CondExp/$$ so that they are 
valid for complex types by comparing real parts.
In addition, use this change to extend $xref/LuRatio/$$ so 
that it works with complex AD types.

$head Exceptions$$
When the function
$xref/Independent/$$ is called,  
the resulting $syntax%AD<%Base%>%$$ 
$xref/glossary/Tape State/tape state/$$ is $code Recording$$.
If an exception occurs before the call to the corresponding
$xref/ADFun/$$ constructor, the tape will be stuck 
in the $code Recording$$ state.
Thus, there should be a way to abort the current
$syntax%AD<%Base%>%$$ recording.


$head Multiple Tapes With Same Base Type$$
$index multiple, tape$$
$index tape, multiple$$
Some users have expressed an interest in having multiple tapes,
with the same base type,
recording at the same time. 
The idea is something like this:
$codep
	Independent(x);    // perhaps in thread 1
	Independent(y);    // perhaps in thread 2
	z = x * x;         // operation on tape corresponding to x
	w = y * y;         // operation on tape corresponding to y
	a = w * z;         // would generate an error because cannot mix tapes
$$
One application of this is where each of the tapes is on a different
processor in a shared memory multiple processor application.

$head Operation Sequence$$
It is possible to detect if the 
AD of $italic Base$$ 
$xref/glossary/Operation/Sequence/operation sequence/1/$$ 
does not depend on any of the
$xref/glossary/Independent Variable/independent variable/$$ values.
This could be returned as an extra
$xref/SeqProperty/$$.

$head Software Guidelines$$
The following is a list of some software guidelines taken from
$href%http://www.boost.org/more/lib_guide.htm#Guidelines%boost%$$.
These guidelines are not followed by the current CppAD source code,
but perhaps they should be:

$list number$$
File and directory names should only contain lowercase letters,
numbers underscores and possibly one period.
The leading character must be alphabetic.

$lnext
C++ header files should have the $code .hpp$$ extension.

$lnext
Names (except as noted below) 
should be all lowercase, with words separated by underscores.
For example, acronyms should be treated as ordinary names 
(xml_parser instead of XML_parser).

$lnext
Template parameter names should begin with an uppercase letter.

$lnext
Macro names (gasp!) names should use all uppercase.

$lnext
Use spaces rather than tabs.  

$lend

$head Vector Element Type$$
Change cross references from 
$xref/SimpleVector/Elements of Specified Type/elements of a specified type/$$
to
$xref/SimpleVector/Value Type/value_type/$$.

$end
